{
  "version": 3,
  "sources": ["../../src/MaplibreArcGIS.ts", "../../src/AttributionControl.ts", "../../node_modules/mitt/src/index.ts", "../../node_modules/tslib/tslib.es6.mjs", "../../node_modules/@esri/arcgis-rest-request/src/utils/process-params.ts", "../../node_modules/@esri/arcgis-rest-request/src/utils/encode-query-string.ts", "../../node_modules/@esri/arcgis-rest-form-data/browser-ponyfill.mjs", "../../node_modules/@esri/arcgis-rest-request/src/utils/encode-form-data.ts", "../../node_modules/@esri/arcgis-rest-request/src/utils/ArcGISRequestError.ts", "../../node_modules/@esri/arcgis-rest-request/src/requestConfig.ts", "../../node_modules/@esri/arcgis-rest-request/src/utils/sendNoCorsRequest.ts", "../../node_modules/@esri/arcgis-rest-request/src/utils/warn.ts", "../../node_modules/@esri/arcgis-rest-fetch/browser-ponyfill.mjs", "../../node_modules/@esri/arcgis-rest-request/src/utils/isSameOrigin.ts", "../../node_modules/@esri/arcgis-rest-request/src/request.ts", "../../node_modules/@esri/arcgis-rest-request/src/utils/append-custom-params.ts", "../../node_modules/@esri/arcgis-rest-request/src/utils/ArcGISTokenRequestError.ts", "../../node_modules/@esri/arcgis-rest-request/src/utils/ArcGISAccessDeniedError.ts", "../../node_modules/@esri/arcgis-rest-request/src/utils/clean-url.ts", "../../node_modules/@esri/arcgis-rest-request/src/utils/decode-query-string.ts", "../../node_modules/@esri/arcgis-rest-request/src/utils/ErrorTypes.ts", "../../node_modules/@esri/arcgis-rest-request/src/fetch-token.ts", "../../node_modules/@esri/arcgis-rest-request/src/AuthenticationManagerBase.ts", "../../node_modules/@esri/arcgis-rest-request/src/ApiKeyManager.ts", "../../node_modules/@esri/arcgis-rest-request/src/federation-utils.ts", "../../node_modules/@esri/arcgis-rest-request/src/validate-app-access.ts", "../../node_modules/@esri/arcgis-rest-request/src/revoke-token.ts", "../../node_modules/@esri/arcgis-rest-request/src/utils/base-64-url.ts", "../../node_modules/@esri/arcgis-rest-request/src/utils/generate-code-challenge.ts", "../../node_modules/@esri/arcgis-rest-request/src/utils/generate-random-string.ts", "../../node_modules/@esri/arcgis-rest-request/src/ArcGISIdentityManager.ts", "../../node_modules/@esri/arcgis-rest-request/src/types/job-statuses.ts", "../../node_modules/@esri/arcgis-rest-basemap-sessions/src/utils/defaults.ts", "../../node_modules/@esri/arcgis-rest-basemap-sessions/src/utils/startNewSession.ts", "../../node_modules/@esri/arcgis-rest-basemap-sessions/src/utils/detemineSafetyMargin.ts", "../../node_modules/@esri/arcgis-rest-basemap-sessions/src/BaseSession.ts", "../../node_modules/@esri/arcgis-rest-basemap-sessions/src/BasemapStyleSession.ts", "../../src/BasemapSession.ts", "../../src/Util.ts", "../../src/BasemapStyle.ts", "../../node_modules/@esri/arcgis-rest-portal/src/util/get-portal-url.ts", "../../node_modules/@esri/arcgis-rest-portal/src/util/scrub-control-chars.ts", "../../node_modules/@esri/arcgis-rest-portal/src/items/get.ts", "../../node_modules/@esri/arcgis-rest-feature-service/src/getLayer.ts", "../../node_modules/@esri/arcgis-rest-feature-service/src/helpers.ts", "../../node_modules/@esri/arcgis-rest-feature-service/src/getService.ts", "../../node_modules/@esri/arcgis-rest-feature-service/src/query.ts", "../../src/HostedLayer.ts", "../../src/FeatureLayer.ts", "../../src/VectorTileLayer.ts", "../../package.json"],
  "sourcesContent": ["/*\r\n * Copyright 2025 Esri\r\n *\r\n * Licensed under the Apache License Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nimport { AttributionControl, IAttributionControlOptions, EsriAttribution } from './AttributionControl';\r\nimport { BasemapSession, BasemapSessionEventMap, IBasemapSessionOptions, SessionRefreshedData, SessionResponse } from './BasemapSession';\r\nimport { IBasemapPreferences, BasemapSelfResponse, BasemapStyle, BasemapStyleEventMap, BasemapStyleObject, CodeNamePair, IBasemapStyleOptions, PlacesOptions, StyleEnum, StyleFamily, IUpdateStyleOptions, IApplyStyleOptions, MaplibreStyleOptions } from './BasemapStyle';\r\nimport { FeatureLayer, IFeatureLayerOptions, IQueryOptions } from './FeatureLayer';\r\nimport { HostedLayer, IItemInfo, SupportedSourceSpecification, IHostedLayerOptions } from './HostedLayer';\r\nimport { RestJSAuthenticationManager } from './Util';\r\nimport { VectorTileLayer, IVectorTileLayerOptions, IVectorTileServiceInfo } from './VectorTileLayer';\r\n\r\nimport packageInfo from '../package.json';\r\n\r\ninterface CustomWindow extends Window {\r\n  TEST_ENVIRONMENT?: string | null;\r\n}\r\nconst customWindow: CustomWindow | undefined = window;\r\nif (customWindow && customWindow.TEST_ENVIRONMENT) {\r\n  new EventSource('/esbuild').addEventListener('change', () => location.reload());\r\n}\r\n\r\nconst version = packageInfo.version;\r\n\r\nexport {\r\n  AttributionControl,\r\n  IAttributionControlOptions, IBasemapPreferences, BasemapSelfResponse, BasemapSession, BasemapSessionEventMap, BasemapStyle, BasemapStyleEventMap, BasemapStyleObject, CodeNamePair, EsriAttribution, FeatureLayer,\r\n  IFeatureLayerOptions, HostedLayer,\r\n  IHostedLayerOptions, IBasemapSessionOptions, IBasemapStyleOptions, IItemInfo, PlacesOptions, IQueryOptions,\r\n  RestJSAuthenticationManager, SessionRefreshedData, SessionResponse, StyleEnum, StyleFamily, SupportedSourceSpecification, IUpdateStyleOptions, IApplyStyleOptions, VectorTileLayer, IVectorTileLayerOptions, IVectorTileServiceInfo, version as VERSION, MaplibreStyleOptions,\r\n};\r\n", "import {\r\n  type IControl,\r\n  type Map,\r\n  type AttributionControlOptions as MaplibreAttributionControlOptions,\r\n} from 'maplibre-gl';\r\nimport maplibregl from 'maplibre-gl';\r\n\r\ntype MapLibreMap = Map;\r\n\r\n/**\r\n * Interface for AttributionControl options.\r\n */\r\nexport interface IAttributionControlOptions {\r\n  /**\r\n   * Custom attribution string or array of strings.\r\n   */\r\n  customAttribution?: string | Array<string>;\r\n  /**\r\n   * Whether to display the attribution in a compact format.\r\n   */\r\n  compact?: boolean;\r\n  /**\r\n   * Whether the attribution control will be closed on initial map load.\r\n   */\r\n  collapsed?: boolean;\r\n}\r\n\r\nconst esriAttributionString = 'Powered by \\<a href=\\\"https:\\/\\/www.esri.com\\/\\\"\\>Esri\\<\\/a\\>';\r\nconst maplibreAttributionString = '\\<a href=\\\"https:\\/\\/maplibre.org\\/\\\"\\>MapLibre\\<\\/a\\>';\r\nconst defaultMaplibreAttributionString = '\\<a href=\\\"https:\\/\\/maplibre.org\\/\\\" target=\\\"_blank\\\"\\>MapLibre\\<\\/a\\>';\r\n\r\nexport const EsriAttribution: MaplibreAttributionControlOptions = {\r\n  customAttribution: `${maplibreAttributionString} | ${esriAttributionString}`,\r\n  compact: true,\r\n};\r\n\r\n/**\r\n * The attribution control adds attribution information for ArcGIS Data services in a MapLibre GL JS Map.\r\n */\r\nexport class AttributionControl extends maplibregl.AttributionControl {\r\n  /** @internal */\r\n  private _closed?: boolean;\r\n  private attributionOptions: MaplibreAttributionControlOptions;\r\n\r\n  /**\r\n   * Constructor for AttributionControl.\r\n   * @param options - Options for the attribution control.\r\n   * ```javascript\r\n   * const attributionControl = new AttributionControl({\r\n   *   customAttribution: ['Custom Attribution 1', 'Custom Attribution 2'],\r\n   *   closed: false,\r\n   *   compact: true,\r\n   * });\r\n   * ```\r\n   */\r\n  constructor(options: IAttributionControlOptions = {}) {\r\n    // Incompatible options - 'closed' overrides 'compact'\r\n    if ((!options?.compact) && options?.collapsed) options.compact = true;\r\n\r\n    const attributions = [];\r\n\r\n    if (options.customAttribution) {\r\n      // Append user-provided custom attribution\r\n      if (Array.isArray(options.customAttribution)) {\r\n        attributions.concat(\r\n          options.customAttribution.map((attribution) => {\r\n            if (typeof attribution !== 'string') return '';\r\n            return attribution;\r\n          })\r\n        );\r\n      }\r\n      else if (typeof options.customAttribution === 'string') {\r\n        attributions.push(options.customAttribution);\r\n      }\r\n    }\r\n\r\n    attributions.push(esriAttributionString, maplibreAttributionString);\r\n\r\n    const attributionOptions = {\r\n      compact: (options?.compact !== undefined) ? options.compact : true,\r\n      customAttribution: attributions.join(' | '),\r\n    };\r\n    super(attributionOptions);\r\n\r\n    this.attributionOptions = attributionOptions;\r\n    this._closed = options?.collapsed;\r\n  }\r\n\r\n  /**\r\n   * Event that runs after the control is added to the map.\r\n   * @param map - A MapLibre GL JS Map\r\n   * @returns HTMLElement | null\r\n   * @internal\r\n   */\r\n  onAdd(map: MapLibreMap): HTMLElement | null {\r\n    this._map = map;\r\n    if (!this.canAdd(this._map)) {\r\n      console.warn('Esri attribution already present on map. This attribution control will not be added.');\r\n      return null;\r\n    }\r\n\r\n    const htmlElement = super.onAdd(map);\r\n\r\n    if (this._closed && this._container.classList.contains('maplibregl-compact-show')) {\r\n      this._container.classList.remove('maplibregl-compact-show');\r\n    }\r\n    return htmlElement;\r\n  }\r\n\r\n  /**\r\n   * Checks if the control can be added to the map.\r\n   * @param map - {@link MaplibreMap}\r\n   * @returns boolean\r\n   * @internal\r\n   */\r\n  canAdd(map?: MapLibreMap): boolean {\r\n    if (!map && !this._map) throw new Error('No map provided to attribution control.');\r\n    if (!map) map = this._map;\r\n\r\n    let attributionExists = false;\r\n    if (map._controls.length > 0) {\r\n      map._controls.forEach((control: IControl) => {\r\n        // Error if any other attribution control is present\r\n        if ('_toggleAttribution' in control) {\r\n          const attributionControl = control as maplibregl.AttributionControl;\r\n          if (attributionControl.options.customAttribution === defaultMaplibreAttributionString) {\r\n            map.removeControl(attributionControl);\r\n            // console.warn('Map attribution is handled by ArcGIS BasemapStyle. The default attribution control was overwritten.');\r\n          }\r\n          else if (attributionControl.options.customAttribution.includes(esriAttributionString)) {\r\n            // Esri string already exists,\r\n            attributionExists = true;\r\n          }\r\n          else {\r\n            const errorMessage = 'Unable to load Esri attribution. Set the attributionControl property of BasemapStyle to display custom attribution.';\r\n            throw new Error(errorMessage);\r\n          }\r\n        }\r\n      });\r\n    }\r\n    return !attributionExists;\r\n  }\r\n\r\n  /**\r\n   * Returns the default Esri attribution control options.\r\n   * @returns MaplibreAttributionControlOptions\r\n   */\r\n  static get esriAttribution(): MaplibreAttributionControlOptions {\r\n    const defaultAttribution = new AttributionControl();\r\n    return defaultAttribution.attributionOptions;\r\n  }\r\n}\r\n\r\nexport default AttributionControl;\r\n/*\r\n * Copyright 2025 Esri\r\n *\r\n * Licensed under the Apache License Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n", "export type EventType = string | symbol;\n\n// An event handler can take an optional event argument\n// and should not return a value\nexport type Handler<T = unknown> = (event: T) => void;\nexport type WildcardHandler<T = Record<string, unknown>> = (\n\ttype: keyof T,\n\tevent: T[keyof T]\n) => void;\n\n// An array of all currently registered event handlers for a type\nexport type EventHandlerList<T = unknown> = Array<Handler<T>>;\nexport type WildCardEventHandlerList<T = Record<string, unknown>> = Array<\n\tWildcardHandler<T>\n>;\n\n// A map of event types and their corresponding event handlers.\nexport type EventHandlerMap<Events extends Record<EventType, unknown>> = Map<\n\tkeyof Events | '*',\n\tEventHandlerList<Events[keyof Events]> | WildCardEventHandlerList<Events>\n>;\n\nexport interface Emitter<Events extends Record<EventType, unknown>> {\n\tall: EventHandlerMap<Events>;\n\n\ton<Key extends keyof Events>(type: Key, handler: Handler<Events[Key]>): void;\n\ton(type: '*', handler: WildcardHandler<Events>): void;\n\n\toff<Key extends keyof Events>(\n\t\ttype: Key,\n\t\thandler?: Handler<Events[Key]>\n\t): void;\n\toff(type: '*', handler: WildcardHandler<Events>): void;\n\n\temit<Key extends keyof Events>(type: Key, event: Events[Key]): void;\n\temit<Key extends keyof Events>(\n\t\ttype: undefined extends Events[Key] ? Key : never\n\t): void;\n}\n\n/**\n * Mitt: Tiny (~200b) functional event emitter / pubsub.\n * @name mitt\n * @returns {Mitt}\n */\nexport default function mitt<Events extends Record<EventType, unknown>>(\n\tall?: EventHandlerMap<Events>\n): Emitter<Events> {\n\ttype GenericEventHandler =\n\t\t| Handler<Events[keyof Events]>\n\t\t| WildcardHandler<Events>;\n\tall = all || new Map();\n\n\treturn {\n\t\t/**\n\t\t * A Map of event names to registered handler functions.\n\t\t */\n\t\tall,\n\n\t\t/**\n\t\t * Register an event handler for the given type.\n\t\t * @param {string|symbol} type Type of event to listen for, or `'*'` for all events\n\t\t * @param {Function} handler Function to call in response to given event\n\t\t * @memberOf mitt\n\t\t */\n\t\ton<Key extends keyof Events>(type: Key, handler: GenericEventHandler) {\n\t\t\tconst handlers: Array<GenericEventHandler> | undefined = all!.get(type);\n\t\t\tif (handlers) {\n\t\t\t\thandlers.push(handler);\n\t\t\t} else {\n\t\t\t\tall!.set(type, [handler] as EventHandlerList<Events[keyof Events]>);\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Remove an event handler for the given type.\n\t\t * If `handler` is omitted, all handlers of the given type are removed.\n\t\t * @param {string|symbol} type Type of event to unregister `handler` from (`'*'` to remove a wildcard handler)\n\t\t * @param {Function} [handler] Handler function to remove\n\t\t * @memberOf mitt\n\t\t */\n\t\toff<Key extends keyof Events>(type: Key, handler?: GenericEventHandler) {\n\t\t\tconst handlers: Array<GenericEventHandler> | undefined = all!.get(type);\n\t\t\tif (handlers) {\n\t\t\t\tif (handler) {\n\t\t\t\t\thandlers.splice(handlers.indexOf(handler) >>> 0, 1);\n\t\t\t\t} else {\n\t\t\t\t\tall!.set(type, []);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Invoke all handlers for the given type.\n\t\t * If present, `'*'` handlers are invoked after type-matched handlers.\n\t\t *\n\t\t * Note: Manually firing '*' handlers is not supported.\n\t\t *\n\t\t * @param {string|symbol} type The event type to invoke\n\t\t * @param {Any} [evt] Any value (object is recommended and powerful), passed to each handler\n\t\t * @memberOf mitt\n\t\t */\n\t\temit<Key extends keyof Events>(type: Key, evt?: Events[Key]) {\n\t\t\tlet handlers = all!.get(type);\n\t\t\tif (handlers) {\n\t\t\t\t(handlers as EventHandlerList<Events[keyof Events]>)\n\t\t\t\t\t.slice()\n\t\t\t\t\t.map((handler) => {\n\t\t\t\t\t\thandler(evt!);\n\t\t\t\t\t});\n\t\t\t}\n\n\t\t\thandlers = all!.get('*');\n\t\t\tif (handlers) {\n\t\t\t\t(handlers as WildCardEventHandlerList<Events>)\n\t\t\t\t\t.slice()\n\t\t\t\t\t.map((handler) => {\n\t\t\t\t\t\thandler(type, evt!);\n\t\t\t\t\t});\n\t\t\t}\n\t\t}\n\t};\n}\n", "/******************************************************************************\nCopyright (c) Microsoft Corporation.\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\n***************************************************************************** */\n/* global Reflect, Promise, SuppressedError, Symbol, Iterator */\n\nvar extendStatics = function(d, b) {\n  extendStatics = Object.setPrototypeOf ||\n      ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n      function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n  return extendStatics(d, b);\n};\n\nexport function __extends(d, b) {\n  if (typeof b !== \"function\" && b !== null)\n      throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n  extendStatics(d, b);\n  function __() { this.constructor = d; }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n\nexport var __assign = function() {\n  __assign = Object.assign || function __assign(t) {\n      for (var s, i = 1, n = arguments.length; i < n; i++) {\n          s = arguments[i];\n          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n      return t;\n  }\n  return __assign.apply(this, arguments);\n}\n\nexport function __rest(s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n      t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n              t[p[i]] = s[p[i]];\n      }\n  return t;\n}\n\nexport function __decorate(decorators, target, key, desc) {\n  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n}\n\nexport function __param(paramIndex, decorator) {\n  return function (target, key) { decorator(target, key, paramIndex); }\n}\n\nexport function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\n  function accept(f) { if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\"); return f; }\n  var kind = contextIn.kind, key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\n  var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\n  var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\n  var _, done = false;\n  for (var i = decorators.length - 1; i >= 0; i--) {\n      var context = {};\n      for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\n      for (var p in contextIn.access) context.access[p] = contextIn.access[p];\n      context.addInitializer = function (f) { if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\"); extraInitializers.push(accept(f || null)); };\n      var result = (0, decorators[i])(kind === \"accessor\" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);\n      if (kind === \"accessor\") {\n          if (result === void 0) continue;\n          if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\n          if (_ = accept(result.get)) descriptor.get = _;\n          if (_ = accept(result.set)) descriptor.set = _;\n          if (_ = accept(result.init)) initializers.unshift(_);\n      }\n      else if (_ = accept(result)) {\n          if (kind === \"field\") initializers.unshift(_);\n          else descriptor[key] = _;\n      }\n  }\n  if (target) Object.defineProperty(target, contextIn.name, descriptor);\n  done = true;\n};\n\nexport function __runInitializers(thisArg, initializers, value) {\n  var useValue = arguments.length > 2;\n  for (var i = 0; i < initializers.length; i++) {\n      value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\n  }\n  return useValue ? value : void 0;\n};\n\nexport function __propKey(x) {\n  return typeof x === \"symbol\" ? x : \"\".concat(x);\n};\n\nexport function __setFunctionName(f, name, prefix) {\n  if (typeof name === \"symbol\") name = name.description ? \"[\".concat(name.description, \"]\") : \"\";\n  return Object.defineProperty(f, \"name\", { configurable: true, value: prefix ? \"\".concat(prefix, \" \", name) : name });\n};\n\nexport function __metadata(metadataKey, metadataValue) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\n}\n\nexport function __awaiter(thisArg, _arguments, P, generator) {\n  function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n  return new (P || (P = Promise))(function (resolve, reject) {\n      function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n      function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n      function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n      step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n}\n\nexport function __generator(thisArg, body) {\n  var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === \"function\" ? Iterator : Object).prototype);\n  return g.next = verb(0), g[\"throw\"] = verb(1), g[\"return\"] = verb(2), typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n  function verb(n) { return function (v) { return step([n, v]); }; }\n  function step(op) {\n      if (f) throw new TypeError(\"Generator is already executing.\");\n      while (g && (g = 0, op[0] && (_ = 0)), _) try {\n          if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n          if (y = 0, t) op = [op[0] & 2, t.value];\n          switch (op[0]) {\n              case 0: case 1: t = op; break;\n              case 4: _.label++; return { value: op[1], done: false };\n              case 5: _.label++; y = op[1]; op = [0]; continue;\n              case 7: op = _.ops.pop(); _.trys.pop(); continue;\n              default:\n                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                  if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                  if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                  if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                  if (t[2]) _.ops.pop();\n                  _.trys.pop(); continue;\n          }\n          op = body.call(thisArg, _);\n      } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n      if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n  }\n}\n\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n  }\n  Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nexport function __exportStar(m, o) {\n  for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\n}\n\nexport function __values(o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n      next: function () {\n          if (o && i >= o.length) o = void 0;\n          return { value: o && o[i++], done: !o };\n      }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}\n\nexport function __read(o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o), r, ar = [], e;\n  try {\n      while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  }\n  catch (error) { e = { error: error }; }\n  finally {\n      try {\n          if (r && !r.done && (m = i[\"return\"])) m.call(i);\n      }\n      finally { if (e) throw e.error; }\n  }\n  return ar;\n}\n\n/** @deprecated */\nexport function __spread() {\n  for (var ar = [], i = 0; i < arguments.length; i++)\n      ar = ar.concat(__read(arguments[i]));\n  return ar;\n}\n\n/** @deprecated */\nexport function __spreadArrays() {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n  for (var r = Array(s), k = 0, i = 0; i < il; i++)\n      for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n          r[k] = a[j];\n  return r;\n}\n\nexport function __spreadArray(to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n      if (ar || !(i in from)) {\n          if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n          ar[i] = from[i];\n      }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n}\n\nexport function __await(v) {\n  return this instanceof __await ? (this.v = v, this) : new __await(v);\n}\n\nexport function __asyncGenerator(thisArg, _arguments, generator) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var g = generator.apply(thisArg, _arguments || []), i, q = [];\n  return i = Object.create((typeof AsyncIterator === \"function\" ? AsyncIterator : Object).prototype), verb(\"next\"), verb(\"throw\"), verb(\"return\", awaitReturn), i[Symbol.asyncIterator] = function () { return this; }, i;\n  function awaitReturn(f) { return function (v) { return Promise.resolve(v).then(f, reject); }; }\n  function verb(n, f) { if (g[n]) { i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; if (f) i[n] = f(i[n]); } }\n  function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\n  function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\n  function fulfill(value) { resume(\"next\", value); }\n  function reject(value) { resume(\"throw\", value); }\n  function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\n}\n\nexport function __asyncDelegator(o) {\n  var i, p;\n  return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\n  function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }\n}\n\nexport function __asyncValues(o) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var m = o[Symbol.asyncIterator], i;\n  return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\n  function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\n  function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\n}\n\nexport function __makeTemplateObject(cooked, raw) {\n  if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\n  return cooked;\n};\n\nvar __setModuleDefault = Object.create ? (function(o, v) {\n  Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n  o[\"default\"] = v;\n};\n\nvar ownKeys = function(o) {\n  ownKeys = Object.getOwnPropertyNames || function (o) {\n    var ar = [];\n    for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n    return ar;\n  };\n  return ownKeys(o);\n};\n\nexport function __importStar(mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n  __setModuleDefault(result, mod);\n  return result;\n}\n\nexport function __importDefault(mod) {\n  return (mod && mod.__esModule) ? mod : { default: mod };\n}\n\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n}\n\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n}\n\nexport function __classPrivateFieldIn(state, receiver) {\n  if (receiver === null || (typeof receiver !== \"object\" && typeof receiver !== \"function\")) throw new TypeError(\"Cannot use 'in' operator on non-object\");\n  return typeof state === \"function\" ? receiver === state : state.has(receiver);\n}\n\nexport function __addDisposableResource(env, value, async) {\n  if (value !== null && value !== void 0) {\n    if (typeof value !== \"object\" && typeof value !== \"function\") throw new TypeError(\"Object expected.\");\n    var dispose, inner;\n    if (async) {\n      if (!Symbol.asyncDispose) throw new TypeError(\"Symbol.asyncDispose is not defined.\");\n      dispose = value[Symbol.asyncDispose];\n    }\n    if (dispose === void 0) {\n      if (!Symbol.dispose) throw new TypeError(\"Symbol.dispose is not defined.\");\n      dispose = value[Symbol.dispose];\n      if (async) inner = dispose;\n    }\n    if (typeof dispose !== \"function\") throw new TypeError(\"Object not disposable.\");\n    if (inner) dispose = function() { try { inner.call(this); } catch (e) { return Promise.reject(e); } };\n    env.stack.push({ value: value, dispose: dispose, async: async });\n  }\n  else if (async) {\n    env.stack.push({ async: true });\n  }\n  return value;\n}\n\nvar _SuppressedError = typeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\n  var e = new Error(message);\n  return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\n};\n\nexport function __disposeResources(env) {\n  function fail(e) {\n    env.error = env.hasError ? new _SuppressedError(e, env.error, \"An error was suppressed during disposal.\") : e;\n    env.hasError = true;\n  }\n  var r, s = 0;\n  function next() {\n    while (r = env.stack.pop()) {\n      try {\n        if (!r.async && s === 1) return s = 0, env.stack.push(r), Promise.resolve().then(next);\n        if (r.dispose) {\n          var result = r.dispose.call(r.value);\n          if (r.async) return s |= 2, Promise.resolve(result).then(next, function(e) { fail(e); return next(); });\n        }\n        else s |= 1;\n      }\n      catch (e) {\n        fail(e);\n      }\n    }\n    if (s === 1) return env.hasError ? Promise.reject(env.error) : Promise.resolve();\n    if (env.hasError) throw env.error;\n  }\n  return next();\n}\n\nexport function __rewriteRelativeImportExtension(path, preserveJsx) {\n  if (typeof path === \"string\" && /^\\.\\.?\\//.test(path)) {\n      return path.replace(/\\.(tsx)$|((?:\\.d)?)((?:\\.[^./]+?)?)\\.([cm]?)ts$/i, function (m, tsx, d, ext, cm) {\n          return tsx ? preserveJsx ? \".jsx\" : \".js\" : d && (!ext || !cm) ? m : (d + ext + \".\" + cm.toLowerCase() + \"js\");\n      });\n  }\n  return path;\n}\n\nexport default {\n  __extends,\n  __assign,\n  __rest,\n  __decorate,\n  __param,\n  __esDecorate,\n  __runInitializers,\n  __propKey,\n  __setFunctionName,\n  __metadata,\n  __awaiter,\n  __generator,\n  __createBinding,\n  __exportStar,\n  __values,\n  __read,\n  __spread,\n  __spreadArrays,\n  __spreadArray,\n  __await,\n  __asyncGenerator,\n  __asyncDelegator,\n  __asyncValues,\n  __makeTemplateObject,\n  __importStar,\n  __importDefault,\n  __classPrivateFieldGet,\n  __classPrivateFieldSet,\n  __classPrivateFieldIn,\n  __addDisposableResource,\n  __disposeResources,\n  __rewriteRelativeImportExtension,\n};\n", "/* Copyright (c) 2017 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\n/**\n * Checks parameters to see if we should use FormData to send the request\n * @param params The object whose keys will be encoded.\n * @return A boolean indicating if FormData will be required.\n */\nexport function requiresFormData(params: any) {\n  return Object.keys(params).some((key) => {\n    let value = params[key];\n\n    if (!value) {\n      return false;\n    }\n\n    if (value && value.toParam) {\n      value = value.toParam();\n    }\n\n    const type = value.constructor.name;\n\n    switch (type) {\n      case \"Array\":\n        return false;\n      case \"Object\":\n        return false;\n      case \"Date\":\n        return false;\n      case \"Function\":\n        return false;\n      case \"Boolean\":\n        return false;\n      case \"String\":\n        return false;\n      case \"Number\":\n        return false;\n      default:\n        return true;\n    }\n  });\n}\n\n/**\n * Converts parameters to the proper representation to send to the ArcGIS REST API.\n * @param params The object whose keys will be encoded.\n * @return A new object with properly encoded values.\n */\nexport function processParams(params: any): any {\n  const newParams: any = {};\n\n  Object.keys(params).forEach((key) => {\n    let param = params[key];\n\n    if (param && param.toParam) {\n      param = param.toParam();\n    }\n\n    if (\n      !param &&\n      param !== 0 &&\n      typeof param !== \"boolean\" &&\n      typeof param !== \"string\"\n    ) {\n      return;\n    }\n\n    const type = param.constructor.name;\n\n    let value: any;\n\n    // properly encodes objects, arrays and dates for arcgis.com and other services.\n    // ported from https://github.com/Esri/esri-leaflet/blob/master/src/Request.js#L22-L30\n    // also see https://github.com/Esri/arcgis-rest-js/issues/18:\n    // null, undefined, function are excluded. If you want to send an empty key you need to send an empty string \"\".\n    switch (type) {\n      case \"Array\":\n        // Based on the first element of the array, classify array as an array of arrays, an array of objects\n        // to be stringified, or an array of non-objects to be comma-separated\n        // eslint-disable-next-line no-case-declarations\n        const firstElementType = param[0]?.constructor?.name;\n        value =\n          firstElementType === \"Array\"\n            ? param // pass thru array of arrays\n            : firstElementType === \"Object\"\n            ? JSON.stringify(param) // stringify array of objects\n            : param.join(\",\"); // join other types of array elements\n        break;\n      case \"Object\":\n        value = JSON.stringify(param);\n        break;\n      case \"Date\":\n        value = param.valueOf();\n        break;\n      case \"Function\":\n        value = null;\n        break;\n      case \"Boolean\":\n        value = param + \"\";\n        break;\n      default:\n        value = param;\n        break;\n    }\n    if (\n      value ||\n      value === 0 ||\n      typeof value === \"string\" ||\n      Array.isArray(value)\n    ) {\n      newParams[key] = value;\n    }\n  });\n\n  return newParams;\n}\n", "/* Copyright (c) 2017 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { processParams } from \"./process-params.js\";\n\n/**\n * Encodes keys and parameters for use in a URL's query string.\n *\n * @param key Parameter's key\n * @param value Parameter's value\n * @returns Query string with key and value pairs separated by \"&\"\n */\nexport function encodeParam(key: string, value: any): string {\n  // For array of arrays, repeat key=value for each element of containing array\n  if (Array.isArray(value) && value[0] && Array.isArray(value[0])) {\n    return value\n      .map((arrayElem: string) => encodeParam(key, arrayElem))\n      .join(\"&\");\n  }\n\n  return encodeURIComponent(key) + \"=\" + encodeURIComponent(value);\n}\n\n/**\n * Encodes the passed object as a query string.\n *\n * @param params An object to be encoded.\n * @returns An encoded query string.\n */\nexport function encodeQueryString(params: any): string {\n  const newParams = processParams(params);\n  return Object.keys(newParams)\n    .map((key: any) => {\n      return encodeParam(key, newParams[key]);\n    })\n    .join(\"&\");\n}\n", "export const FormData = globalThis.FormData;\nexport const File = globalThis.File;\nexport const Blob = globalThis.Blob;\n", "/* Copyright (c) 2017 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { processParams, requiresFormData } from \"./process-params.js\";\nimport { encodeQueryString } from \"./encode-query-string.js\";\nimport { FormData } from \"@esri/arcgis-rest-form-data\";\n\n/**\n * Encodes parameters in a [FormData](https://developer.mozilla.org/en-US/docs/Web/API/FormData) object in browsers or in a [FormData](https://github.com/form-data/form-data) in Node.js\n *\n * @param params An object to be encoded.\n * @returns The complete [FormData](https://developer.mozilla.org/en-US/docs/Web/API/FormData) object.\n */\nexport function encodeFormData(\n  params: any,\n  forceFormData?: boolean\n): FormData | string {\n  // see https://github.com/Esri/arcgis-rest-js/issues/499 for more info.\n  const useFormData = requiresFormData(params) || forceFormData;\n  const newParams = processParams(params);\n  if (useFormData) {\n    const formData = new FormData();\n\n    Object.keys(newParams).forEach((key: any) => {\n      if (typeof Blob !== \"undefined\" && newParams[key] instanceof Blob) {\n        /* To name the Blob:\n         1. look to an alternate request parameter called 'fileName'\n         2. see if 'name' has been tacked onto the Blob manually\n         3. if all else fails, use the request parameter\n        */\n        const filename = newParams[\"fileName\"] || newParams[key].name || key;\n        formData.append(key, newParams[key], filename);\n      } else {\n        formData.append(key, newParams[key]);\n      }\n    });\n    return formData;\n  } else {\n    return encodeQueryString(params);\n  }\n}\n", "/* Copyright (c) 2017 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { IRequestOptions } from \"./IRequestOptions.js\";\n\n/**\n * This represents a generic error from an ArcGIS endpoint. There will be details about the error in the {@linkcode ArcGISRequestError.message},  {@linkcode ArcGISRequestError.originalMessage} properties on the error. You\n * can also access the original server response at  {@linkcode ArcGISRequestError.response} which may have additional details.\n *\n * ```js\n * request(someUrl, someOptions).catch(e => {\n *   if(e.name === \"ArcGISRequestError\") {\n *     console.log(\"Something went wrong with the request:\", e);\n *     console.log(\"Full server response\", e.response);\n *   }\n * })\n * ```\n */\nexport class ArcGISRequestError extends Error {\n  /**\n   * The name of this error. Will always be `\"ArcGISRequestError\"` to conform with the [`Error`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error) class.\n   */\n  public name: string;\n\n  /**\n   * Formatted error message. See the [`Error`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error) class for more details.\n   */\n  public message: string;\n\n  /**\n   * The errror message return from the request.\n   */\n  public originalMessage: string;\n\n  /**\n   * The error code returned from the request.\n   */\n  public code: string | number;\n\n  /**\n   * The original JSON response the caused the error.\n   */\n  public response: any;\n\n  /**\n   * The URL of the original request that caused the error\n   */\n  public url: string;\n\n  /**\n   * The options of the original request that caused the error\n   */\n  public options: IRequestOptions;\n\n  /**\n   * Create a new `ArcGISRequestError`  object.\n   *\n   * @param message - The error message from the API\n   * @param code - The error code from the API\n   * @param response - The original response from the API that caused the error\n   * @param url - The original url of the request\n   * @param options - The original options and parameters of the request\n   */\n  constructor(\n    message?: string,\n    code?: string | number,\n    response?: any,\n    url?: string,\n    options?: IRequestOptions\n  ) {\n    // 'Error' breaks prototype chain here\n    super(message);\n\n    // restore prototype chain, see https://stackoverflow.com/questions/41102060/typescript-extending-error-class\n    // we don't need to check for Object.setPrototypeOf as in the answers because we are ES2017 now.\n    // Also see https://github.com/Microsoft/TypeScript-wiki/blob/main/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n    // and https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#custom_error_types\n    const actualProto = new.target.prototype;\n    Object.setPrototypeOf(this, actualProto);\n\n    message = message || \"UNKNOWN_ERROR\";\n    code = code || \"UNKNOWN_ERROR_CODE\";\n\n    this.name = \"ArcGISRequestError\";\n    this.message =\n      code === \"UNKNOWN_ERROR_CODE\" ? message : `${code}: ${message}`;\n    this.originalMessage = message;\n    this.code = code;\n    this.response = response;\n    this.url = url;\n    this.options = options;\n  }\n}\n", "/* istanbul ignore file */\n// Note: currently this is all internal to the package, and we are not exposing\n// anything that a user can set... but we need all this to be able to ensure\n// that multiple instances of the package can share the same config.\n\nexport interface IRequestConfig {\n  noCorsDomains: string[];\n  crossOriginNoCorsDomains: Record<string, number>;\n  pendingNoCorsRequests: PendingRequestCache;\n}\n\nexport type PendingRequestCache = {\n  [key: string]: Promise<void>;\n};\n\n/**\n * The default config for the request module. This is used to store\n * the no-cors domains and pending requests.\n */\nconst DEFAULT_ARCGIS_REQUEST_CONFIG: IRequestConfig = {\n  noCorsDomains: [],\n  crossOriginNoCorsDomains: {},\n  pendingNoCorsRequests: {}\n};\n\nconst GLOBAL_VARIABLE_NAME = \"ARCGIS_REST_JS_NO_CORS\";\n\n// Set the global variable to the default config if it is not aleady defined\n// This is done to ensure that all instances of rest-request work with a single\n// instance of the config\nif (!(globalThis as any)[GLOBAL_VARIABLE_NAME]) {\n  (globalThis as any)[GLOBAL_VARIABLE_NAME] = {\n    ...DEFAULT_ARCGIS_REQUEST_CONFIG\n  } as IRequestConfig;\n}\n\n// export the settings as immutable consts that read from the global config\nexport const requestConfig = (globalThis as any)[\n  GLOBAL_VARIABLE_NAME\n] as IRequestConfig;\n", "import { requestConfig } from \"../requestConfig.js\";\n\n/**\n * Send a no-cors request to the passed uri. This is used to pick up\n * a cookie from a 3rd party server to meet a requirement of some authentication\n * flows.\n * @param url\n * @returns\n */\nexport function sendNoCorsRequest(url: string): Promise<void> {\n  // drop any query params, other than f=json\n  const urlObj = new URL(url);\n  url = urlObj.origin + urlObj.pathname;\n\n  if (urlObj.search.includes(\"f=json\")) {\n    url += \"?f=json\";\n  }\n\n  const origin = urlObj.origin;\n\n  // If we have already sent a no-cors request to this url, return the promise\n  // so we don't send multiple requests\n  if (requestConfig.pendingNoCorsRequests[origin]) {\n    return requestConfig.pendingNoCorsRequests[origin];\n  }\n\n  // Make the request and add to the cache\n  requestConfig.pendingNoCorsRequests[origin] = fetch(url, {\n    mode: \"no-cors\",\n    credentials: \"include\",\n    cache: \"no-store\"\n  })\n    .then((response) => {\n      // Add to the list of cross-origin no-cors domains\n      // if the domain is not already in the list\n      if (requestConfig.noCorsDomains.indexOf(origin) === -1) {\n        requestConfig.noCorsDomains.push(origin);\n      }\n\n      // Hold the timestamp of this request so we can decide when to\n      // send another request to this domain\n      requestConfig.crossOriginNoCorsDomains[origin.toLowerCase()] = Date.now();\n\n      // Remove the pending request from the cache\n      delete requestConfig.pendingNoCorsRequests[origin];\n\n      // Due to limitations of fetchMock at the version of the tooling\n      // in this project, we can't mock the response type of a no-cors request\n      // and thus we can't test this. So we are going to comment this out\n      // and leave it in place for now. If we need to test this, we can\n      // update the tooling to a version that supports this. Also\n      // JS SDK does not do this check, so we are going to leave it out for now.\n\n      // ================================================================\n      // no-cors requests are opaque to javascript\n      // and thus will always return a response with a type of \"opaque\"\n      // if (response.type === \"opaque\") {\n      //   return Promise.resolve();\n      // } else {\n      //   // Not sure if this is possible, but since we have a check above\n      //   // lets handle the else case\n      //   return Promise.reject(\n      //     new Error(`no-cors request to ${origin} not opaque`)\n      //   );\n      // }\n      // ================================================================\n    })\n    .catch((e) => {\n      // Not sure this is necessary, but if the request fails\n      // we should remove it from the pending requests\n      // and return a rejected promise with some information\n      delete requestConfig.pendingNoCorsRequests[origin];\n      return Promise.reject(new Error(`no-cors request to ${origin} failed`));\n    });\n  // return the promise\n  return requestConfig.pendingNoCorsRequests[origin];\n}\n\n/**\n * Allow us to get the no-cors domains that are registered\n * so we can pass them into the identity manager\n * @returns\n */\nexport function getRegisteredNoCorsDomains(): string[] {\n  // return the no-cors domains\n  return requestConfig.noCorsDomains;\n}\n\n/**\n * Register the domains that are allowed to be used in no-cors requests\n * This is called by `request` when the portal/self response is intercepted\n * and the `.authorizedCrossOriginNoCorsDomains` property is set.\n * @param authorizedCrossOriginNoCorsDomains\n */\nexport function registerNoCorsDomains(\n  authorizedCrossOriginNoCorsDomains: string[]\n): void {\n  // register the domains\n  authorizedCrossOriginNoCorsDomains.forEach((domain: string) => {\n    // ensure domain is lower case and ensure protocol is included\n    domain = domain.toLowerCase();\n    if (/^https?:\\/\\//.test(domain)) {\n      addNoCorsDomain(domain);\n    } else {\n      // no protocol present, so add http and https\n      addNoCorsDomain(\"http://\" + domain);\n      addNoCorsDomain(\"https://\" + domain);\n    }\n  });\n}\n\n/**\n * Ensure we don't get duplicate domains in the no-cors domains list\n * @param domain\n */\nfunction addNoCorsDomain(url: string): void {\n  // Since the caller of this always ensures a protocol is present\n  // we can safely use the URL constructor to get the origin\n  // and add it to the no-cors domains list\n  const uri = new URL(url);\n  const domain = uri.origin;\n  if (requestConfig.noCorsDomains.indexOf(domain) === -1) {\n    requestConfig.noCorsDomains.push(domain);\n  }\n}\n\n/**\n *  Is the origin of the passed url in the no-cors domains list?\n * @param url\n * @returns\n */\nexport function isNoCorsDomain(url: string): boolean {\n  let result = false;\n\n  if (requestConfig.noCorsDomains.length) {\n    // is the current url in the no-cors domains?\n    const origin = new URL(url).origin.toLowerCase();\n    result = requestConfig.noCorsDomains.some((domain) => {\n      return origin.includes(domain);\n    });\n  }\n\n  return result;\n}\n\n/**\n * Is the origin of the passed url in the no-cors domains list\n * and do we need to send a no-cors request?\n *\n * @param url\n * @returns\n */\nexport function isNoCorsRequestRequired(url: string): boolean {\n  let result = false;\n  // is the current origin in the no-cors domains?\n  if (isNoCorsDomain(url)) {\n    const origin = new URL(url).origin.toLowerCase();\n\n    // check if we have sent a no-cors request to this domain in the last hour\n    const lastRequest = requestConfig.crossOriginNoCorsDomains[origin] || 0;\n    if (Date.now() - 60 * 60000 > lastRequest) {\n      result = true;\n    }\n  }\n\n  return result;\n}\n", "/* Copyright (c) 2017-2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\n/**\n * Method used internally to surface messages to developers.\n */\nexport function warn(message: string) {\n  if (console && console.warn) {\n    console.warn.apply(console, [message]);\n  }\n}\n", "export function getFetch() {\n  return Promise.resolve({\n    fetch: globalThis.fetch,\n    Headers: globalThis.Headers,\n    Response: globalThis.Response,\n    Request: globalThis.Request\n  });\n}\n", "/**\n * Is the given URL the same origin as the current window?\n * Used to determine if we need to do any additional cross-origin\n * handling for the request.\n * @param url\n * @param win - optional window object to use for origin comparison\n *             (useful for testing)\n * @returns\n */\nexport function isSameOrigin(url: string, win?: Window | undefined): boolean {\n  /* istanbul ignore next */\n  if ((!win && !window) || !url) {\n    return false;\n  } else {\n    win = win || window;\n    const origin = win.location?.origin;\n    return url.startsWith(origin);\n  }\n}\n", "/* Copyright (c) 2017-2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { encodeFormData } from \"./utils/encode-form-data.js\";\nimport { encodeQueryString } from \"./utils/encode-query-string.js\";\nimport { requiresFormData } from \"./utils/process-params.js\";\nimport { ArcGISRequestError } from \"./utils/ArcGISRequestError.js\";\nimport {\n  IRequestOptions,\n  InternalRequestOptions\n} from \"./utils/IRequestOptions.js\";\nimport {\n  isNoCorsDomain,\n  isNoCorsRequestRequired,\n  registerNoCorsDomains,\n  sendNoCorsRequest\n} from \"./utils/sendNoCorsRequest.js\";\nimport { IParams } from \"./utils/IParams.js\";\nimport { warn } from \"./utils/warn.js\";\nimport { IRetryAuthError } from \"./utils/retryAuthError.js\";\nimport { getFetch } from \"@esri/arcgis-rest-fetch\";\nimport { IAuthenticationManager } from \"./index.js\";\nimport { isSameOrigin } from \"./utils/isSameOrigin.js\";\n\nexport const NODEJS_DEFAULT_REFERER_HEADER = `@esri/arcgis-rest-js`;\n\n/**\n * Sets the default options that will be passed in **all requests across all `@esri/arcgis-rest-js` modules**.\n *\n * ```js\n * import { setDefaultRequestOptions } from \"@esri/arcgis-rest-request\";\n *\n * setDefaultRequestOptions({\n *   authentication: ArcGISIdentityManager // all requests will use this session by default\n * })\n * ```\n *\n * You should **never** set a default `authentication` when you are in a server side environment where you may be handling requests for many different authenticated users.\n *\n * @param options The default options to pass with every request. Existing default will be overwritten.\n * @param hideWarnings Silence warnings about setting default `authentication` in shared environments.\n */\nexport function setDefaultRequestOptions(\n  options: IRequestOptions,\n  hideWarnings?: boolean\n) {\n  if (options.authentication && !hideWarnings) {\n    warn(\n      \"You should not set `authentication` as a default in a shared environment such as a web server which will process multiple users requests. You can call `setDefaultRequestOptions` with `true` as a second argument to disable this warning.\"\n    );\n  }\n  (globalThis as any).DEFAULT_ARCGIS_REQUEST_OPTIONS = options;\n}\n\nexport function getDefaultRequestOptions() {\n  return (\n    (globalThis as any).DEFAULT_ARCGIS_REQUEST_OPTIONS || {\n      httpMethod: \"POST\",\n      params: {\n        f: \"json\"\n      }\n    }\n  );\n}\n\n/**\n * This error is thrown when a request encounters an invalid token error. Requests that use {@linkcode ArcGISIdentityManager} or\n * {@linkcode ApplicationCredentialsManager} in the `authentication` option the authentication manager will automatically try to generate\n * a fresh token using either {@linkcode ArcGISIdentityManager.refreshCredentials} or\n * {@linkcode ApplicationCredentialsManager.refreshCredentials}. If the request with the new token fails you will receive an `ArcGISAuthError`\n * if refreshing the token fails you will receive an instance of {@linkcode ArcGISTokenRequestError}.\n *\n * ```js\n * request(someUrl, {\n *   authentication: identityManager,\n *   // some additional options...\n * }).catch(e => {\n *   if(e.name === \"ArcGISAuthError\") {\n *     console.log(\"Request with a new token failed you might want to have the user authorize again.\")\n *   }\n *\n *   if(e.name === \"ArcGISTokenRequestError\") {\n *     console.log(\"There was an error refreshing the token you might want to have the user authorize again.\")\n *   }\n * })\n * ```\n */\nexport class ArcGISAuthError extends ArcGISRequestError {\n  /**\n   * Create a new `ArcGISAuthError`  object.\n   *\n   * @param message - The error message from the API\n   * @param code - The error code from the API\n   * @param response - The original response from the API that caused the error\n   * @param url - The original url of the request\n   * @param options - The original options of the request\n   */\n  constructor(\n    message = \"AUTHENTICATION_ERROR\",\n    code: string | number = \"AUTHENTICATION_ERROR_CODE\",\n    response?: any,\n    url?: string,\n    options?: IRequestOptions\n  ) {\n    super(message, code, response, url, options);\n    this.name = \"ArcGISAuthError\";\n    this.message =\n      code === \"AUTHENTICATION_ERROR_CODE\" ? message : `${code}: ${message}`;\n\n    // restore prototype chain, see https://stackoverflow.com/questions/41102060/typescript-extending-error-class\n    // we don't need to check for Object.setPrototypeOf as in the answers because we are ES2017 now.\n    // Also see https://github.com/Microsoft/TypeScript-wiki/blob/main/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n    // and https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#custom_error_types\n    const actualProto = new.target.prototype;\n    Object.setPrototypeOf(this, actualProto);\n  }\n\n  public retry(getSession: IRetryAuthError, retryLimit = 1) {\n    let tries = 0;\n\n    const retryRequest = (resolve: any, reject: any) => {\n      tries = tries + 1;\n\n      getSession(this.url, this.options)\n        .then((session) => {\n          const newOptions = {\n            ...this.options,\n            ...{ authentication: session }\n          };\n\n          return internalRequest(this.url, newOptions);\n        })\n        .then((response) => {\n          resolve(response);\n        })\n        .catch((e) => {\n          if (e.name === \"ArcGISAuthError\" && tries < retryLimit) {\n            retryRequest(resolve, reject);\n          } else if (\n            e.name === this.name &&\n            e.message === this.message &&\n            tries >= retryLimit\n          ) {\n            reject(this);\n          } else {\n            reject(e);\n          }\n        });\n    };\n\n    return new Promise((resolve, reject) => {\n      retryRequest(resolve, reject);\n    });\n  }\n}\n\n/**\n * Checks for errors in a JSON response from the ArcGIS REST API. If there are no errors, it will return the `data` passed in. If there is an error, it will throw an `ArcGISRequestError` or `ArcGISAuthError`.\n *\n * @param data The response JSON to check for errors.\n * @param url The url of the original request\n * @param params The parameters of the original request\n * @param options The options of the original request\n * @returns The data that was passed in the `data` parameter\n */\nexport function checkForErrors(\n  response: any,\n  url?: string,\n  params?: IParams,\n  options?: IRequestOptions,\n  originalAuthError?: ArcGISAuthError\n): any {\n  // this is an error message from billing.arcgis.com backend\n  if (response.code >= 400) {\n    const { message, code } = response;\n    throw new ArcGISRequestError(message, code, response, url, options);\n  }\n\n  // error from ArcGIS Online or an ArcGIS Portal or server instance.\n  if (response.error) {\n    const { message, code, messageCode } = response.error;\n    const errorCode = messageCode || code || \"UNKNOWN_ERROR_CODE\";\n\n    if (code === 498 || code === 499) {\n      if (originalAuthError) {\n        throw originalAuthError;\n      } else {\n        throw new ArcGISAuthError(message, errorCode, response, url, options);\n      }\n    }\n\n    throw new ArcGISRequestError(message, errorCode, response, url, options);\n  }\n\n  // error from a status check\n  if (response.status === \"failed\" || response.status === \"failure\") {\n    let message: string;\n    let code = \"UNKNOWN_ERROR_CODE\";\n\n    try {\n      message = JSON.parse(response.statusMessage).message;\n      code = JSON.parse(response.statusMessage).code;\n    } catch (e) {\n      message = response.statusMessage || response.message;\n    }\n\n    throw new ArcGISRequestError(message, code, response, url, options);\n  }\n\n  return response;\n}\n\n/**\n * This is the internal implementation of `request` without the automatic retry behavior to prevent\n * infinite loops when a server continues to return invalid token errors.\n *\n * @param url - The URL of the ArcGIS REST API endpoint.\n * @param requestOptions - Options for the request, including parameters relevant to the endpoint.\n * @returns A Promise that will resolve with the data from the response.\n * @internal\n */\nexport function internalRequest(\n  url: string,\n  requestOptions: InternalRequestOptions\n): Promise<any> {\n  const defaults = getDefaultRequestOptions();\n  const options: IRequestOptions = {\n    ...{ httpMethod: \"POST\" },\n    ...defaults,\n    ...requestOptions,\n    ...{\n      params: {\n        ...defaults.params,\n        ...requestOptions.params\n      },\n      headers: {\n        ...defaults.headers,\n        ...requestOptions.headers\n      }\n    }\n  };\n\n  const { httpMethod, rawResponse } = options;\n\n  const params: IParams = {\n    ...{ f: \"json\" },\n    ...options.params\n  };\n\n  let originalAuthError: ArcGISAuthError = null;\n\n  const fetchOptions: RequestInit = {\n    method: httpMethod,\n    signal: options.signal,\n    /* ensures behavior mimics XMLHttpRequest.\n    needed to support sending IWA cookies */\n    credentials: options.credentials || \"same-origin\"\n  };\n\n  // Is this a no-cors domain? if so we need to set credentials to include\n  if (isNoCorsDomain(url)) {\n    fetchOptions.credentials = \"include\";\n  }\n\n  // the /oauth2/platformSelf route will add X-Esri-Auth-Client-Id header\n  // and that request needs to send cookies cross domain\n  // so we need to set the credentials to \"include\"\n  if (\n    options.headers &&\n    options.headers[\"X-Esri-Auth-Client-Id\"] &&\n    url.indexOf(\"/oauth2/platformSelf\") > -1\n  ) {\n    fetchOptions.credentials = \"include\";\n  }\n\n  let authentication: IAuthenticationManager;\n\n  // Check to see if this is a raw token as a string and create a IAuthenticationManager like object for it.\n  // Otherwise this just assumes that options.authentication is an IAuthenticationManager.\n  if (typeof options.authentication === \"string\") {\n    const rawToken = options.authentication;\n\n    authentication = {\n      portal: \"https://www.arcgis.com/sharing/rest\",\n      getToken: () => {\n        return Promise.resolve(rawToken);\n      }\n    };\n\n    /* istanbul ignore else - we don't need to test NOT warning people */\n    if (\n      !options.authentication.startsWith(\"AAPK\") &&\n      !options.authentication.startsWith(\"AATK\") && // doesn't look like an API Key\n      !options.suppressWarnings && // user doesn't want to suppress warnings for this request\n      !(globalThis as any).ARCGIS_REST_JS_SUPPRESS_TOKEN_WARNING // we haven't shown the user this warning yet\n    ) {\n      warn(\n        `Using an oAuth 2.0 access token directly in the token option is discouraged. Consider using ArcGISIdentityManager or Application session. See https://esriurl.com/arcgis-rest-js-direct-token-warning for more information.`\n      );\n\n      (globalThis as any).ARCGIS_REST_JS_SUPPRESS_TOKEN_WARNING = true;\n    }\n  } else {\n    authentication = options.authentication;\n  }\n\n  // for errors in GET requests we want the URL passed to the error to be the URL before\n  // query params are applied.\n  const originalUrl = url;\n\n  // default to false, for nodejs\n  let sameOrigin = false;\n  // if we are in a browser, check if the url is same origin\n  /* istanbul ignore else */\n  if (typeof window !== \"undefined\") {\n    sameOrigin = isSameOrigin(url);\n  }\n  const requiresNoCors = !sameOrigin && isNoCorsRequestRequired(url);\n\n  // the /oauth2/platformSelf route will add X-Esri-Auth-Client-Id header\n  // and that request needs to send cookies cross domain\n  // so we need to set the credentials to \"include\"\n  if (\n    options.headers &&\n    options.headers[\"X-Esri-Auth-Client-Id\"] &&\n    url.indexOf(\"/oauth2/platformSelf\") > -1\n  ) {\n    fetchOptions.credentials = \"include\";\n  }\n\n  // Simple first promise that we may turn into the no-cors request\n  let firstPromise = Promise.resolve();\n  if (requiresNoCors) {\n    // ensure we send cookies on the request after\n    fetchOptions.credentials = \"include\";\n    firstPromise = sendNoCorsRequest(url);\n  }\n\n  return firstPromise\n    .then(() =>\n      authentication\n        ? authentication.getToken(url).catch((err) => {\n            /**\n             * append original request url and requestOptions\n             * to the error thrown by getToken()\n             * to assist with retrying\n             */\n            err.url = url;\n            err.options = options;\n            /**\n             * if an attempt is made to talk to an unfederated server\n             * first try the request anonymously. if a 'token required'\n             * error is thrown, throw the UNFEDERATED error then.\n             */\n            originalAuthError = err;\n            return Promise.resolve(\"\");\n          })\n        : Promise.resolve(\"\")\n    )\n    .then((token) => {\n      if (token.length) {\n        params.token = token;\n      }\n\n      if (authentication && authentication.getDomainCredentials) {\n        fetchOptions.credentials = authentication.getDomainCredentials(url);\n      }\n\n      // Custom headers to add to request. IRequestOptions.headers with merge over requestHeaders.\n      const requestHeaders: {\n        [key: string]: any;\n      } = {};\n\n      if (fetchOptions.method === \"GET\") {\n        // Prevents token from being passed in query params when hideToken option is used.\n        /* istanbul ignore if - window is always defined in a browser. Test case is covered by Jasmine in node test */\n        if (\n          params.token &&\n          options.hideToken &&\n          // Sharing API does not support preflight check required by modern browsers https://developer.mozilla.org/en-US/docs/Glossary/Preflight_request\n          typeof window === \"undefined\"\n        ) {\n          requestHeaders[\"X-Esri-Authorization\"] = `Bearer ${params.token}`;\n          delete params.token;\n        }\n        // encode the parameters into the query string\n        const queryParams = encodeQueryString(params);\n        // dont append a '?' unless parameters are actually present\n        const urlWithQueryString =\n          queryParams === \"\" ? url : url + \"?\" + encodeQueryString(params);\n\n        if (\n          // This would exceed the maximum length for URLs by 2000 as default or as specified by the consumer and requires POST\n          (options.maxUrlLength &&\n            urlWithQueryString.length > options.maxUrlLength) ||\n          (!options.maxUrlLength && urlWithQueryString.length > 2000) ||\n          // Or if the customer requires the token to be hidden and it has not already been hidden in the header (for browsers)\n          (params.token && options.hideToken)\n        ) {\n          // the consumer specified a maximum length for URLs\n          // and this would exceed it, so use post instead\n          fetchOptions.method = \"POST\";\n\n          // If the token was already added as a Auth header, add the token back to body with other params instead of header\n          if (token.length && options.hideToken) {\n            params.token = token;\n            // Remove existing header that was added before url query length was checked\n            delete requestHeaders[\"X-Esri-Authorization\"];\n          }\n        } else {\n          // just use GET\n          url = urlWithQueryString;\n        }\n      }\n\n      /* updateResources currently requires FormData even when the input parameters dont warrant it.\n  https://developers.arcgis.com/rest/users-groups-and-items/update-resources.htm\n      see https://github.com/Esri/arcgis-rest-js/pull/500 for more info. */\n      const forceFormData = new RegExp(\"/items/.+/updateResources\").test(url);\n\n      if (fetchOptions.method === \"POST\") {\n        fetchOptions.body = encodeFormData(params, forceFormData) as any;\n      }\n\n      // Mixin headers from request options\n      fetchOptions.headers = {\n        ...requestHeaders,\n        ...options.headers\n      };\n\n      // This should have the same conditional for Node JS as ArcGISIdentityManager.refreshWithUsernameAndPassword()\n      // to ensure that generated tokens have the same referer when used in Node with a username and password.\n      /* istanbul ignore next - karma reports coverage on browser tests only */\n      if (\n        (typeof window === \"undefined\" ||\n          (window && typeof window.document === \"undefined\")) &&\n        !fetchOptions.headers.referer\n      ) {\n        fetchOptions.headers.referer = NODEJS_DEFAULT_REFERER_HEADER;\n      }\n\n      /* istanbul ignore else blob responses are difficult to make cross platform we will just have to trust the isomorphic fetch will do its job */\n      if (!requiresFormData(params) && !forceFormData) {\n        fetchOptions.headers[\"Content-Type\"] =\n          \"application/x-www-form-urlencoded\";\n      }\n\n      /**\n       * Check for a global fetch first and use it if available. This allows us to use the default\n       * configuration of fetch-mock in tests.\n       */\n\n      /* istanbul ignore next coverage is based on browser code and we don't test for the absence of global fetch so we can skip the else here. */\n      return globalThis.fetch\n        ? globalThis.fetch(url, fetchOptions)\n        : getFetch().then(({ fetch }) => {\n            return fetch(url, fetchOptions);\n          });\n    })\n    .then((response: any) => {\n      // the request got back an error status code (4xx, 5xx)\n      if (!response.ok) {\n        // we need to determine if the server returned a JSON body with more details.\n        // this is the format used by newer services such as the Places and Style service.\n        return response\n          .json()\n          .then((jsonError: any) => {\n            // The body can be parsed as JSON\n            const { status, statusText } = response;\n            const { message, details } = jsonError.error;\n            const formattedMessage = `${message}. ${\n              details ? details.join(\" \") : \"\"\n            }`.trim();\n\n            throw new ArcGISRequestError(\n              formattedMessage,\n              `HTTP ${status} ${statusText}`,\n              jsonError,\n              url,\n              options\n            );\n          })\n          .catch((e: any) => {\n            // if we already were about to format this as an ArcGISRequestError throw that error\n            if (e.name === \"ArcGISRequestError\") {\n              throw e;\n            }\n\n            // server responded w/ an actual error (404, 500, etc) but we could not parse it as JSON\n            const { status, statusText } = response;\n            throw new ArcGISRequestError(\n              statusText,\n              `HTTP ${status}`,\n              response,\n              url,\n              options\n            );\n          });\n      }\n      if (rawResponse) {\n        return response;\n      }\n      switch (params.f) {\n        case \"json\":\n          return response.json();\n        case \"geojson\":\n          return response.json();\n        case \"html\":\n          return response.text();\n        case \"text\":\n          return response.text();\n        /* istanbul ignore next blob responses are difficult to make cross platform we will just have to trust that isomorphic fetch will do its job */\n        default:\n          return response.blob();\n      }\n    })\n    .then((data) => {\n      // Check for an error in the JSON body of a successful response.\n      // Most ArcGIS Server services will return a successful status code but include an error in the response body.\n      if ((params.f === \"json\" || params.f === \"geojson\") && !rawResponse) {\n        const response = checkForErrors(\n          data,\n          originalUrl,\n          params,\n          options,\n          originalAuthError\n        );\n\n        // If this was a portal/self call, and we got authorizedNoCorsDomains back\n        // register them\n        if (data && /\\/sharing\\/rest\\/(accounts|portals)\\/self/i.test(url)) {\n          // if we have a list of no-cors domains, register them\n          if (Array.isArray(data.authorizedCrossOriginNoCorsDomains)) {\n            registerNoCorsDomains(data.authorizedCrossOriginNoCorsDomains);\n          }\n        }\n\n        if (originalAuthError) {\n          /* If the request was made to an unfederated service that\n          didn't require authentication, add the base url and a dummy token\n          to the list of trusted servers to avoid another federation check\n          in the event of a repeat request */\n          const truncatedUrl: string = url\n            .toLowerCase()\n            .split(/\\/rest(\\/admin)?\\/services\\//)[0];\n\n          (options.authentication as any).federatedServers[truncatedUrl] = {\n            token: [],\n            // default to 24 hours\n            expires: new Date(Date.now() + 86400 * 1000)\n          };\n          originalAuthError = null;\n        }\n        return response;\n      } else {\n        return data;\n      }\n    });\n}\n\n/**\n * Generic method for making HTTP requests to ArcGIS REST API endpoints.\n *\n * ```js\n * import { request } from '@esri/arcgis-rest-request';\n *\n * request('https://www.arcgis.com/sharing/rest')\n *   .then(response) // response.currentVersion === 5.2\n *\n * request('https://www.arcgis.com/sharing/rest', {\n *   httpMethod: \"GET\"\n * })\n *\n * request('https://www.arcgis.com/sharing/rest/search', {\n *   params: { q: 'parks' }\n * })\n *   .then(response) // response.total => 78379\n * ```\n *\n * @param url - The URL of the ArcGIS REST API endpoint.\n * @param requestOptions - Options for the request, including parameters relevant to the endpoint.\n * @returns A Promise that will resolve with the data from the response.\n */\nexport function request(\n  url: string,\n  requestOptions: IRequestOptions = { params: { f: \"json\" } }\n): Promise<any> {\n  const { request, ...internalOptions } = requestOptions;\n  // if the user passed in a custom request function, use that instead of the default\n  return request\n    ? request(url, internalOptions)\n    : internalRequest(url, internalOptions).catch((e) => {\n        if (\n          e instanceof ArcGISAuthError &&\n          requestOptions.authentication &&\n          typeof requestOptions.authentication !== \"string\" &&\n          requestOptions.authentication.canRefresh &&\n          requestOptions.authentication.refreshCredentials\n        ) {\n          return e.retry(() => {\n            return (requestOptions.authentication as any).refreshCredentials();\n          }, 1);\n        } else {\n          return Promise.reject(e);\n        }\n      });\n}\n", "/* Copyright (c) 2017-2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { IRequestOptions } from \"./IRequestOptions.js\";\n\n/**\n * Helper for methods with lots of first order request options to pass through as request parameters.\n */\nexport function appendCustomParams<T extends IRequestOptions>(\n  customOptions: T,\n  keys: Array<keyof T>,\n  baseOptions?: Partial<T>\n): IRequestOptions {\n  // NOTE: this must be kept in sync with the keys in IRequestOptions\n  const requestOptionsKeys = [\n    \"params\",\n    \"httpMethod\",\n    \"rawResponse\",\n    \"authentication\",\n    \"hideToken\",\n    \"portal\",\n    \"credentials\",\n    \"maxUrlLength\",\n    \"headers\",\n    \"signal\",\n    \"suppressWarnings\",\n    \"request\"\n  ];\n\n  const options: T = {\n    ...{ params: {} },\n    ...baseOptions,\n    ...customOptions\n  };\n\n  // merge all keys in customOptions into options.params\n  options.params = keys.reduce((value, key) => {\n    if (\n      customOptions[key] ||\n      typeof customOptions[key] === \"boolean\" ||\n      (typeof customOptions[key] === \"number\" &&\n        (customOptions[key] as unknown) === 0)\n    ) {\n      value[key as any] = customOptions[key];\n    }\n    return value;\n  }, options.params);\n\n  // now remove all properties in options that don't exist in IRequestOptions\n  return requestOptionsKeys.reduce((value, key) => {\n    if ((options as any)[key]) {\n      (value as any)[key] = (options as any)[key];\n    }\n    return value;\n  }, {} as IRequestOptions);\n}\n", "/* Copyright (c) 2022 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { IRequestOptions } from \"./IRequestOptions.js\";\n\n/**\n * There are 5 potential error codes that might be thrown by {@linkcode ArcGISTokenRequestError}. 2 of these codes are used by both\n * {@linkcode ArcGISIdentityManager} or {@linkcode ApplicationCredentialsManager}:\n *\n * * `TOKEN_REFRESH_FAILED` when a request for an new access token fails.\n * * `UNKNOWN_ERROR_CODE` the error is unknown. More information may be available in {@linkcode ArcGISTokenRequestError.response}\n *\n * The 3 remaining error codes will only be thrown when using {@linkcode ArcGISIdentityManager}:\n *\n * * `GENERATE_TOKEN_FOR_SERVER_FAILED` when a request for a token for a specific federated server fails.\n * * `REFRESH_TOKEN_EXCHANGE_FAILED` when a request for a new refresh token fails.\n * * `NOT_FEDERATED` when the requested server isn't federated with the portal specified in {@linkcode ArcGISIdentityManager.portal}.\n */\nexport enum ArcGISTokenRequestErrorCodes {\n  TOKEN_REFRESH_FAILED = \"TOKEN_REFRESH_FAILED\",\n  GENERATE_TOKEN_FOR_SERVER_FAILED = \"GENERATE_TOKEN_FOR_SERVER_FAILED\",\n  REFRESH_TOKEN_EXCHANGE_FAILED = \"REFRESH_TOKEN_EXCHANGE_FAILED\",\n  NOT_FEDERATED = \"NOT_FEDERATED\",\n  UNKNOWN_ERROR_CODE = \"UNKNOWN_ERROR_CODE\"\n}\n\n/**\n * This error is thrown when {@linkcode ArcGISIdentityManager} or {@linkcode ApplicationCredentialsManager} fails to refresh a token or generate a new token\n * for a request. Generally in this scenario the credentials are invalid for the request and the you should recreate the {@linkcode ApplicationCredentialsManager}\n * or prompt the user to authenticate again with {@linkcode ArcGISIdentityManager}. See {@linkcode ArcGISTokenRequestErrorCodes} for a more detailed description of\n * the possible error codes.\n *\n * ```js\n * request(someUrl, {\n *   authentication: someAuthenticationManager\n * }).catch(e => {\n *   if(e.name === \"ArcGISTokenRequestError\") {\n *     // ArcGIS REST JS could not generate an appropriate token for this request\n *     // All credentials are likely invalid and the authentication process should be restarted\n *   }\n * })\n * ```\n */\nexport class ArcGISTokenRequestError extends Error {\n  /**\n   * The name of this error. Will always be `\"ArcGISTokenRequestError\"` to conform with the [`Error`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error) class.\n   */\n  public name: string;\n\n  /**\n   * Formatted error message. See the [`Error`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error) class for more details.\n   */\n  public message: string;\n\n  /**\n   * The error message return from the request.\n   */\n  public originalMessage: string;\n\n  /**\n   * The error code for the request.\n   */\n  public code: ArcGISTokenRequestErrorCodes;\n\n  /**\n   * The original JSON response the caused the error.\n   */\n  public response: any;\n\n  /**\n   * The URL of the original request that caused the error\n   */\n  public url: string;\n\n  /**\n   * The options of the original request that caused the error\n   */\n  public options: IRequestOptions;\n\n  /**\n   * Create a new `ArcGISTokenRequestError`  object.\n   *\n   * @param message - The error message from the API\n   * @param code - The error code from the API\n   * @param response - The original response from the API that caused the error\n   * @param url - The original url of the request\n   * @param options - The original options and parameters of the request\n   */\n  constructor(\n    message = \"UNKNOWN_ERROR\",\n    code = ArcGISTokenRequestErrorCodes.UNKNOWN_ERROR_CODE,\n    response?: any,\n    url?: string,\n    options?: IRequestOptions\n  ) {\n    // 'Error' breaks prototype chain here\n    super(message);\n\n    // restore prototype chain, see https://stackoverflow.com/questions/41102060/typescript-extending-error-class\n    // we don't need to check for Object.setPrototypeOf as in the answers because we are ES2017 now.\n    // Also see https://github.com/Microsoft/TypeScript-wiki/blob/main/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n    // and https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#custom_error_types\n    const actualProto = new.target.prototype;\n    Object.setPrototypeOf(this, actualProto);\n\n    this.name = \"ArcGISTokenRequestError\";\n    this.message = `${code}: ${message}`;\n    this.originalMessage = message;\n    this.code = code;\n    this.response = response;\n    this.url = url;\n    this.options = options;\n  }\n}\n", "/* Copyright (c) 2022 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\n/**\n * This error code will be thrown by the following methods when the user cancels or denies an authorization request on the OAuth 2.0\n * authorization screen.\n *\n * * {@linkcode ArcGISIdentityManager.beginOAuth2} when the `popup` option is `true`\n * * {@linkcode ArcGISIdentityManager.completeOAuth2}  when the `popup` option is `false`\n *\n * ```js\n * import { ArcGISIdentityManager } from \"@esri/arcgis-rest-request\";\n *\n * ArcGISIdentityManager.beginOAuth2({\n *   clientId: \"***\"\n *   redirectUri: \"***\",\n *   popup: true\n * }).then(authenticationManager => {\n *   console.log(\"OAuth 2.0 Successful\");\n * }).catch(e => {\n *   if(e.name === \"ArcGISAccessDeniedError\") {\n *     console.log(\"The user did not authorize your app.\")\n *   } else {\n *     console.log(\"Something else went wrong. Error:\", e);\n *   }\n * })\n * ```\n */\nexport class ArcGISAccessDeniedError extends Error {\n  /**\n   * The name of this error. Will always be `\"ArcGISAccessDeniedError\"` to conform with the [`Error`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error) class.\n   */\n  public name: string;\n\n  /**\n   * Formatted error message. See the [`Error`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error) class for more details.\n   */\n  public message: string;\n\n  /**\n   * Create a new `ArcGISAccessDeniedError`  object.\n   */\n  constructor() {\n    const message = \"The user has denied your authorization request.\";\n\n    super(message);\n\n    // restore prototype chain, see https://stackoverflow.com/questions/41102060/typescript-extending-error-class\n    // we don't need to check for Object.setPrototypeOf as in the answers because we are ES2017 now.\n    // Also see https://github.com/Microsoft/TypeScript-wiki/blob/main/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n    // and https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#custom_error_types\n    const actualProto = new.target.prototype;\n    Object.setPrototypeOf(this, actualProto);\n\n    this.name = \"ArcGISAccessDeniedError\";\n  }\n}\n", "/* Copyright (c) 2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\n/**\n * Helper method to ensure that user supplied urls don't include whitespace or a trailing slash.\n */\nexport function cleanUrl(url: string) {\n  // Guard so we don't try to trim something that's not a string\n  if (typeof url !== \"string\") {\n    return url;\n  }\n  // trim leading and trailing spaces, but not spaces inside the url\n  url = url.trim();\n\n  // remove the trailing slash to the url if one was included\n  if (url[url.length - 1] === \"/\") {\n    url = url.slice(0, -1);\n  }\n  return url;\n}\n", "/* Copyright (c) 2017-2020 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nexport function decodeParam(param: string): { key: string; value: string } {\n  const [key, value] = param.split(\"=\");\n  return { key: decodeURIComponent(key), value: decodeURIComponent(value) };\n}\n\n/**\n * Decodes the passed query string as an object.\n *\n * @param query A string to be decoded.\n * @returns A decoded query param object.\n */\nexport function decodeQueryString(query?: string): { [key: string]: string } {\n  if (!query || query.length <= 0) {\n    return {};\n  }\n\n  return query\n    .replace(/^#/, \"\")\n    .replace(/^\\?/, \"\")\n    .split(\"&\")\n    .reduce((acc, entry) => {\n      const { key, value } = decodeParam(entry);\n      acc[key] = value;\n      return acc;\n    }, {} as any);\n}\n", "/* Copyright (c) 2017 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\n/**\n * Enum describing the different errors that might be thrown by a request.\n *\n * ```ts\n * import { request, ErrorTypes } from '@esri/arcgis-rest-request';\n *\n * request(\"...\").catch((e) => {\n *   switch(e.name) {\n *     case ErrorType.ArcGISRequestError:\n *     // handle a general error from the API\n *     break;\n *\n *     case ErrorType.ArcGISAuthError:\n *     // handle an authentication error\n *     break;\n *\n *     case ErrorType.ArcGISAccessDeniedError:\n *     // handle a user denying an authorization request in an oAuth workflow\n *     break;\n *\n *     default:\n *     // handle some other error (usually a network error)\n *   }\n * });\n * ```\n */\nexport enum ErrorTypes {\n  ArcGISRequestError = \"ArcGISRequestError\",\n  ArcGISAuthError = \"ArcGISAuthError\",\n  ArcGISAccessDeniedError = \"ArcGISAccessDeniedError\",\n  ArcGISTokenRequestError = \"ArcGISTokenRequestError\"\n}\n", "/* Copyright (c) 2017 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { request } from \"./request.js\";\nimport { IRequestOptions } from \"./utils/IRequestOptions.js\";\nimport { ITokenRequestOptions } from \"./utils/ITokenRequestOptions.js\";\n\nconst FIVE_MINUTES_IN_MILLISECONDS = 5 * 60 * 1000;\n\ninterface IoAuthTokenResponse {\n  access_token: string;\n  expires_in: number;\n  username: string;\n  ssl?: boolean;\n  refresh_token?: string;\n  refresh_token_expires_in?: number;\n}\n\ninterface IGenerateTokenRawResponse {\n  token: string;\n  expires: number;\n}\n\nexport interface IFetchTokenResponse {\n  token: string;\n  expires: Date;\n  username: string;\n  ssl?: boolean;\n  refreshToken?: string;\n  refreshTokenExpires?: Date;\n}\n\nexport function fetchToken(\n  url: string,\n  requestOptions: ITokenRequestOptions\n): Promise<IFetchTokenResponse> {\n  const options: IRequestOptions = requestOptions;\n\n  // we generate a response, so we can't return the raw response\n  options.rawResponse = false;\n\n  return request(url, options).then(\n    (response: IGenerateTokenRawResponse | IoAuthTokenResponse) => {\n      // Typescript uses the \"in\" keyword to determine we have a generateToken response or an oauth token response\n      if (\"token\" in response && \"expires\" in response) {\n        return {\n          token: response.token,\n          username: requestOptions.params.username,\n          expires: new Date(response.expires)\n        };\n      }\n\n      const portalTokenResponse: IFetchTokenResponse = {\n        token: response.access_token,\n        username: response.username,\n        expires: new Date(\n          // convert seconds in response to milliseconds and add the value to the current time to calculate a static expiration timestamp\n          // we subtract 5 minutes here to make sure that we refresh the token early if the user makes requests\n          Date.now() + response.expires_in * 1000 - FIVE_MINUTES_IN_MILLISECONDS\n        ),\n        ssl: response.ssl === true\n      };\n\n      if (response.refresh_token) {\n        portalTokenResponse.refreshToken = response.refresh_token;\n      }\n\n      if (response.refresh_token_expires_in) {\n        portalTokenResponse.refreshTokenExpires = new Date(\n          // convert seconds in response to milliseconds and add the value to the current time to calculate a static expiration timestamp\n          // we subtract 5 minutes here to make sure that we refresh the token early if the user makes requests\n          Date.now() +\n            response.refresh_token_expires_in * 1000 -\n            FIVE_MINUTES_IN_MILLISECONDS\n        );\n      }\n\n      return portalTokenResponse;\n    }\n  );\n}\n", "import { IUser } from \"./types/user.js\";\nimport { IRequestOptions } from \"./utils/IRequestOptions.js\";\nimport { request } from \"./request.js\";\nimport { cleanUrl } from \"./utils/clean-url.js\";\n\nclass AuthenticationManagerBase {\n  /**\n   * The current portal the user is authenticated with.\n   */\n  public readonly portal: string;\n\n  /**\n   * The username of the currently authenticated user.\n   */\n  get username() {\n    if (this._username) {\n      return this._username;\n    }\n\n    if (this._user && this._user.username) {\n      return this._user.username;\n    }\n  }\n\n  constructor(options: any) {\n    this.portal = options.portal\n      ? cleanUrl(options.portal)\n      : \"https://www.arcgis.com/sharing/rest\";\n    this._username = options.username;\n  }\n\n  /**\n   * Internal varible to track the pending user request so we do not make multiple requests.\n   */\n  private _pendingUserRequest: Promise<IUser>;\n\n  /**\n   * Hydrated by a call to [getUser()](#getUser-summary).\n   */\n  private _user: IUser;\n\n  /**\n   * Internal variable to store the username.\n   */\n  private _username: string;\n\n  /**\n   * Returns the username for the currently logged in [user](https://developers.arcgis.com/rest/users-groups-and-items/user.htm). Subsequent calls will *not* result in additional web traffic. This is also used internally when a username is required for some requests but is not present in the options.\n   *\n   * ```js\n   * manager.getUsername()\n   *   .then(response => {\n   *     console.log(response); // \"casey_jones\"\n   *   })\n   * ```\n   */\n  public getUsername() {\n    if (this.username) {\n      return Promise.resolve(this.username);\n    } else {\n      return this.getUser().then((user) => {\n        return user.username;\n      });\n    }\n  }\n\n  /**\n   * Returns information about the currently logged in [user](https://developers.arcgis.com/rest/users-groups-and-items/user.htm). Subsequent calls will *not* result in additional web traffic.\n   *\n   * ```js\n   * manager.getUser()\n   *   .then(response => {\n   *     console.log(response.role); // \"org_admin\"\n   *   })\n   * ```\n   *\n   * @param requestOptions - Options for the request. NOTE: `rawResponse` is not supported by this operation.\n   * @returns A Promise that will resolve with the data from the response.\n   */\n  public getUser(requestOptions?: IRequestOptions): Promise<IUser> {\n    if (this._pendingUserRequest) {\n      return this._pendingUserRequest;\n    } else if (this._user) {\n      return Promise.resolve(this._user);\n    } else {\n      const url = `${this.portal}/community/self`;\n\n      const options = {\n        httpMethod: \"GET\",\n        authentication: this,\n        ...requestOptions,\n        rawResponse: false\n      } as IRequestOptions;\n\n      this._pendingUserRequest = request(url, options).then((response) => {\n        this._user = response;\n        this._pendingUserRequest = null;\n        return response;\n      });\n\n      return this._pendingUserRequest;\n    }\n  }\n\n  /**\n   * Clear the cached user infornation. Usefull to ensure that the most recent user information from {@linkcode AuthenticationManagerBase.getUser} is used.\n   */\n  public clearCachedUserInfo() {\n    this._user = null;\n  }\n}\n\nexport { AuthenticationManagerBase };\n", "/* Copyright (c) 2017-2019 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { IAuthenticationManager } from \"./utils/IAuthenticationManager.js\";\nimport { AuthenticationManagerBase } from \"./AuthenticationManagerBase.js\";\n\n/**\n * Options for the `ApiKey` constructor.\n */\nexport interface IApiKeyOptions {\n  key: string;\n  username?: string;\n  portal?: string;\n}\n\n/**\n * Used to authenticate methods in ArcGIS REST JS with an API keys. The instance of `ApiKeyManager` can be passed to  {@linkcode IRequestOptions.authentication} to authenticate requests.\n * \n * ```js\n * import { ApiKeyManager } from '@esri/arcgis-rest-request';\n \n * const apiKey = new ApiKeyManager.fromKey(\"...\");\n * ```\n * \n * In most cases however the API key can be passed directly to the {@linkcode IRequestOptions.authentication}.\n */\nexport class ApiKeyManager\n  extends AuthenticationManagerBase\n  implements IAuthenticationManager\n{\n  /**\n   * The current portal the user is authenticated with.\n   */\n  public readonly portal: string = \"https://www.arcgis.com/sharing/rest\";\n\n  /**\n   * The original API Key used to create this instance.\n   */\n  private readonly key: string;\n\n  /**\n   * The preferred method for creating an instance of `ApiKeyManager`.\n   */\n  public static fromKey(apiKey: string | IApiKeyOptions) {\n    if (typeof apiKey === \"string\") {\n      return new ApiKeyManager({ key: apiKey });\n    } else {\n      return new ApiKeyManager(apiKey);\n    }\n  }\n\n  constructor(options: IApiKeyOptions) {\n    super(options);\n    this.key = options.key;\n  }\n\n  /**\n   * Gets the current access token (the API Key).\n   */\n  get token() {\n    return this.key;\n  }\n\n  /**\n   * Gets the current access token (the API Key).\n   */\n  public getToken(url: string) {\n    return Promise.resolve(this.key);\n  }\n\n  /**\n   * Converts the `ApiKeyManager` instance to a JSON object. This is called when the instance is serialized to JSON with [`JSON.stringify()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify).\n   *\n   * ```js\n   * import { ApiKeyManager } from '@esri/arcgis-rest-request';\n   *\n   * const apiKey = new ApiKeyManager.fromKey(\"...\")\n   *\n   * const json = JSON.stringify(session);\n   * ```\n   *\n   * @returns A plain object representation of the instance.\n   */\n  toJSON() {\n    return {\n      type: \"ApiKeyManager\",\n      token: this.key,\n      username: this.username,\n      portal: this.portal\n    };\n  }\n\n  /**\n   * Serializes the ApiKeyManager instance to a JSON string.\n   *\n   * ```js\n   * import { ApiKeyManager } from '@esri/arcgis-rest-request';\n   *\n   * const apiKey = new ApiKeyManager.fromKey(\"...\")\n   *\n   * localStorage.setItem(\"apiKey\", apiKey.serialize());\n   * ```\n   * @returns {string} The serialized JSON string.\n   */\n  serialize() {\n    return JSON.stringify(this);\n  }\n\n  /**\n   * Deserializes a JSON string previously created with {@linkcode ApiKeyManager.deserialize} to an {@linkcode ApiKeyManager} instance.\n   *\n   * ```js\n   * import { ApiKeyManager } from '@esri/arcgis-rest-request';\n   *\n   * const apiKey = ApiKeyManager.deserialize(localStorage.getItem(\"apiKey\"));\n   * ```\n   * @param {string} serialized - The serialized JSON string.\n   * @returns {ApiKeyManager} The deserialized ApiKeyManager instance.\n   */\n  static deserialize(serialized: string) {\n    const data = JSON.parse(serialized);\n\n    return new ApiKeyManager({\n      key: data.token,\n      username: data.username,\n      portal: data.portal\n    });\n  }\n}\n\n/**\n * @deprecated - Use {@linkcode ApiKeyManager}.\n * @internal\n */ /* istanbul ignore next */\nexport function ApiKey(options: IApiKeyOptions) {\n  console.log(\n    \"DEPRECATED:, 'ApiKey' is deprecated. Use 'ApiKeyManager' instead.\"\n  );\n\n  return new ApiKeyManager(options);\n}\n", "import { cleanUrl } from \"./utils/clean-url.js\";\n\n/**\n * Used to test if a URL is an ArcGIS Online URL\n */\nconst arcgisOnlineUrlRegex = /^https?:\\/\\/(\\S+)\\.arcgis\\.com.+/;\n\n/**\n * Used to test if a URL is production ArcGIS Online Portal\n */\nconst arcgisOnlinePortalRegex =\n  /^https?:\\/\\/(dev|devext|qa|qaext|www)\\.arcgis\\.com\\/sharing\\/rest+/;\n\n/**\n * Used to test if a URL is an ArcGIS Online Organization Portal\n */\nconst arcgisOnlineOrgPortalRegex =\n  /^https?:\\/\\/(?:[a-z0-9-]+\\.maps(dev|devext|qa|qaext)?)?.arcgis\\.com\\/sharing\\/rest/;\n\nexport function isOnline(url: string): boolean {\n  return arcgisOnlineUrlRegex.test(url);\n}\n\nexport function normalizeOnlinePortalUrl(portalUrl: string): string {\n  if (!arcgisOnlineUrlRegex.test(portalUrl)) {\n    return portalUrl;\n  }\n\n  switch (getOnlineEnvironment(portalUrl)) {\n    case \"dev\":\n      return \"https://devext.arcgis.com/sharing/rest\";\n    case \"qa\":\n      return \"https://qaext.arcgis.com/sharing/rest\";\n    default:\n      return \"https://www.arcgis.com/sharing/rest\";\n  }\n}\n\nexport function getOnlineEnvironment(url: string): string {\n  if (!arcgisOnlineUrlRegex.test(url)) {\n    return null;\n  }\n\n  const match = url.match(arcgisOnlineUrlRegex);\n  const subdomain = match[1].split(\".\").pop();\n\n  if (subdomain.includes(\"dev\")) {\n    return \"dev\";\n  }\n\n  if (subdomain.includes(\"qa\")) {\n    return \"qa\";\n  }\n\n  return \"production\";\n}\n\nexport function isFederated(\n  owningSystemUrl: string,\n  portalUrl: string\n): boolean {\n  const normalizedPortalUrl = cleanUrl(\n    normalizeOnlinePortalUrl(portalUrl)\n  ).replace(/https?:\\/\\//, \"\");\n\n  const normalizedOwningSystemUrl = cleanUrl(owningSystemUrl).replace(\n    /https?:\\/\\//,\n    \"\"\n  );\n\n  return new RegExp(normalizedOwningSystemUrl, \"i\").test(normalizedPortalUrl);\n}\n\nexport function canUseOnlineToken(\n  portalUrl: string,\n  requestUrl: string\n): boolean {\n  const portalIsOnline = isOnline(portalUrl);\n  const requestIsOnline = isOnline(requestUrl);\n  const portalEnv = getOnlineEnvironment(portalUrl);\n  const requestEnv = getOnlineEnvironment(requestUrl);\n\n  if (portalIsOnline && requestIsOnline && portalEnv === requestEnv) {\n    return true;\n  }\n\n  return false;\n}\n", "/* Copyright (c) 2018-2020 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { request } from \"./request.js\";\nimport { IRequestOptions } from \"./utils/IRequestOptions.js\";\n\nexport interface IAppAccess {\n  /**\n   * Verifies that the token is valid and the user has access to\n   * the specified app (clientId)\n   */\n  valid: boolean;\n  /**\n   * Should the app present the current user with a \"View Only\" mode\n   */\n  viewOnlyUserTypeApp: boolean;\n}\n\n/**\n * Validates that the user has access to the application\n * and if they user should be presented a \"View Only\" mode\n *\n * This is only needed/valid for Esri applications that are \"licensed\"\n * and shipped in ArcGIS Online or ArcGIS Enterprise. Most custom applications\n * should not need or use this.\n *\n * ```js\n * import { validateAppAccess } from '@esri/arcgis-rest-request';\n *\n * return validateAppAccess('your-token', 'theClientId')\n * .then((result) => {\n *    if (!result.value) {\n *      // redirect or show some other ui\n *    } else {\n *      if (result.viewOnlyUserTypeApp) {\n *        // use this to inform your app to show a \"View Only\" mode\n *      }\n *    }\n * })\n * .catch((err) => {\n *  // two possible errors\n *  // invalid clientId: {\"error\":{\"code\":400,\"messageCode\":\"GWM_0007\",\"message\":\"Invalid request\",\"details\":[]}}\n *  // invalid token: {\"error\":{\"code\":498,\"message\":\"Invalid token.\",\"details\":[]}}\n * })\n * ```\n *\n * Note: This is only usable by Esri applications hosted on *arcgis.com, *esri.com or within\n * an ArcGIS Enterprise installation. Custom applications can not use this.\n *\n * @param token platform token\n * @param clientId application client id\n * @param portal Optional\n */\nexport function validateAppAccess(\n  token: string,\n  clientId: string,\n  portal = \"https://www.arcgis.com/sharing/rest\"\n): Promise<IAppAccess> {\n  const url = `${portal}/oauth2/validateAppAccess`;\n  const ro = {\n    method: \"POST\",\n    params: {\n      f: \"json\",\n      client_id: clientId,\n      token\n    }\n  } as IRequestOptions;\n  return request(url, ro);\n}\n", "import {\n  IRequestOptions,\n  request,\n  cleanUrl,\n  ArcGISRequestError,\n  appendCustomParams\n} from \"./index.js\";\n\nexport interface IRevokeTokenOptions extends IRequestOptions {\n  /**\n   * The token or refresh token to revoke. If a refresh token is passed all access tokens generated with that refresh token are also revoked.\n   */\n  token: string;\n\n  /**\n   * The portal of the tokens to revoke. Defaults to `https://www.arcgis.com/sharing/rest`.\n   */\n  portal?: string;\n\n  /**\n   * The client id fo the application that generated the tokens. Applications can only revoke tokens they created.\n   */\n  clientId: string;\n}\n\nexport interface IRevokeTokenResponse {\n  /**\n   * Indicates if the token was revoked. A success response will also returned for invalid tokens, expired tokens or of an unsupported type of token to prevent leaking information about the provided token.\n   */\n  success: boolean;\n}\n\n/**\n * Revokes a token generated via any oAuth 2.0 method. `token` can be either a refresh token OR an access token. If you are using  {@linkcode ArcGISIdentityManager} you should use  {@linkcode ArcGISIdentityManager.destroy} instead. Cannot revoke API keys or tokens generated by {@linkcode ApplicationCredentialsManager}.\n *\n * See [`revokeToken`](https://developers.arcgis.com/rest/users-groups-and-items/revoke-token.htm) on the ArcGIS REST API for more details.\n */\nexport function revokeToken(\n  requestOptions: IRevokeTokenOptions\n): Promise<IRevokeTokenResponse> {\n  const url = `${cleanUrl(\n    requestOptions.portal || \"https://www.arcgis.com/sharing/rest\"\n  )}/oauth2/revokeToken/`;\n\n  const token = requestOptions.token;\n  const clientId = requestOptions.clientId;\n\n  delete requestOptions.portal;\n  delete requestOptions.clientId;\n  delete requestOptions.token;\n\n  const options: IRequestOptions = {\n    ...requestOptions,\n    httpMethod: \"POST\",\n    params: {\n      client_id: clientId,\n      auth_token: token\n    }\n  };\n\n  return request(url, options).then((response) => {\n    if (!response.success) {\n      throw new ArcGISRequestError(\n        \"Unable to revoke token\",\n        500,\n        response,\n        url,\n        options\n      );\n    }\n    return response;\n  });\n}\n", "/**\n * Encodes a `Uint8Array` to base 64. Used internally for hashing the `code_verifier` and `code_challenge` for PKCE.\n */\nexport function base64UrlEncode(value: any, win = window) {\n  /* istanbul ignore next: must pass in a mockwindow for tests so we can't cover the other branch */\n  if (!win && window) {\n    win = window;\n  }\n  return win\n    .btoa(String.fromCharCode.apply(null, value))\n    .replace(/\\+/g, \"-\") // replace + with -\n    .replace(/\\//g, \"_\") // replace / with _\n    .replace(/=+$/, \"\"); // trim trailing =\n}\n", "import { base64UrlEncode } from \"./base-64-url.js\";\n\n/**\n * Utility to hash the codeVerifier using sha256\n */\nexport function generateCodeChallenge(codeVerifier: string, win = window) {\n  /* istanbul ignore next: must pass in a mockwindow for tests so we can't cover the other branch */\n  if (!win && window) {\n    win = window;\n  }\n\n  if (codeVerifier && win.isSecureContext && win.crypto && win.crypto.subtle) {\n    const encoder = new win.TextEncoder();\n    const bytes = encoder.encode(codeVerifier);\n\n    return win.crypto.subtle\n      .digest(\"SHA-256\", bytes)\n      .then((buffer) => base64UrlEncode(new Uint8Array(buffer), win));\n  }\n\n  return Promise.resolve(null);\n}\n", "import { base64UrlEncode } from \"./base-64-url.js\";\n\n/**\n * Utility to generate a random string to use as our `code_verifier`\n *\n * @param win the global `window` object for accepting a mock while testing.\n */\nexport function generateRandomString(win?: any) {\n  /* istanbul ignore next: must pass in a mockwindow for tests so we can't cover the other branch */\n  if (!win && window) {\n    win = window;\n  }\n\n  const randomBytes = win.crypto.getRandomValues(new Uint8Array(32));\n  return base64UrlEncode(randomBytes);\n}\n", "/* Copyright (c) 2017-2019 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport * as http from \"http\";\nimport { ArcGISAuthError, request } from \"./request.js\";\nimport { IRequestOptions } from \"./utils/IRequestOptions.js\";\nimport { IAuthenticationManager } from \"./utils/IAuthenticationManager.js\";\nimport { ITokenRequestOptions } from \"./utils/ITokenRequestOptions.js\";\nimport { decodeQueryString } from \"./utils/decode-query-string.js\";\nimport { encodeQueryString } from \"./utils/encode-query-string.js\";\nimport { IUser } from \"./types/user.js\";\nimport { fetchToken, IFetchTokenResponse } from \"./fetch-token.js\";\nimport { canUseOnlineToken, isFederated } from \"./federation-utils.js\";\nimport { IAppAccess, validateAppAccess } from \"./validate-app-access.js\";\nimport { cleanUrl } from \"./utils/clean-url.js\";\nimport { revokeToken } from \"./revoke-token.js\";\nimport { generateCodeChallenge } from \"./utils/generate-code-challenge.js\";\nimport { generateRandomString } from \"./utils/generate-random-string.js\";\nimport { ArcGISAccessDeniedError } from \"./utils/ArcGISAccessDeniedError.js\";\nimport {\n  ArcGISTokenRequestError,\n  ArcGISTokenRequestErrorCodes\n} from \"./utils/ArcGISTokenRequestError.js\";\nimport { NODEJS_DEFAULT_REFERER_HEADER } from \"./index.js\";\nimport { AuthenticationManagerBase } from \"./AuthenticationManagerBase.js\";\n\n/**\n * distinguish between an ICredential and IArcGISIdentityManagerOptions\n */\nfunction isCredential(credential: any): credential is ICredential {\n  return (\n    typeof credential.userId === \"string\" ||\n    typeof credential.expires === \"number\"\n  );\n}\n\n/**\n * Options for {@linkcode ArcGISIdentityManager.fromToken}.\n */\nexport interface IFromTokenOptions {\n  /**\n   * The token you want to create the {@linkcode ArcGISIdentityManager} instance with.\n   */\n  token: string;\n  /**\n   * Date when this token will expire.\n   */\n  tokenExpires?: Date;\n  /**\n   * The portal that the token was generated from. Defaults to `https://www.arcgis.com/sharing/rest`. Required if you are not using the default portal.\n   */\n  portal?: string;\n  /**\n   * If the token is for a specific instance of ArcGIS Server, set `portal` to `null` or `undefined` and set `server` the URL of the ArcGIS Server.\n   */\n  server?: string;\n  /**\n   * Optionally set the username. Recommended if available.\n   */\n  username?: string;\n  /**\n   * Optional client ID. Used for refreshing expired tokens.\n   */\n  clientId?: string;\n  /**\n   * Optional set a valid redirect URL for the registered client ID. Used internally to refresh expired tokens.\n   */\n  redirectUri?: string;\n}\n\n/**\n * Options for {@linkcode ArcGISIdentityManager.signIn}.\n */\nexport interface ISignInOptions {\n  username: string;\n  password: string;\n  portal?: string;\n  referer?: string;\n}\n\nexport type AuthenticationProvider =\n  | \"arcgis\"\n  | \"facebook\"\n  | \"google\"\n  | \"github\"\n  | \"apple\";\n\n/**\n * Represents a [credential](https://developers.arcgis.com/javascript/latest/api-reference/esri-identity-Credential.html)\n * object used to access a secure ArcGIS resource.\n */\nexport interface ICredential {\n  expires: number;\n  server: string;\n  ssl: boolean;\n  token: string;\n  userId: string;\n}\n\n/**\n * Represents the [`ServerInfo`](https://developers.arcgis.com/javascript/latest/api-reference/esri-identity-ServerInfo.html) class\n * in the ArcGIS API for JavaScript.\n */\nexport interface IServerInfo {\n  server: string;\n  hasPortal: boolean;\n  hasServer: boolean;\n}\n\n/**\n * Options for static OAuth 2.0 helper methods on `ArcGISIdentityManager`.\n */\nexport interface IOAuth2Options {\n  /**\n   * Client ID of your application. Can be obtained by registering an application\n   * on [ArcGIS for Developers](https://developers.arcgis.com/documentation/core-concepts/security-and-authentication/signing-in-arcgis-online-users/#registering-your-application),\n   * [ArcGIS Online](http://doc.arcgis.com/en/arcgis-online/share-maps/add-items.htm#ESRI_SECTION1_0D1B620254F745AE84F394289F8AF44B) or on your instance of ArcGIS Enterprise.\n   */\n  clientId: string;\n\n  /**\n   * A valid URL to redirect to after a user authorizes your application. Can be set on [ArcGIS for Developers](https://developers.arcgis.com/documentation/core-concepts/security-and-authentication/signing-in-arcgis-online-users/#registering-your-application),\n   * [ArcGIS Online](http://doc.arcgis.com/en/arcgis-online/share-maps/add-items.htm#ESRI_SECTION1_0D1B620254F745AE84F394289F8AF44B) or on your instance of ArcGIS Enterprise.\n   */\n  redirectUri: string;\n\n  /**\n   * The ArcGIS Online or ArcGIS Enterprise portal you want to use for authentication. Defaults to `https://www.arcgis.com/sharing/rest` for the ArcGIS Online portal.\n   */\n  portal?: string;\n\n  /**\n   * ArcGIS Authentication is used by default. Specifying an alternative will take users directly to the corresponding provider's OAuth page.\n   */\n\n  provider?: AuthenticationProvider;\n\n  /**\n   * The requested validity in minutes for a refresh token/access token. Defaults to 20160 (2 weeks).\n   *\n   * When using PKCE or server-based OAuth this will control the duration of the refresh token. In this scenario, access tokens will always have a 30 minute validity.\n   *\n   * When using implicit auth (`pkce: false`) in {@linkcode ArcGISIdentityManager.beginOAuth2}, this controls the duration of the access token and no refresh token will be granted.\n   */\n  expiration?: number;\n\n  /**\n   * If `true` will use the PKCE oAuth 2.0 extension spec in to authorize the user and obtain a token. A value of `false` will use the deprecated oAuth 2.0 implicit grant type.\n   *\n   * @browserOnly\n   */\n  pkce?: boolean;\n\n  /**\n   * Determines whether to open the authorization window in a new tab/window or in the current window.\n   *\n   * @browserOnly\n   */\n  popup?: boolean;\n\n  /**\n   * The window features passed to [window.open()](https://developer.mozilla.org/en-US/docs/Web/API/Window/open) when `popup` is true. Defaults to `height=400,width=600,menubar=no,location=yes,resizable=yes,scrollbars=yes,status=yes`\n   *\n   * @browserOnly\n   */\n  popupWindowFeatures?: string;\n\n  /**\n   * The locale assumed to render the login page.\n   *\n   * @browserOnly\n   */\n  locale?: string;\n\n  /**\n   * Sets the color theme of the oAuth 2.0 authorization screen. Will use the system preference or a light theme by default.\n   */\n  style?: \"\" | \"light\" | \"dark\";\n\n  /**\n   * Custom value for oAuth 2.0 state. A random identifier will be generated if this is not passed.\n   */\n  state?: string;\n\n  [key: string]: any;\n}\n\n/**\n * Options for the {@linkcode ArcGISIdentityManager} constructor.\n */\nexport interface IArcGISIdentityManagerOptions {\n  /**\n   * Client ID of your application. Can be obtained by registering an application\n   * on [ArcGIS for Developers](https://developers.arcgis.com/documentation/core-concepts/security-and-authentication/signing-in-arcgis-online-users/#registering-your-application),\n   * [ArcGIS Online](http://doc.arcgis.com/en/arcgis-online/share-maps/add-items.htm#ESRI_SECTION1_0D1B620254F745AE84F394289F8AF44B) or on your instance of ArcGIS Enterprise.\n   */\n  clientId?: string;\n\n  /**\n   * A valid URL to redirect to after a user authorizes your application. Can be set on [ArcGIS for Developers](https://developers.arcgis.com/documentation/core-concepts/security-and-authentication/signing-in-arcgis-online-users/#registering-your-application),\n   * [ArcGIS Online](http://doc.arcgis.com/en/arcgis-online/share-maps/add-items.htm#ESRI_SECTION1_0D1B620254F745AE84F394289F8AF44B) or on your instance of ArcGIS Enterprise.\n   */\n  redirectUri?: string;\n\n  /**\n   * OAuth 2.0 refresh token.\n   */\n  refreshToken?: string;\n\n  /**\n   * Expiration date of the `refreshToken`\n   */\n  refreshTokenExpires?: Date;\n\n  /**\n   * The authenticated user's username. Guaranteed to be unique across ArcGIS Online or your instance of ArcGIS Enterprise.\n   */\n  username?: string;\n\n  /**\n   * Password for this user. Used in CLI apps where users cannot do OAuth 2.0.\n   */\n  password?: string;\n\n  /**\n   * OAuth 2.0 access token.\n   */\n  token?: string;\n\n  /**\n   * Expiration date for the `token`\n   */\n  tokenExpires?: Date;\n\n  /**\n   * The ArcGIS Online or ArcGIS Enterprise portal you want to use for authentication. Defaults to `https://www.arcgis.com/sharing/rest` for the ArcGIS Online portal.\n   */\n  portal?: string;\n\n  /**\n   * This value is set to true automatically if the ArcGIS Organization requires that requests be made over https.\n   */\n  ssl?: boolean;\n\n  /**\n   * ArcGIS Authentication is used by default. Specifying an alternative will take users directly to the corresponding provider's OAuth page.\n   */\n  provider?: AuthenticationProvider;\n\n  /**\n   * Duration of requested token validity in minutes. Used when requesting tokens with `username` and `password` or when validating the identity of unknown servers. Defaults to two weeks.\n   */\n  tokenDuration?: number;\n\n  /**\n   * An unfederated ArcGIS Server instance known to recognize credentials supplied manually.\n   *\n   * ```js\n   * {\n   *   server: \"https://sampleserver6.arcgisonline.com/arcgis\",\n   *   token: \"SOSlV3v..\",\n   *   tokenExpires: new Date(1545415669763)\n   * }\n   * ```\n   */\n  server?: string;\n\n  /**\n   * The referer to use when getting the token with `.signIn()`\n   */\n  referer?: string;\n}\n\n/**\n * Used to authenticate both ArcGIS Online and ArcGIS Enterprise users. `ArcGISIdentityManager` includes helper methods for [OAuth 2.0](https://developers.arcgis.com/documentation/mapping-apis-and-services/security/oauth-2.0/) in both browser and server applications.\n *\n * **It is not recommended to construct `ArcGISIdentityManager` directly**. Instead there are several static methods used for specific workflows. The 2 primary workflows relate to oAuth 2.0:\n *\n * * {@linkcode ArcGISIdentityManager.beginOAuth2} and {@linkcode ArcGISIdentityManager.completeOAuth2} for oAuth 2.0 in browser-only environment.\n * * {@linkcode ArcGISIdentityManager.authorize} and {@linkcode ArcGISIdentityManager.exchangeAuthorizationCode} for oAuth 2.0 for server-enabled application.\n *\n * Other more specialized helpers for less common workflows also exist:\n *\n * * {@linkcode ArcGISIdentityManager.fromToken} for when you have an existing token from another source and would like create an `ArcGISIdentityManager` instance.\n * * {@linkcode ArcGISIdentityManager.fromCredential} for creating  an `ArcGISIdentityManager` instance from a `Credentials` object in the ArcGIS JS API `IdentityManager`\n * * {@linkcode ArcGISIdentityManager.signIn} for authenticating directly with a user's username and password for environments with a user interface for oAuth 2.0.\n *\n * Once a manager is created there are additional utilities:\n *\n * * {@linkcode ArcGISIdentityManager.serialize} can be used to create a JSON object representing an instance of `ArcGISIdentityManager`\n * * {@linkcode ArcGISIdentityManager.deserialize} will create a new `ArcGISIdentityManager` from a JSON object created with {@linkcode ArcGISIdentityManager.serialize}\n * * {@linkcode ArcGISIdentityManager.destroy} or {@linkcode ArcGISIdentityManager.signOut} will invalidate any tokens in use by the  `ArcGISIdentityManager`.\n */\nexport class ArcGISIdentityManager\n  extends AuthenticationManagerBase\n  implements IAuthenticationManager\n{\n  /**\n   * The current ArcGIS Online or ArcGIS Enterprise `token`.\n   */\n  get token() {\n    return this._token;\n  }\n\n  /**\n   * The expiration time of the current `token`.\n   */\n  get tokenExpires() {\n    return this._tokenExpires;\n  }\n\n  /**\n   * The current token to ArcGIS Online or ArcGIS Enterprise.\n   */\n  get refreshToken() {\n    return this._refreshToken;\n  }\n\n  /**\n   * The expiration time of the current `refreshToken`.\n   */\n  get refreshTokenExpires() {\n    return this._refreshTokenExpires;\n  }\n\n  /**\n   * Returns `true` if these credentials can be refreshed and `false` if it cannot.\n   */\n  get canRefresh() {\n    if (this.username && this.password) {\n      return true;\n    }\n\n    if (this.clientId && this.refreshToken && this.redirectUri) {\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Begins a new browser-based OAuth 2.0 sign in. If `options.popup` is `true` the authentication window will open in a new tab/window. Otherwise, the user will be redirected to the authorization page in their current tab/window and the function will return `undefined`.\n   *\n   * If `popup` is `true` (the default) this method will return a `Promise` that resolves to an `ArcGISIdentityManager` instance and you must call {@linkcode ArcGISIdentityManager.completeOAuth2()} on the page defined in the `redirectUri`. Otherwise it will return undefined and the {@linkcode ArcGISIdentityManager.completeOAuth2()} method will return a `Promise` that resolves to an `ArcGISIdentityManager` instance.\n   *\n   * A {@linkcode ArcGISAccessDeniedError} error will be thrown if the user denies the request on the authorization screen.\n   *\n   * @browserOnly\n   */\n  public static beginOAuth2(\n    options: IOAuth2Options,\n    win?: any\n  ): Promise<ArcGISIdentityManager> | undefined {\n    /* istanbul ignore next: must pass in a mockwindow for tests so we can't cover the other branch */\n    if (!win && window) {\n      win = window;\n    }\n\n    const {\n      portal,\n      provider,\n      clientId,\n      expiration,\n      redirectUri,\n      popup,\n      popupWindowFeatures,\n      locale,\n      params,\n      style,\n      pkce,\n      state\n    }: IOAuth2Options = {\n      ...{\n        portal: \"https://www.arcgis.com/sharing/rest\",\n        provider: \"arcgis\",\n        expiration: 20160,\n        popup: true,\n        popupWindowFeatures:\n          \"height=400,width=600,menubar=no,location=yes,resizable=yes,scrollbars=yes,status=yes\",\n        locale: \"\",\n        style: \"\",\n        pkce: true\n      },\n      ...options\n    };\n\n    /**\n     * Generate a  random string for the `state` param and store it in local storage. This is used\n     * to validate that all parts of the oAuth process were performed on the same client.\n     */\n    const stateId = state || generateRandomString(win);\n    const stateStorageKey = `ARCGIS_REST_JS_AUTH_STATE_${clientId}`;\n\n    win.localStorage.setItem(stateStorageKey, stateId);\n\n    // Start setting up the URL to the authorization screen.\n    let authorizeUrl = `${cleanUrl(portal)}/oauth2/authorize`;\n    const authorizeUrlParams: any = {\n      client_id: clientId,\n      response_type: pkce ? \"code\" : \"token\",\n      expiration: expiration,\n      redirect_uri: redirectUri,\n      state: JSON.stringify({\n        id: stateId,\n        originalUrl: win.location.href // this is used to reset the URL back the original URL upon return\n      }),\n      locale: locale,\n      style: style\n    };\n\n    // If we are authorizing through a specific social provider update the params and base URL.\n    if (provider !== \"arcgis\") {\n      authorizeUrl = `${cleanUrl(portal)}/oauth2/social/authorize`;\n      authorizeUrlParams.socialLoginProviderName = provider;\n      authorizeUrlParams.autoAccountCreateForSocial = true;\n    }\n\n    /**\n     * set a value that will be set to a promise which will later resolve when we are ready\n     * to send users to the authorization page.\n     */\n    let setupAuth;\n\n    if (pkce) {\n      /**\n       * If we are authenticating with PKCE we need to generate the code challenge which is\n       * async so we generate the code challenge and assign the resulting Promise to `setupAuth`\n       */\n      const codeVerifier = generateRandomString(win);\n      const codeVerifierStorageKey = `ARCGIS_REST_JS_CODE_VERIFIER_${clientId}`;\n\n      win.localStorage.setItem(codeVerifierStorageKey, codeVerifier);\n\n      setupAuth = generateCodeChallenge(codeVerifier, win).then(function (\n        codeChallenge\n      ) {\n        authorizeUrlParams.code_challenge_method = codeChallenge\n          ? \"S256\"\n          : \"plain\";\n\n        authorizeUrlParams.code_challenge = codeChallenge\n          ? codeChallenge\n          : codeVerifier;\n      });\n    } else {\n      /**\n       * If we aren't authenticating with PKCE we can just assign a resolved promise to `setupAuth`\n       */\n      setupAuth = Promise.resolve();\n    }\n\n    /**\n     * Once we are done setting up with (for PKCE) we can start the auth process.\n     */\n    return setupAuth.then(() => {\n      // combine the authorize URL and params\n      authorizeUrl = `${authorizeUrl}?${encodeQueryString(authorizeUrlParams)}`;\n\n      // append additional params passed by the user\n      if (params) {\n        authorizeUrl = `${authorizeUrl}&${encodeQueryString(params)}`;\n      }\n\n      if (popup) {\n        // If we are authenticating a popup we need to return a Promise that will resolve to an ArcGISIdentityManager later.\n        return new Promise((resolve, reject) => {\n          // Add an event listener to listen for when a user calls `ArcGISIdentityManager.completeOAuth2()` in the popup.\n          win.addEventListener(\n            `arcgis-rest-js-popup-auth-${clientId}`,\n            (e: CustomEvent<any>) => {\n              if (e.detail.error === \"access_denied\") {\n                const error = new ArcGISAccessDeniedError();\n                reject(error);\n                return error;\n              }\n\n              if (e.detail.errorMessage) {\n                const error = new ArcGISAuthError(\n                  e.detail.errorMessage,\n                  e.detail.error\n                );\n                reject(error);\n                return error;\n              }\n\n              resolve(\n                new ArcGISIdentityManager({\n                  clientId,\n                  portal,\n                  ssl: e.detail.ssl,\n                  token: e.detail.token,\n                  tokenExpires: e.detail.expires,\n                  username: e.detail.username,\n                  refreshToken: e.detail.refreshToken,\n                  refreshTokenExpires: e.detail.refreshTokenExpires,\n                  redirectUri\n                })\n              );\n            },\n            {\n              once: true\n            }\n          );\n\n          // open the popup\n          win.open(authorizeUrl, \"oauth-window\", popupWindowFeatures);\n\n          win.dispatchEvent(new CustomEvent(\"arcgis-rest-js-popup-auth-start\"));\n        });\n      } else {\n        // If we aren't authenticating with a popup just send the user to the authorization page.\n        win.location.href = authorizeUrl;\n        return undefined;\n      }\n    });\n  }\n\n  /**\n   * Completes a browser-based OAuth 2.0 sign in. If `options.popup` is `true` the user\n   * will be returned to the previous window and the popup will close. Otherwise a new `ArcGISIdentityManager` will be returned. You must pass the same values for `clientId`, `popup`, `portal`, and `pkce` as you used in `beginOAuth2()`.\n   *\n   * A {@linkcode ArcGISAccessDeniedError} error will be thrown if the user denies the request on the authorization screen.\n   * @browserOnly\n   */\n  public static completeOAuth2(options: IOAuth2Options, win?: any) {\n    /* istanbul ignore next: must pass in a mockwindow for tests so we can't cover the other branch */\n    if (!win && window) {\n      win = window;\n    }\n\n    // pull out necessary options\n    const { portal, clientId, popup, pkce, redirectUri }: IOAuth2Options = {\n      ...{\n        portal: \"https://www.arcgis.com/sharing/rest\",\n        popup: true,\n        pkce: true\n      },\n      ...options\n    };\n\n    // pull the saved state id out of local storage\n    const stateStorageKey = `ARCGIS_REST_JS_AUTH_STATE_${clientId}`;\n    const stateId = win.localStorage.getItem(stateStorageKey);\n\n    // get the params provided by the server and compare the server state with the client saved state\n    const params = decodeQueryString(\n      pkce\n        ? win.location.search.replace(/^\\?/, \"\")\n        : win.location.hash.replace(/^#/, \"\")\n    );\n\n    const state = params && params.state ? JSON.parse(params.state) : undefined;\n\n    function reportError(\n      errorMessage: string,\n      error: string,\n      originalUrl?: string\n    ) {\n      win.localStorage.removeItem(stateStorageKey);\n\n      if (popup && win.opener) {\n        win.opener.dispatchEvent(\n          new CustomEvent(`arcgis-rest-js-popup-auth-${clientId}`, {\n            detail: {\n              error,\n              errorMessage\n            }\n          })\n        );\n\n        win.close();\n\n        return;\n      }\n\n      if (originalUrl) {\n        win.history.replaceState(win.history.state, \"\", originalUrl);\n      }\n\n      if (error === \"access_denied\") {\n        return Promise.reject(new ArcGISAccessDeniedError());\n      }\n\n      return Promise.reject(new ArcGISAuthError(errorMessage, error));\n    }\n\n    // create a function to create the final ArcGISIdentityManager from the token info.\n    function createManager(\n      oauthInfo: IFetchTokenResponse,\n      originalUrl: string\n    ) {\n      win.localStorage.removeItem(stateStorageKey);\n\n      if (popup && win.opener) {\n        win.opener.dispatchEvent(\n          new CustomEvent(`arcgis-rest-js-popup-auth-${clientId}`, {\n            detail: {\n              ...oauthInfo\n            }\n          })\n        );\n\n        win.close();\n\n        return;\n      }\n\n      win.history.replaceState(win.history.state, \"\", originalUrl);\n\n      return new ArcGISIdentityManager({\n        clientId,\n        portal,\n        ssl: oauthInfo.ssl,\n        token: oauthInfo.token,\n        tokenExpires: oauthInfo.expires,\n        username: oauthInfo.username,\n        refreshToken: oauthInfo.refreshToken,\n        refreshTokenExpires: oauthInfo.refreshTokenExpires,\n        // At 4.0.0 it was possible (in JS code) to not pass redirectUri and fallback to win.location.href, however this broke support for redirect URIs with query params.\n        // Now similar to 3.x.x you must pass the redirectUri parameter explicitly. See https://github.com/Esri/arcgis-rest-js/issues/995\n        redirectUri:\n          redirectUri ||\n          /* istanbul ignore next: TypeScript wont compile if we omit redirectUri */ location.href.replace(\n            location.search,\n            \"\"\n          )\n      });\n    }\n\n    if (!stateId || !state) {\n      return reportError(\n        \"No authentication state was found, call `ArcGISIdentityManager.beginOAuth2(...)` to start the authentication process.\",\n        \"no-auth-state\"\n      );\n    }\n\n    if (state.id !== stateId) {\n      return reportError(\n        \"Saved client state did not match server sent state.\",\n        \"mismatched-auth-state\"\n      );\n    }\n\n    if (params.error) {\n      const error = params.error;\n      const errorMessage = params.error_description || \"Unknown error\";\n\n      return reportError(errorMessage, error, state.originalUrl);\n    }\n    /**\n     * If we are using PKCE the authorization code will be in the query params.\n     * For implicit grants the token will be in the hash.\n     */\n    if (pkce && params.code) {\n      const tokenEndpoint = cleanUrl(`${portal}/oauth2/token/`);\n\n      const codeVerifierStorageKey = `ARCGIS_REST_JS_CODE_VERIFIER_${clientId}`;\n      const codeVerifier = win.localStorage.getItem(codeVerifierStorageKey);\n      win.localStorage.removeItem(codeVerifierStorageKey);\n\n      // exchange our auth code for a token + refresh token\n      return fetchToken(tokenEndpoint, {\n        httpMethod: \"POST\",\n        params: {\n          client_id: clientId,\n          code_verifier: codeVerifier,\n          grant_type: \"authorization_code\",\n          // using location.href here does not support query params but shipped with 4.0.0. See https://github.com/Esri/arcgis-rest-js/issues/995\n          redirect_uri:\n            redirectUri || location.href.replace(location.search, \"\"),\n          code: params.code\n        }\n      })\n        .then((tokenResponse) => {\n          return createManager(\n            { ...tokenResponse, ...state },\n            state.originalUrl\n          );\n        })\n        .catch((e) => {\n          return reportError(e.originalMessage, e.code, state.originalUrl);\n        });\n    }\n\n    if (!pkce && params.access_token) {\n      return Promise.resolve(\n        createManager(\n          {\n            token: params.access_token,\n            expires: new Date(\n              Date.now() + parseInt(params.expires_in, 10) * 1000\n            ),\n            ssl: params.ssl === \"true\",\n            username: params.username,\n            ...state\n          },\n          state.originalUrl\n        )\n      );\n    }\n\n    return reportError(\"Unknown error\", \"oauth-error\", state.originalUrl);\n  }\n\n  /**\n   * Request credentials information from the parent application\n   *\n   * When an application is embedded into another application via an IFrame, the embedded app can\n   * use `window.postMessage` to request credentials from the host application. This function wraps\n   * that behavior.\n   *\n   * The ArcGIS API for Javascript has this built into the Identity Manager as of the 4.19 release.\n   *\n   * Note: The parent application will not respond if the embedded app's origin is not:\n   * - the same origin as the parent or *.arcgis.com (JSAPI)\n   * - in the list of valid child origins (REST-JS)\n   *\n   *\n   * @param parentOrigin origin of the parent frame. Passed into the embedded application as `parentOrigin` query param\n   * @browserOnly\n   */\n  public static fromParent(parentOrigin: string, win?: any): Promise<any> {\n    /* istanbul ignore next: must pass in a mockwindow for tests so we can't cover the other branch */\n    if (!win && window) {\n      win = window;\n    }\n    // Declare handler outside of promise scope so we can detach it\n    let handler: (event: any) => void;\n    // return a promise that will resolve when the handler receives\n    // session information from the correct origin\n    return new Promise((resolve, reject) => {\n      // create an event handler that just wraps the parentMessageHandler\n      handler = (event: any) => {\n        // ensure we only listen to events from the parent\n        if (event.source === win.parent && event.data) {\n          try {\n            return resolve(ArcGISIdentityManager.parentMessageHandler(event));\n          } catch (err) {\n            return reject(err);\n          }\n        }\n      };\n      // add listener\n      win.addEventListener(\"message\", handler, false);\n      win.parent.postMessage(\n        { type: \"arcgis:auth:requestCredential\" },\n        parentOrigin\n      );\n    }).then((manager) => {\n      win.removeEventListener(\"message\", handler, false);\n      return manager;\n    });\n  }\n\n  /**\n   * Begins a new server-based OAuth 2.0 sign in. This will redirect the user to\n   * the ArcGIS Online or ArcGIS Enterprise authorization page.\n   *\n   * @nodeOnly\n   */\n  public static authorize(\n    options: IOAuth2Options,\n    response: http.ServerResponse\n  ) {\n    const { portal, clientId, expiration, redirectUri, state }: IOAuth2Options =\n      {\n        ...{ portal: \"https://arcgis.com/sharing/rest\", expiration: 20160 },\n        ...options\n      };\n\n    const queryParams: any = {\n      client_id: clientId,\n      expiration,\n      response_type: \"code\",\n      redirect_uri: redirectUri\n    };\n\n    if (state) {\n      queryParams.state = state;\n    }\n\n    const url = `${portal}/oauth2/authorize?${encodeQueryString(queryParams)}`;\n\n    response.writeHead(301, {\n      Location: url\n    });\n\n    response.end();\n  }\n\n  /**\n   * Completes the server-based OAuth 2.0 sign in process by exchanging the `authorizationCode`\n   * for a `access_token`.\n   *\n   * @nodeOnly\n   */\n  public static exchangeAuthorizationCode(\n    options: IOAuth2Options,\n    authorizationCode: string\n  ): Promise<ArcGISIdentityManager> {\n    const { portal, clientId, redirectUri }: IOAuth2Options = {\n      ...{\n        portal: \"https://www.arcgis.com/sharing/rest\"\n      },\n      ...options\n    };\n\n    return fetchToken(`${portal}/oauth2/token`, {\n      params: {\n        grant_type: \"authorization_code\",\n        client_id: clientId,\n        redirect_uri: redirectUri,\n        code: authorizationCode\n      }\n    })\n      .then((response) => {\n        return new ArcGISIdentityManager({\n          clientId,\n          portal,\n          ssl: response.ssl,\n          redirectUri,\n          refreshToken: response.refreshToken,\n          refreshTokenExpires: response.refreshTokenExpires,\n          token: response.token,\n          tokenExpires: response.expires,\n          username: response.username\n        });\n      })\n      .catch((e) => {\n        throw new ArcGISTokenRequestError(\n          e.message,\n          ArcGISTokenRequestErrorCodes.REFRESH_TOKEN_EXCHANGE_FAILED,\n          e.response,\n          e.url,\n          e.options\n        );\n      });\n  }\n\n  /**\n   * Deserializes a JSON string previously created with {@linkcode ArcGISIdentityManager.serialize} to an {@linkcode ArcGISIdentityManager} instance.\n   *\n   * ```js\n   * // create an ArcGISIdentityManager instance\n   * const serializedString = manager.serialize();\n   * localStorage.setItem(\"arcgis-identity-manager\", serializedString);\n   *\n   * // later, you can retrieve the manager from localStorage\n   * const serializedString = localStorage.getItem(\"arcgis-identity-manager\");\n   * const manager = ArcGISIdentityManager.deserialize(serializedString);\n   * ```\n   *\n   * @param str A JSON string representing an instance of `ArcGISIdentityManager`. This can be created with {@linkcode ArcGISIdentityManager.serialize}.\n   */\n  public static deserialize(str: string) {\n    const options = JSON.parse(str);\n    return new ArcGISIdentityManager({\n      clientId: options.clientId,\n      refreshToken: options.refreshToken,\n      refreshTokenExpires: options.refreshTokenExpires\n        ? new Date(options.refreshTokenExpires)\n        : undefined,\n      username: options.username,\n      password: options.password,\n      token: options.token,\n      tokenExpires: options.tokenExpires\n        ? new Date(options.tokenExpires)\n        : undefined,\n      portal: options.portal,\n      ssl: options.ssl,\n      tokenDuration: options.tokenDuration,\n      redirectUri: options.redirectUri,\n      server: options.server\n    });\n  }\n\n  /**\n   * Translates authentication from the format used in the [`IdentityManager` class in the ArcGIS API for JavaScript](https://developers.arcgis.com/javascript/latest/api-reference/esri-identity-Credential.html).\n   *\n   * You will need to call both [`IdentityManger.findCredential`](https://developers.arcgis.com/javascript/latest/api-reference/esri-identity-IdentityManager.html#findCredential) and [`IdentityManger.findServerInfo`](https://developers.arcgis.com/javascript/latest/api-reference/esri-identity-IdentityManager.html#findServerInfo) to obtain both parameters for this method.\n   *\n   * This method can be used with {@linkcode ArcGISIdentityManager.toCredential} to interop with the ArcGIS API for JavaScript.\n   *\n   * ```js\n   * require([\"esri/id\"], (esriId) => {\n   *   const credential = esriId.findCredential(\"https://www.arcgis.com/sharing/rest\");\n   *   const serverInfo = esriId.findServerInfo(\"https://www.arcgis.com/sharing/rest\");\n   *\n   *   const manager = ArcGISIdentityManager.fromCredential(credential, serverInfo);\n   * });\n   * ```\n   *\n   * @returns ArcGISIdentityManager\n   */\n  public static fromCredential(\n    credential: ICredential,\n    serverInfo: IServerInfo\n  ) {\n    // At ArcGIS Online 9.1, credentials no longer include the ssl and expires properties\n    // Here, we provide default values for them to cover this condition\n    const ssl = typeof credential.ssl !== \"undefined\" ? credential.ssl : true;\n    const expires = credential.expires || Date.now() + 7200000; /* 2 hours */\n\n    if (serverInfo.hasServer) {\n      return new ArcGISIdentityManager({\n        server: credential.server,\n        ssl,\n        token: credential.token,\n        username: credential.userId,\n        tokenExpires: new Date(expires)\n      });\n    }\n    return new ArcGISIdentityManager({\n      portal: cleanUrl(\n        credential.server.includes(\"sharing/rest\")\n          ? credential.server\n          : credential.server + `/sharing/rest`\n      ),\n      ssl,\n      token: credential.token,\n      username: credential.userId,\n      tokenExpires: new Date(expires)\n    });\n  }\n\n  /**\n   * Handle the response from the parent\n   * @param event DOM Event\n   */\n  private static parentMessageHandler(event: any): ArcGISIdentityManager {\n    if (event.data.type === \"arcgis:auth:credential\") {\n      const credential = event.data.credential as ICredential;\n      // at 4.x - 4.5 we were passing .toJSON() instead of .toCredential()\n      // so we attempt to handle either payload for backwards compatibility\n      // but at the next breaking change we should only support an ICredential\n      return isCredential(credential)\n        ? ArcGISIdentityManager.fromCredential(credential, {\n            hasPortal: true,\n            hasServer: false,\n            server: credential.server\n          } as IServerInfo)\n        : new ArcGISIdentityManager(credential);\n    }\n    if (event.data.type === \"arcgis:auth:error\") {\n      const err = new Error(event.data.error.message);\n      err.name = event.data.error.name;\n      throw err;\n    } else {\n      throw new Error(\"Unknown message type.\");\n    }\n  }\n\n  /**\n   * Revokes all active tokens for a provided {@linkcode ArcGISIdentityManager}. The can be considered the equivalent to signing the user out of your application.\n   */\n  public static destroy(manager: ArcGISIdentityManager) {\n    return revokeToken({\n      clientId: manager.clientId,\n      portal: manager.portal,\n      token: manager.refreshToken || manager.token\n    });\n  }\n\n  /**\n   * Create a  {@linkcode ArcGISIdentityManager} from an existing token. Useful for when you have a users token from a different authentication system and want to get a  {@linkcode ArcGISIdentityManager}.\n   */\n  public static fromToken(\n    options: IFromTokenOptions\n  ): Promise<ArcGISIdentityManager> {\n    const manager = new ArcGISIdentityManager(options);\n\n    return manager.getUser().then(() => {\n      return manager;\n    });\n  }\n\n  /**\n   * Initialize a {@linkcode ArcGISIdentityManager} with a user's `username` and `password`. **This method is intended ONLY for applications without a user interface such as CLI tools.**.\n   *\n   * If possible you should use {@linkcode ArcGISIdentityManager.beginOAuth2} to authenticate users in a browser or {@linkcode ArcGISIdentityManager.authorize} for authenticating users with a web server.\n   */\n  public static signIn(options: ISignInOptions) {\n    const manager = new ArcGISIdentityManager(options);\n\n    return manager.getUser().then(() => {\n      return manager;\n    });\n  }\n\n  /**\n   * Client ID being used for authentication if provided in the `constructor`.\n   */\n  public readonly clientId: string;\n\n  /**\n   * The currently authenticated user's password if provided in the `constructor`.\n   */\n  public readonly password: string;\n\n  /**\n   * The current portal the user is authenticated with.\n   */\n  public readonly portal: string;\n\n  /**\n   * This value is set to true automatically if the ArcGIS Organization requires that requests be made over https.\n   */\n  public readonly ssl: boolean;\n\n  /**\n   * The authentication provider to use.\n   */\n  public readonly provider: AuthenticationProvider;\n\n  /**\n   * Determines how long new tokens requested are valid.\n   */\n  public readonly tokenDuration: number;\n\n  /**\n   * A valid redirect URI for this application if provided in the `constructor`.\n   */\n  public readonly redirectUri: string;\n\n  /**\n   * An unfederated ArcGIS Server instance known to recognize credentials supplied manually.\n   *\n   * ```js\n   * {\n   *   server: \"https://sampleserver6.arcgisonline.com/arcgis\",\n   *   token: \"SOSlV3v..\",\n   *   tokenExpires: new Date(1545415669763)\n   * }\n   * ```\n   */\n  public readonly server: string;\n\n  /**\n   * The referer to use when getting the token with `.signIn()`\n   */\n  public readonly referer: string;\n\n  /**\n   * Hydrated by a call to [getPortal()](#getPortal-summary).\n   */\n  private _portalInfo: any;\n\n  private _token: string;\n  private _tokenExpires: Date;\n  private _refreshToken: string;\n  private _refreshTokenExpires: Date;\n  private _pendingPortalRequest: Promise<any>;\n\n  /**\n   * Internal object to keep track of pending token requests. Used to prevent\n   *  duplicate token requests.\n   */\n  private _pendingTokenRequests: {\n    [key: string]: Promise<string>;\n  };\n\n  /**\n   * Internal list of tokens to 3rd party servers (federated servers) that have\n   *  been created via `generateToken`. The object key is the root URL of the server.\n   */\n  private federatedServers: {\n    [key: string]: {\n      token: string;\n      expires: Date;\n    };\n  };\n\n  /**\n   * Internal list of 3rd party domains that should receive all cookies (credentials: \"include\").\n   * Used to for PKI and IWA workflows in high security environments.\n   */\n  private trustedDomains: string[];\n\n  private _hostHandler: any;\n\n  constructor(options: IArcGISIdentityManagerOptions) {\n    super(options);\n    this.clientId = options.clientId;\n    this._refreshToken = options.refreshToken;\n    this._refreshTokenExpires = options.refreshTokenExpires;\n    this.password = options.password;\n    this._token = options.token;\n    this._tokenExpires = options.tokenExpires;\n    this.portal = options.portal\n      ? cleanUrl(options.portal)\n      : \"https://www.arcgis.com/sharing/rest\";\n    this.ssl = options.ssl;\n    this.provider = options.provider || \"arcgis\";\n    this.tokenDuration = options.tokenDuration || 20160;\n    this.redirectUri = options.redirectUri;\n    this.server = options.server;\n    this.referer = options.referer;\n\n    this.federatedServers = {};\n    this.trustedDomains = [];\n\n    // if a non-federated server was passed explicitly, it should be trusted.\n    if (options.server) {\n      // if the url includes more than '/arcgis/', trim the rest\n      const root = this.getServerRootUrl(options.server);\n\n      this.federatedServers[root] = {\n        token: options.token,\n        expires: options.tokenExpires\n      };\n    }\n    this._pendingTokenRequests = {};\n  }\n\n  /**\n   * Returns authentication in a format useable in the [`IdentityManager.registerToken()` method in the ArcGIS API for JavaScript](https://developers.arcgis.com/javascript/latest/api-reference/esri-identity-IdentityManager.html#registerToken).\n   *\n   * This method can be used with {@linkcode ArcGISIdentityManager.fromCredential} to interop with the ArcGIS API for JavaScript.\n   *\n   * ```js\n   * require([\"esri/id\"], (esriId) => {\n   *   esriId.registerToken(manager.toCredential());\n   * })\n\n   * ```\n   *\n   * @returns ICredential\n   */\n  public toCredential(): ICredential {\n    return {\n      expires: this.tokenExpires.getTime(),\n      server: this.server || this.portal,\n      ssl: this.ssl,\n      token: this.token,\n      userId: this.username\n    };\n  }\n\n  /**\n   * Returns information about the currently logged in user's [portal](https://developers.arcgis.com/rest/users-groups-and-items/portal-self.htm). Subsequent calls will *not* result in additional web traffic.\n   *\n   * ```js\n   * manager.getPortal()\n   *   .then(response => {\n   *     console.log(portal.name); // \"City of ...\"\n   *   })\n   * ```\n   *\n   * @param requestOptions - Options for the request. NOTE: `rawResponse` is not supported by this operation.\n   * @returns A Promise that will resolve with the data from the response.\n   */\n  public getPortal(requestOptions?: IRequestOptions): Promise<any> {\n    if (this._pendingPortalRequest) {\n      return this._pendingPortalRequest;\n    } else if (this._portalInfo) {\n      return Promise.resolve(this._portalInfo);\n    } else {\n      const url = `${this.portal}/portals/self`;\n\n      const options = {\n        httpMethod: \"GET\",\n        authentication: this,\n        ...requestOptions,\n        rawResponse: false\n      } as IRequestOptions;\n\n      this._pendingPortalRequest = request(url, options).then((response) => {\n        this._portalInfo = response;\n        this._pendingPortalRequest = null;\n        return response;\n      });\n\n      return this._pendingPortalRequest;\n    }\n  }\n\n  /**\n   * Gets an appropriate token for the given URL. If `portal` is ArcGIS Online and\n   * the request is to an ArcGIS Online domain `token` will be used. If the request\n   * is to the current `portal` the current `token` will also be used. However if\n   * the request is to an unknown server we will validate the server with a request\n   * to our current `portal`.\n   */\n  public getToken(url: string, requestOptions?: ITokenRequestOptions) {\n    if (canUseOnlineToken(this.portal, url)) {\n      return this.getFreshToken(requestOptions);\n    } else if (new RegExp(this.portal, \"i\").test(url)) {\n      return this.getFreshToken(requestOptions);\n    } else {\n      return this.getTokenForServer(url, requestOptions);\n    }\n  }\n\n  /**\n   * Get application access information for the current user\n   * see `validateAppAccess` function for details\n   *\n   * @param clientId application client id\n   */\n  public validateAppAccess(clientId: string): Promise<IAppAccess> {\n    return this.getToken(this.portal).then((token) => {\n      return validateAppAccess(token, clientId);\n    });\n  }\n\n  /**\n   * Converts the `ArcGISIdentityManager` instance to a JSON object. This is called when the instance is serialized to JSON with [`JSON.stringify()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify).\n   *\n   * ```js\n   * import { ArcGISIdentityManager } from '@esri/arcgis-rest-request';\n   *\n   * const session = ArcGISIdentityManager.fromCredentials({\n   *   clientId: \"abc123\",\n   *   clientSecret: \"••••••\"\n   * })\n   *\n   * const json = JSON.stringify(session);\n   * ```\n   *\n   * @returns A plain object representation of the instance.\n   */\n  public toJSON(): IArcGISIdentityManagerOptions & { type: string } {\n    return {\n      type: \"ArcGISIdentityManager\",\n      clientId: this.clientId,\n      refreshToken: this.refreshToken,\n      refreshTokenExpires: this.refreshTokenExpires || undefined,\n      username: this.username,\n      password: this.password,\n      token: this.token,\n      tokenExpires: this.tokenExpires || undefined,\n      portal: this.portal,\n      ssl: this.ssl,\n      tokenDuration: this.tokenDuration,\n      redirectUri: this.redirectUri,\n      server: this.server\n    };\n  }\n\n  /**\n   * Serializes the `ArcGISIdentityManager` instance to a JSON string.\n   *\n   * ```js\n   * // create an ArcGISIdentityManager instance\n   * const serializedString = manager.serialize();\n   * localStorage.setItem(\"arcgis-identity-manager\", serializedString);\n   *\n   * // later, you can retrieve the manager from localStorage\n   * const serializedString = localStorage.getItem(\"arcgis-identity-manager\");\n   * const manager = ArcGISIdentityManager.deserialize(serializedString);\n   * ```\n   *\n   * @returns The serialized JSON string.\n   */\n  public serialize() {\n    return JSON.stringify(this);\n  }\n\n  /**\n   * For a \"Host\" app that embeds other platform apps via iframes, after authenticating the user\n   * and creating a ArcGISIdentityManager, the app can then enable \"post message\" style authentication by calling\n   * this method.\n   *\n   * Internally this adds an event listener on window for the `message` event\n   *\n   * @param validChildOrigins Array of origins that are allowed to request authentication from the host app\n   */\n  public enablePostMessageAuth(validChildOrigins: string[], win?: any): any {\n    /* istanbul ignore next: must pass in a mockwindow for tests so we can't cover the other branch */\n    if (!win && window) {\n      win = window;\n    }\n    this._hostHandler = this.createPostMessageHandler(validChildOrigins);\n    win.addEventListener(\"message\", this._hostHandler, false);\n  }\n\n  /**\n   * For a \"Host\" app that has embedded other platform apps via iframes, when the host needs\n   * to transition routes, it should call `ArcGISIdentityManager.disablePostMessageAuth()` to remove\n   * the event listener and prevent memory leaks\n   */\n  public disablePostMessageAuth(win?: any) {\n    /* istanbul ignore next: must pass in a mockwindow for tests so we can't cover the other branch */\n    if (!win && window) {\n      win = window;\n    }\n    win.removeEventListener(\"message\", this._hostHandler, false);\n  }\n\n  /**\n   * Manually refreshes the current `token` and `tokenExpires`.\n   */\n  public refreshCredentials(requestOptions?: ITokenRequestOptions) {\n    // make sure subsequent calls to getUser() don't returned cached metadata\n    this.clearCachedUserInfo();\n\n    if (this.username && this.password) {\n      return this.refreshWithUsernameAndPassword(requestOptions);\n    }\n\n    if (this.clientId && this.refreshToken) {\n      return this.refreshWithRefreshToken();\n    }\n\n    return Promise.reject(\n      new ArcGISTokenRequestError(\n        \"Unable to refresh token. No refresh token or password present.\",\n        ArcGISTokenRequestErrorCodes.TOKEN_REFRESH_FAILED\n      )\n    );\n  }\n\n  /**\n   * Determines the root of the ArcGIS Server or Portal for a given URL.\n   *\n   * @param url the URl to determine the root url for.\n   */\n  public getServerRootUrl(url: string) {\n    const [root] = cleanUrl(url).split(\n      /\\/rest(\\/admin)?\\/services(?:\\/|#|\\?|$)/\n    );\n    const [match, protocol, domainAndPath] = root.match(/(https?:\\/\\/)(.+)/);\n    const [domain, ...path] = domainAndPath.split(\"/\");\n\n    // only the domain is lowercased because in some cases an org id might be\n    // in the path which cannot be lowercased.\n    return `${protocol}${domain.toLowerCase()}/${path.join(\"/\")}`;\n  }\n\n  /**\n   * Returns the proper [`credentials`] option for `fetch` for a given domain.\n   * See [trusted server](https://enterprise.arcgis.com/en/portal/latest/administer/windows/configure-security.htm#ESRI_SECTION1_70CC159B3540440AB325BE5D89DBE94A).\n   * Used internally by underlying request methods to add support for specific security considerations.\n   *\n   * @param url The url of the request\n   * @returns \"include\" or \"same-origin\"\n   */\n  public getDomainCredentials(url: string): RequestCredentials {\n    if (!this.trustedDomains || !this.trustedDomains.length) {\n      return \"same-origin\";\n    }\n\n    url = url.toLowerCase();\n    return this.trustedDomains.some((domainWithProtocol) => {\n      return url.startsWith(domainWithProtocol.toLowerCase());\n    })\n      ? \"include\"\n      : \"same-origin\";\n  }\n\n  /**\n   * Convenience method for {@linkcode ArcGISIdentityManager.destroy} for this instance of `ArcGISIdentityManager`\n   */\n  public signOut() {\n    return ArcGISIdentityManager.destroy(this);\n  }\n\n  /**\n   * Return a function that closes over the validOrigins array and\n   * can be used as an event handler for the `message` event\n   *\n   * @param validOrigins Array of valid origins\n   */\n  private createPostMessageHandler(\n    validOrigins: string[]\n  ): (event: any) => void {\n    // return a function that closes over the validOrigins and\n    // has access to the credential\n    return (event: any) => {\n      // Verify that the origin is valid\n      // Note: do not use regex's here. validOrigins is an array so we're checking that the event's origin\n      // is in the array via exact match. More info about avoiding postMessage xss issues here\n      // https://jlajara.gitlab.io/web/2020/07/17/Dom_XSS_PostMessage_2.html#tipsbypasses-in-postmessage-vulnerabilities\n      const isValidOrigin = validOrigins.indexOf(event.origin) > -1;\n      // JSAPI handles this slightly differently - instead of checking a list, it will respond if\n      // event.origin === window.location.origin || event.origin.endsWith('.arcgis.com')\n      // For Hub, and to enable cross domain debugging with port's in urls, we are opting to\n      // use a list of valid origins\n\n      // Ensure the message type is something we want to handle\n      const isValidType = event.data.type === \"arcgis:auth:requestCredential\";\n      // Ensure we don't pass an expired session forward\n      const isTokenValid = this.tokenExpires.getTime() > Date.now();\n\n      if (isValidOrigin && isValidType) {\n        let msg = {};\n        if (isTokenValid) {\n          const credential = this.toCredential();\n          // the following line allows us to conform to our spec without changing other depended-on functionality\n          // https://github.com/Esri/arcgis-rest-js/blob/master/packages/arcgis-rest-auth/post-message-auth-spec.md#arcgisauthcredential\n          credential.server = credential.server.replace(\"/sharing/rest\", \"\");\n          msg = { type: \"arcgis:auth:credential\", credential };\n        } else {\n          msg = {\n            type: \"arcgis:auth:error\",\n            error: {\n              name: \"tokenExpiredError\",\n              message:\n                \"Token was expired, and not returned to the child application\"\n            }\n          };\n        }\n\n        event.source.postMessage(msg, event.origin);\n      }\n    };\n  }\n\n  /**\n   * Validates that a given URL is properly federated with our current `portal`.\n   * Attempts to use the internal `federatedServers` cache first.\n   */\n  private getTokenForServer(\n    url: string,\n    requestOptions?: ITokenRequestOptions\n  ) {\n    // requests to /rest/services/ and /rest/admin/services/ are both valid\n    // Federated servers may have inconsistent casing, so lowerCase it\n    const root = this.getServerRootUrl(url);\n    const existingToken = this.federatedServers[root];\n\n    if (\n      existingToken &&\n      existingToken.expires &&\n      existingToken.expires.getTime() > Date.now()\n    ) {\n      return Promise.resolve(existingToken.token);\n    }\n\n    if (this._pendingTokenRequests[root]) {\n      return this._pendingTokenRequests[root];\n    }\n\n    this._pendingTokenRequests[root] = this.fetchAuthorizedDomains().then(\n      () => {\n        return request(`${root}/rest/info`, {\n          credentials: this.getDomainCredentials(url)\n        })\n          .then((serverInfo) => {\n            if (serverInfo.owningSystemUrl) {\n              /**\n               * if this server is not owned by this portal\n               * bail out with an error since we know we wont\n               * be able to generate a token\n               */\n              if (!isFederated(serverInfo.owningSystemUrl, this.portal)) {\n                throw new ArcGISTokenRequestError(\n                  `${url} is not federated with ${this.portal}.`,\n                  ArcGISTokenRequestErrorCodes.NOT_FEDERATED\n                );\n              } else {\n                /**\n                 * if the server is federated, use the relevant token endpoint.\n                 */\n                return request(\n                  `${serverInfo.owningSystemUrl}/sharing/rest/info`,\n                  requestOptions\n                );\n              }\n            } else if (\n              serverInfo.authInfo &&\n              this.federatedServers[root] !== undefined\n            ) {\n              /**\n               * if its a stand-alone instance of ArcGIS Server that doesn't advertise\n               * federation, but the root server url is recognized, use its built in token endpoint.\n               */\n              return Promise.resolve({\n                authInfo: serverInfo.authInfo\n              });\n            } else {\n              throw new ArcGISTokenRequestError(\n                `${url} is not federated with any portal and is not explicitly trusted.`,\n                ArcGISTokenRequestErrorCodes.NOT_FEDERATED\n              );\n            }\n          })\n          .then((serverInfo: any) => {\n            // an expired token cant be used to generate a new token so refresh our credentials before trying to generate a server token\n            if (this.token && this.tokenExpires.getTime() < Date.now()) {\n              // If we are authenticated to a single server just refresh with username and password and use the new credentials as the credentials for this server.\n              if (this.server) {\n                return this.refreshCredentials().then(() => {\n                  return {\n                    token: this.token,\n                    expires: this.tokenExpires\n                  };\n                });\n              }\n\n              // Otherwise refresh the credentials for the portal and generate a URL for the specific server.\n              return this.refreshCredentials().then(() => {\n                return this.generateTokenForServer(\n                  serverInfo.authInfo.tokenServicesUrl,\n                  root\n                );\n              });\n            } else {\n              return this.generateTokenForServer(\n                serverInfo.authInfo.tokenServicesUrl,\n                root\n              );\n            }\n          })\n          .then((response) => {\n            this.federatedServers[root] = response;\n            delete this._pendingTokenRequests[root];\n            return response.token;\n          });\n      }\n    );\n\n    return this._pendingTokenRequests[root];\n  }\n\n  /**\n   * Generates a token for a given `serverUrl` using a given `tokenServicesUrl`.\n   */\n  private generateTokenForServer(tokenServicesUrl: string, serverUrl: string) {\n    return request(tokenServicesUrl, {\n      params: {\n        token: this.token,\n        serverUrl,\n        expiration: this.tokenDuration\n      }\n    })\n      .then((response) => {\n        return {\n          token: response.token,\n          expires: new Date(response.expires - 1000 * 60 * 5)\n        };\n      })\n      .catch((e) => {\n        throw new ArcGISTokenRequestError(\n          e.message,\n          ArcGISTokenRequestErrorCodes.GENERATE_TOKEN_FOR_SERVER_FAILED,\n          e.response,\n          e.url,\n          e.options\n        );\n      });\n  }\n\n  /**\n   * Returns an unexpired token for the current `portal`.\n   */\n  private getFreshToken(requestOptions?: ITokenRequestOptions) {\n    if (this.token && !this.tokenExpires) {\n      return Promise.resolve(this.token);\n    }\n\n    if (\n      this.token &&\n      this.tokenExpires &&\n      this.tokenExpires.getTime() > Date.now()\n    ) {\n      return Promise.resolve(this.token);\n    }\n\n    if (!this._pendingTokenRequests[this.portal]) {\n      this._pendingTokenRequests[this.portal] = this.refreshCredentials(\n        requestOptions\n      ).then(() => {\n        this._pendingTokenRequests[this.portal] = null;\n        return this.token;\n      });\n    }\n\n    return this._pendingTokenRequests[this.portal];\n  }\n\n  /**\n   * Refreshes the current `token` and `tokenExpires` with `username` and\n   * `password`.\n   */\n  private refreshWithUsernameAndPassword(\n    requestOptions?: ITokenRequestOptions\n  ) {\n    const params = {\n      username: this.username,\n      password: this.password,\n      expiration: this.tokenDuration,\n      client: \"referer\",\n      referer: this.referer\n        ? this.referer\n        : typeof window !== \"undefined\" &&\n          typeof window.document !== \"undefined\" &&\n          window.location &&\n          window.location.origin\n        ? window.location.origin\n        : /* istanbul ignore next */\n          NODEJS_DEFAULT_REFERER_HEADER\n    };\n\n    return (\n      this.server\n        ? request(`${this.getServerRootUrl(this.server)}/rest/info`).then(\n            (response) => {\n              return request(response.authInfo.tokenServicesUrl, {\n                params,\n                ...requestOptions\n              });\n            }\n          )\n        : request(`${this.portal}/generateToken`, {\n            params,\n            ...requestOptions\n          })\n    )\n      .then((response: any) => {\n        this.updateToken(response.token, new Date(response.expires));\n        return this;\n      })\n      .catch((e) => {\n        throw new ArcGISTokenRequestError(\n          e.message,\n          ArcGISTokenRequestErrorCodes.TOKEN_REFRESH_FAILED,\n          e.response,\n          e.url,\n          e.options\n        );\n      });\n  }\n\n  /**\n   * Refreshes the current `token` and `tokenExpires` with `refreshToken`.\n   */\n  private refreshWithRefreshToken(requestOptions?: ITokenRequestOptions) {\n    // If our refresh token expires sometime in the next 24 hours then refresh the refresh token\n    const ONE_DAY_IN_MILLISECONDS = 1000 * 60 * 60 * 24;\n\n    if (\n      this.refreshToken &&\n      this.refreshTokenExpires &&\n      this.refreshTokenExpires.getTime() - ONE_DAY_IN_MILLISECONDS < Date.now()\n    ) {\n      return this.exchangeRefreshToken(requestOptions);\n    }\n\n    const options: ITokenRequestOptions = {\n      params: {\n        client_id: this.clientId,\n        refresh_token: this.refreshToken,\n        grant_type: \"refresh_token\"\n      },\n      ...requestOptions\n    };\n\n    return fetchToken(`${this.portal}/oauth2/token`, options)\n      .then((response) => {\n        return this.updateToken(response.token, response.expires);\n      })\n      .catch((e) => {\n        throw new ArcGISTokenRequestError(\n          e.message,\n          ArcGISTokenRequestErrorCodes.TOKEN_REFRESH_FAILED,\n          e.response,\n          e.url,\n          e.options\n        );\n      });\n  }\n\n  /**\n   * Update the stored {@linkcode ArcGISIdentityManager.token} and {@linkcode ArcGISIdentityManager.tokenExpires} properties. This method is used internally when refreshing tokens.\n   * You may need to call this if you want update the token with a new token from an external source.\n   *\n   * @param newToken The new token to use for this instance of `ArcGISIdentityManager`.\n   * @param newTokenExpiration The new expiration date of the token.\n   * @returns\n   */\n  updateToken(newToken: string, newTokenExpiration: Date) {\n    this._token = newToken;\n    this._tokenExpires = newTokenExpiration;\n\n    return this;\n  }\n\n  /**\n   * Exchanges an unexpired `refreshToken` for a new one, also updates `token` and\n   * `tokenExpires`.\n   */\n  exchangeRefreshToken(requestOptions?: ITokenRequestOptions) {\n    const options: ITokenRequestOptions = {\n      params: {\n        client_id: this.clientId,\n        refresh_token: this.refreshToken,\n        redirect_uri: this.redirectUri,\n        grant_type: \"exchange_refresh_token\"\n      },\n      ...requestOptions\n    };\n\n    return fetchToken(`${this.portal}/oauth2/token`, options)\n      .then((response) => {\n        this._token = response.token;\n        this._tokenExpires = response.expires;\n        this._refreshToken = response.refreshToken;\n        this._refreshTokenExpires = response.refreshTokenExpires;\n        return this;\n      })\n      .catch((e) => {\n        throw new ArcGISTokenRequestError(\n          e.message,\n          ArcGISTokenRequestErrorCodes.REFRESH_TOKEN_EXCHANGE_FAILED,\n          e.response,\n          e.url,\n          e.options\n        );\n      });\n  }\n\n  /**\n   * ensures that the authorizedCrossOriginDomains are obtained from the portal and cached\n   * so we can check them later.\n   *\n   * @returns this\n   */\n  private fetchAuthorizedDomains() {\n    // if this token is for a specific server or we don't have a portal\n    // don't get the portal info because we cant get the authorizedCrossOriginDomains\n    if (this.server || !this.portal) {\n      return Promise.resolve(this);\n    }\n\n    return this.getPortal().then((portalInfo) => {\n      /**\n       * Specific domains can be configured as secure.esri.com or https://secure.esri.com this\n       * normalizes to https://secure.esri.com so we can use startsWith later.\n       */\n      if (\n        portalInfo.authorizedCrossOriginDomains &&\n        portalInfo.authorizedCrossOriginDomains.length\n      ) {\n        this.trustedDomains = portalInfo.authorizedCrossOriginDomains\n          .filter((d: string) => !d.startsWith(\"http://\"))\n          .map((d: string) => {\n            if (d.startsWith(\"https://\")) {\n              return d;\n            } else {\n              return `https://${d}`;\n            }\n          });\n      }\n      return this;\n    });\n  }\n}\n\n/**\n * @deprecated - Use {@linkcode ArcGISIdentityManager}.\n * @internal\n *\n */ /* istanbul ignore next */\nfunction UserSession(options: IArcGISIdentityManagerOptions) {\n  console.log(\n    \"DEPRECATED:, 'UserSession' is deprecated. Use 'ArcGISIdentityManager' instead.\"\n  );\n\n  return new ArcGISIdentityManager(options);\n}\n\n/**\n * @deprecated - Use {@linkcode ArcGISIdentityManager.beginOAuth2}.\n * @internal\n *\n */ /* istanbul ignore next */\nUserSession.beginOAuth2 = function (\n  ...args: Parameters<typeof ArcGISIdentityManager.beginOAuth2>\n) {\n  console.warn(\n    \"DEPRECATED:, 'UserSession.beginOAuth2' is deprecated. Use 'ArcGISIdentityManager.beginOAuth2' instead.\"\n  );\n\n  return ArcGISIdentityManager.beginOAuth2(...args);\n};\n\n/**\n * @deprecated - Use {@linkcode ArcGISIdentityManager.completeOAuth2}.\n * @internal\n *\n */ /* istanbul ignore next */\nUserSession.completeOAuth2 = function (\n  ...args: Parameters<typeof ArcGISIdentityManager.completeOAuth2>\n) {\n  console.warn(\n    \"DEPRECATED:, 'UserSession.completeOAuth2()' is deprecated. Use 'ArcGISIdentityManager.completeOAuth2()' instead.\"\n  );\n  if (args.length <= 1) {\n    console.warn(\n      \"WARNING:, 'UserSession.completeOAuth2()' is now async and returns a promise the resolves to an instance of `ArcGISIdentityManager`.\"\n    );\n  }\n\n  return ArcGISIdentityManager.completeOAuth2(...args);\n};\n\n/**\n * @deprecated - Use {@linkcode ArcGISIdentityManager.fromParent}.\n * @internal\n *\n */ /* istanbul ignore next */\nUserSession.fromParent = function (\n  ...args: Parameters<typeof ArcGISIdentityManager.fromParent>\n) {\n  console.warn(\n    \"DEPRECATED:, 'UserSession.fromParent' is deprecated. Use 'ArcGISIdentityManager.fromParent' instead.\"\n  );\n\n  return ArcGISIdentityManager.fromParent(...args);\n};\n\n/**\n * @deprecated - Use {@linkcode ArcGISIdentityManager.authorize}.\n * @internal\n *\n */ /* istanbul ignore next */\nUserSession.authorize = function (\n  ...args: Parameters<typeof ArcGISIdentityManager.authorize>\n) {\n  console.warn(\n    \"DEPRECATED:, 'UserSession.authorize' is deprecated. Use 'ArcGISIdentityManager.authorize' instead.\"\n  );\n\n  return ArcGISIdentityManager.authorize(...args);\n};\n\n/**\n * @deprecated - Use {@linkcode ArcGISIdentityManager.exchangeAuthorizationCode}.\n * @internal\n *\n */ /* istanbul ignore next */\nUserSession.exchangeAuthorizationCode = function (\n  ...args: Parameters<typeof ArcGISIdentityManager.exchangeAuthorizationCode>\n) {\n  console.warn(\n    \"DEPRECATED:, 'UserSession.exchangeAuthorizationCode' is deprecated. Use 'ArcGISIdentityManager.exchangeAuthorizationCode' instead.\"\n  );\n\n  return ArcGISIdentityManager.exchangeAuthorizationCode(...args);\n};\n\n/**\n * @deprecated - Use {@linkcode ArcGISIdentityManager.fromCredential}.\n * @internal\n *\n */ /* istanbul ignore next */\nUserSession.fromCredential = function (\n  ...args: Parameters<typeof ArcGISIdentityManager.fromCredential>\n) {\n  console.log(\n    \"DEPRECATED:, 'UserSession.fromCredential' is deprecated. Use 'ArcGISIdentityManager.fromCredential' instead.\"\n  );\n\n  console.warn(\n    \"WARNING:, 'UserSession.fromCredential' now requires a `ServerInfo` object from the JS API as a second parameter.\"\n  );\n\n  return ArcGISIdentityManager.fromCredential(...args);\n};\n\n/**\n * @deprecated - Use {@linkcode ArcGISIdentityManager.deserialize}.\n * @internal\n *\n */ /* istanbul ignore next */\nUserSession.deserialize = function (\n  ...args: Parameters<typeof ArcGISIdentityManager.deserialize>\n) {\n  console.log(\n    \"DEPRECATED:, 'UserSession.deserialize' is deprecated. Use 'ArcGISIdentityManager.deserialize' instead.\"\n  );\n\n  return ArcGISIdentityManager.deserialize(...args);\n};\n\nexport { UserSession };\n", "/**\n * These statuses are based on what are returned from the job request task and have been into an enum type.\n *\n * Reference https://developers.arcgis.com/rest/services-reference/enterprise/geoanalytics-checking-job-status.htm\n */\nexport enum JOB_STATUSES {\n  Success = \"Succeeded\",\n  Failed = \"Failed\",\n  Waiting = \"Waiting\",\n  Cancelled = \"Cancelled\",\n  Cancelling = \"Cancelling\",\n  New = \"New\",\n  Executing = \"Executing\",\n  Submitted = \"Submitted\",\n  Failure = \"Failure\",\n  TimedOut = \"TimedOut\",\n  Error = \"Error\",\n  Status = \"Etatus\",\n  Unknown = \"Unknown\"\n}\n", "export const DEFAULT_START_BASEMAP_STYLE_SESSION_URL =\n  \"https://basemapstyles-api.arcgis.com/arcgis/rest/services/styles/v2/sessions/start\";\n\nexport const DEFAULT_SAFETY_MARGIN = 5 * 60; // Default to 5 minutes in seconds\n\nexport const DEFAULT_CHECK_EXPIRATION_INTERVAL = 10; // Default to 10 seconds\n\nexport const DEFAULT_DURATION = 12 * 60 * 60; // Default to 12 hours in seconds\n", "import { IAuthenticationManager, request } from \"@esri/arcgis-rest-request\";\nimport { StyleFamily } from \"../types/StyleFamily.js\";\nimport { DEFAULT_DURATION } from \"./defaults.js\";\n\nexport interface IRequestNewSessionParams {\n  startSessionUrl: string;\n  authentication: IAuthenticationManager | string;\n  styleFamily?: StyleFamily;\n  duration?: number;\n}\n\nexport interface IStartSessionResponse {\n  sessionToken: string;\n  endTime: number;\n  startTime: number;\n  styleFamily: StyleFamily;\n}\n\nexport function startNewSession({\n  startSessionUrl,\n  authentication,\n  styleFamily = \"arcgis\",\n  duration = DEFAULT_DURATION\n}: IRequestNewSessionParams): Promise<IStartSessionResponse> {\n  return request(startSessionUrl, {\n    httpMethod: \"GET\",\n    authentication: authentication,\n    params: { styleFamily, durationSeconds: duration }\n  });\n}\n", "import { DEFAULT_SAFETY_MARGIN } from \"./defaults.js\";\n\nexport function determineSafetyMargin(\n  duration: number | undefined,\n  safetyMargin: number | undefined\n): number {\n  if (safetyMargin) {\n    return safetyMargin;\n  }\n\n  // common cases are\n  // duration is 60 seconds, this will return a 1 second safety margin\n  // duration is 43200 seconds, this will return a 300 second (5 minutes) safety margin\n  return Math.min(Math.max(duration / 100, 1), DEFAULT_SAFETY_MARGIN);\n}\n", "import mitt from \"mitt\";\n\nimport { IAuthenticationManager } from \"@esri/arcgis-rest-request\";\nimport { StyleFamily } from \"./types/StyleFamily.js\";\nimport {\n  IStartSessionResponse,\n  startNewSession\n} from \"./utils/startNewSession.js\";\nimport { Writable } from \"./utils/writable.js\";\nimport { determineSafetyMargin } from \"./utils/detemineSafetyMargin.js\";\nimport {\n  DEFAULT_DURATION,\n  DEFAULT_CHECK_EXPIRATION_INTERVAL\n} from \"./utils/defaults.js\";\n\nexport interface IBasemapSessionParams {\n  token: string;\n  startSessionUrl: string;\n  styleFamily: StyleFamily;\n  authentication: IAuthenticationManager | string;\n  expires: Date;\n  startTime: Date;\n  endTime: Date;\n  safetyMargin?: number;\n  duration?: number;\n  autoRefresh?: boolean;\n}\n\nexport interface IStartSessionParams {\n  styleFamily?: StyleFamily;\n  authentication: IAuthenticationManager | string;\n  safetyMargin?: number;\n  duration?: number;\n  autoRefresh?: boolean;\n\n  /**\n   * The URL to start the session. If not provided, it will use the default URL.\n   * @private\n   */\n  startSessionUrl?: string;\n}\n\n/**\n * The base class for all basemap sessions. This class implements the {@linkcode IAuthenticationManager} interface and provides methods to start, refresh, and check the expiration of a session.\n * This is not intended to be used directly, but instead is extended by other classes such as {@linkcode BasemapStyleSession} and {@linkcode StaticBasemapTilesSession}.\n *\n * @abstract\n * @implements {IAuthenticationManager}\n */\nexport abstract class BaseSession implements IAuthenticationManager {\n  // the static methods for event handlers are used to provide doc via typedoc and do not need to be tested.\n  /* istanbul ignore next -- @preserve */\n  /**\n   * Event handler for when an error occurs during session management.\n   */\n  static readonly error = function error(e: Error): void {}; // eslint-disable-line @typescript-eslint/no-empty-function\n\n  // the static methods for event handlers are used to provide doc via typedoc and do not need to be tested.\n  /* istanbul ignore next -- @preserve */\n  /**\n   * Event handler for when the current session expires and the session token it no longer valid. This event will only fire if {@linkcode BaseSession.checkingExpirationTime}\n   * is `true` which is the default. Once this event fires, {@linkcode BaseSession.checkingExpirationTime} will be set to `false` until the session is refreshed with\n   * {@linkcode BaseSession.refreshCredentials}.\n   *\n   * @event expired\n   * @param e - The parameters for the expired event.\n   * @param e.token - The session token that expired.\n   * @param e.startTime - The start time of the session.\n   * @param e.endTime - The end time of the session.\n   * @param e.expires - The expiration time of the session.\n   */\n  static readonly expired = function expired(e: {\n    token: string;\n    startTime: Date;\n    endTime: Date;\n    expires: Date;\n  }): void {}; // eslint-disable-line @typescript-eslint/no-empty-function\n\n  // the static methods for event handlers are used to provide doc via typedoc and do not need to be tested.\n  /* istanbul ignore next -- @preserve */\n  /**\n   * Event handler for when a session refreshes and a new `token` is available.\n   *\n   * @event refreshed\n   * @param e. - The parameters for the refreshed event.\n   * @param e.previous - The previous session details.\n   * @param e.previous.token - The previous session token.\n   * @param e.previous.startTime - The start time of the previous session.\n   * @param e.previous.endTime - The end time of the previous session.\n   * @param e.previous.expires - The expiration time of the previous session.\n   * @param e.current - The current session details.\n   * @param e.current.token - The current session token.\n   * @param e.current.startTime - The start time of the current token.\n   * @param e.current.endTime - The end time of the current session.\n   * @param e.current.expires - The expiration time of the current token.\n   */\n  static readonly refreshed = function refreshed(e: {\n    previous: {\n      token: string;\n      startTime: Date;\n      endTime: Date;\n      expires: Date;\n    };\n    current: {\n      token: string;\n      startTime: Date;\n      endTime: Date;\n      expires: Date;\n    };\n  }): void {}; // eslint-disable-line @typescript-eslint/no-empty-function\n\n  /**\n   * The portal URL that the session is associated with. This generally is not used but exists to implement the `IAuthenticationManager` interface.\n   */\n  readonly portal: string;\n\n  /**\n   * The style family of the session. This is used to determine the type of basemap styles that are available.\n   */\n  readonly styleFamily: StyleFamily;\n\n  /**\n   * The authentication manager or token used for the session.\n   * This can be an instance of {@linkcode ApiKeyManager}, {@linkcode ArcGISIdentityManager}, {@linkcode ApplicationCredentialsManager} or a string token.\n   */\n  readonly authentication: IAuthenticationManager | string;\n\n  /**\n   * The expiration date of the session. This is the {@linkcode BaseSession.endTime} minus the {@linkcode BaseSession.safetyMargin}. This is used internally to determine if the session is expired.\n   */\n  readonly expires: Date;\n\n  /**\n   * The start time of the session. This is the time returned from the API when the session war started.\n   */\n  readonly startTime: Date;\n\n  /**\n   * The end time of the session. This is the time returned from the API when the session will end.\n   */\n  readonly endTime: Date;\n\n  /**\n   * The token for the session.\n   */\n  readonly token: string;\n\n  /**\n   * The URL used to start the session.\n   */\n  readonly startSessionUrl: string;\n\n  /**\n   * The safety margin in milliseconds. This subtracted from the {@linkcode BaseSession.endTime} to get the {@linkcode BaseSession.expiration}.\n   */\n  readonly safetyMargin: number;\n\n  /**\n   * The duration of the session in seconds. This is used to determine how long the session will last when the session is refreshed.\n   */\n  readonly duration: number;\n\n  /**\n   * The interval at which to check the expiration time of the session. This is always 10 seconds or 1/100th of the duration, whichever is smaller.\n   */\n  private readonly expirationCheckInterval: number;\n\n  /**\n   * The ID of the timer used to check the expiration time of the session.\n   */\n  private expirationTimerId: any = null;\n\n  /**\n   * A pending session that is being refreshed. This is used to prevent multiple refreshes from happening at the same time.\n   */\n  private pendingSession: Promise<IStartSessionResponse> | null = null;\n\n  /**\n   * Internal instance of [`mitt`](https://github.com/developit/mitt) used for event handlers. It is recommended to use {@linkcode BasemapSession.on}, {@linkcode BasemapSession.off} or {@linkcode BasemapSession.once} instead of `emitter.`\n   */\n  private emitter: any;\n\n  /**\n   * A handler that is used to automatically refresh the session when it expires.\n   */\n  private autoRefreshHandler: (() => void) | null = null;\n\n  /**\n   * Creates a new instance of the BaseSession class. Generally you should not create an instance of this class directly, but instead use the static methods to start a session or deserialize a session.\n   *\n   * You may need to create an instance of this class directly if you are  not using the built in deserialize method.\n   *\n   * @param params - The parameters for the session.\n   * @param params.startSessionUrl - The URL to start the session.\n   * @param params.token - The token for the session.\n   * @param params.styleFamily - The style family of the session.\n   * @param params.authentication - The authentication manager or token used for the session.\n   * @param params.expires - The expiration date of the session.\n   * @param params.startTime - The start time of the session.\n   * @param params.endTime - The end time of the session.\n   * @param params.safetyMargin - The safety margin in milliseconds.\n   * @param params.duration - Indicates if this is a test session.\n   */\n  constructor(params: IBasemapSessionParams) {\n    this.startSessionUrl = params.startSessionUrl;\n    this.token = params.token;\n    this.styleFamily = params.styleFamily || \"arcgis\";\n    this.authentication = params.authentication;\n    this.duration = params.duration || DEFAULT_DURATION;\n    this.startTime = params.startTime;\n    this.endTime = params.endTime;\n    this.expires = params.expires;\n    this.safetyMargin = params.safetyMargin;\n    this.expirationCheckInterval =\n      Math.min(this.duration / 100, DEFAULT_CHECK_EXPIRATION_INTERVAL) * 1000;\n    this.emitter = mitt();\n  }\n\n  /**\n   * Checks if the session is expired. If it is expired, it emits an \"expired\" event and disables expiration time checking. The event will fire **before** the method returns true.\n   *\n   * @returns {boolean} - Returns true if the session is expired, otherwise false.\n   */\n  isSessionExpired() {\n    if (this.isExpired) {\n      this.disableCheckingExpirationTime();\n\n      this.emitter.emit(\"expired\", {\n        token: this.token,\n        startTime: this.startTime,\n        endTime: this.endTime,\n        expires: this.expires\n      });\n    }\n\n    return this.isExpired;\n  }\n\n  /**\n   * Starts checking the expiration time of the session. This will check the expiration time immediately and then on an interval.\n   * If the session is expired, it will emit an \"expired\" event.\n   */\n  enableCheckingExpirationTime() {\n    const check = () => {\n      this.isSessionExpired();\n    };\n\n    if (!this.expirationTimerId) {\n      this.expirationTimerId = setInterval(\n        check,\n        // check every 10 seconds or 1/100th of the duration, whichever is smaller\n        this.expirationCheckInterval\n      ); // check immediately then on an interval\n    }\n\n    setTimeout(() => {\n      check(); // check immediately after starting the interval\n    }, 10);\n\n    return this.expirationTimerId; // return the timer ID so it can be stopped later\n  }\n\n  /**\n   * Stops checking the expiration time of the session. This will clear the interval that was set by {@linkcode BaseSession.startCheckingExpirationTime}.\n   */\n  disableCheckingExpirationTime() {\n    if (this.expirationTimerId) {\n      clearInterval(this.expirationTimerId);\n      this.expirationTimerId = null;\n    }\n  }\n\n  /**\n   * Starts a new session using the provided parameters and returns an instance of the session class.\n   *\n   * @param params - The parameters for starting the session.\n   * @param SessionClass - The class to use for the session.\n   * @returns A promise that resolves to an instance of the session class.\n   */\n  protected static async startSession<T extends BaseSession>(\n    {\n      startSessionUrl,\n      styleFamily = \"arcgis\",\n      authentication,\n      safetyMargin,\n      duration = DEFAULT_DURATION,\n      autoRefresh = false\n    }: {\n      startSessionUrl?: string;\n      styleFamily?: StyleFamily;\n      authentication: IAuthenticationManager | string;\n      safetyMargin?: number;\n      duration?: number;\n      autoRefresh?: boolean;\n    },\n    SessionClass: new (params: IBasemapSessionParams) => T\n  ): Promise<T> {\n    if (duration < 10) {\n      throw new Error(\"Session duration must be at least 10 seconds.\");\n    }\n\n    if (duration > 43200) {\n      throw new Error(\n        \"Session duration cannot exceed 12 hours (43200 seconds).\"\n      );\n    }\n\n    const sessionResponse = await startNewSession({\n      startSessionUrl,\n      styleFamily,\n      authentication,\n      duration\n    });\n    const actualSafetyMargin = determineSafetyMargin(duration, safetyMargin);\n\n    const session = new SessionClass({\n      startSessionUrl: startSessionUrl,\n      token: sessionResponse.sessionToken,\n      styleFamily,\n      authentication,\n      safetyMargin: actualSafetyMargin,\n      expires: new Date(sessionResponse.endTime - actualSafetyMargin * 1000),\n      startTime: new Date(sessionResponse.startTime),\n      endTime: new Date(sessionResponse.endTime),\n      duration\n    });\n\n    session.enableCheckingExpirationTime();\n\n    if (autoRefresh) {\n      session.enableAutoRefresh();\n    }\n\n    return session as T;\n  }\n\n  /**\n   * Indicates if the session is currently checking for expiration time.\n   *\n   * @returns {boolean} - Returns true if the session is checking for expiration time, otherwise false.\n   */\n  get checkingExpirationTime(): boolean {\n    return !!this.expirationTimerId;\n  }\n\n  /**\n   * Returns the number of seconds until the session is no longer valid rounded down. If the session is expired, it will return 0.\n   */\n  get secondsUntilExpiration(): number {\n    return Math.floor(this.millisecondsUntilExpiration / 1000);\n  }\n\n  /**\n   * Returns the number of milliseconds until the session token is no longer valid. If the session is expired, it will return 0.\n   */\n  get millisecondsUntilExpiration(): number {\n    if (this.isExpired) {\n      return 0;\n    }\n\n    const now = new Date();\n    const millisecondsLeft = this.endTime.getTime() - now.getTime();\n\n    return millisecondsLeft;\n  }\n\n  /**\n   * Checks if the session is expired.\n   *\n   */\n  get isExpired(): boolean {\n    return this.expires < new Date();\n  }\n\n  /**\n   * Gets the session token. If the session is expired, it will refresh the credentials and return the new token.\n   *\n   * @returns A promise that resolves to the session token.\n   */\n  getToken(): Promise<string> {\n    if (this.isExpired) {\n      return this.refreshCredentials().then(() => this.token);\n    }\n\n    return Promise.resolve(this.token);\n  }\n\n  /**\n   * Indicates if the session can be refreshed. This is always true for this basemap sessions.\n   *\n   * @returns {boolean} - Always returns true.\n   */\n  get canRefresh(): boolean {\n    return true;\n  }\n\n  /**\n   * Indicates if the session is set to automatically refresh when it expires.\n   *\n   * @returns {boolean} - Returns true if auto-refresh is enabled, otherwise false.\n   */\n  get autoRefresh(): boolean {\n    return !!this.autoRefreshHandler && !!this.expirationTimerId;\n  }\n\n  /**\n   * Refreshes the session credentials by starting a new session.\n   * This will emit a \"refreshed\" event with the previous and current session details.\n   *\n   * @returns A promise that resolves to the current instance of the session.\n   */\n  async refreshCredentials(): Promise<this> {\n    if (this.pendingSession) {\n      // if there is a pending session, wait for it to resolve\n      await this.pendingSession;\n      return this;\n    }\n\n    // @TODO switch this to structured clone when we upgrade to Node 20+ types so we don't have to parse the dates later\n    const previous = JSON.parse(\n      JSON.stringify({\n        token: this.token,\n        startTime: this.startTime,\n        endTime: this.endTime,\n        expires: this.expires\n      })\n    );\n\n    try {\n      this.pendingSession = startNewSession({\n        startSessionUrl: this.startSessionUrl,\n        styleFamily: this.styleFamily,\n        authentication: this.authentication,\n        duration: this.duration\n      });\n\n      const newSession = await this.pendingSession;\n\n      this.pendingSession = null; // reset the pending session\n\n      this.setToken(newSession.sessionToken);\n      this.setStartTime(new Date(newSession.startTime));\n      this.setEndTime(new Date(newSession.endTime));\n      this.setExpires(new Date(newSession.endTime - this.safetyMargin * 1000));\n\n      this.enableCheckingExpirationTime(); // restart checking expiration time after refreshing credentials\n\n      this.emitter.emit(\"refreshed\", {\n        previous: {\n          token: previous.token,\n          startTime: new Date(previous.startTime),\n          endTime: new Date(previous.endTime),\n          expires: new Date(previous.expires)\n        },\n        current: {\n          token: this.token,\n          startTime: this.startTime,\n          endTime: this.endTime,\n          expires: this.expires\n        }\n      });\n    } catch (error) {\n      this.emitter.emit(\"error\", error);\n      throw error;\n    }\n\n    return this;\n  }\n  /**\n   * Enables auto-refresh for the session. This will automatically refresh the session when it expires.\n   * It will also start checking the expiration time of the session if it is not already started via {@linkcode BaseSession.enableCheckingExpirationTime}.\n   */\n  enableAutoRefresh() {\n    if (!this.expirationTimerId) {\n      this.enableCheckingExpirationTime();\n    }\n\n    this.autoRefreshHandler = () => {\n      this.refreshCredentials().catch((error: Error) => {\n        this.emitter.emit(\"error\", error);\n      });\n    };\n\n    this.on(\"expired\", this.autoRefreshHandler);\n  }\n\n  /**\n   * Disables auto-refresh for the session. This will stop automatically refreshing the session when it expires.\n   * This will  **not** stop checking the expiration time of the session. If you want to stop automated expiration\n   * checking, call {@linkcode BaseSession.disableCheckingExpirationTime} after calling this method.\n   */\n  disableAutoRefresh() {\n    if (this.autoRefreshHandler) {\n      this.off(\"expired\", this.autoRefreshHandler);\n      this.autoRefreshHandler = null;\n    }\n  }\n\n  /**\n   * Removes all event listeners and disables auto-refresh and expiration time checking. This is useful for cleaning up the session when it is no longer needed or replaced with a new session.\n   */\n  destroy() {\n    this.disableAutoRefresh();\n    this.disableCheckingExpirationTime();\n    this.emitter.off(\"expired\");\n    this.emitter.off(\"refreshed\");\n    this.emitter.off(\"error\");\n    this.emitter.off(\"*\");\n  }\n\n  /**\n   * A handler that listens for an eventName and returns custom handler.\n   *\n   * @param eventName A string of what event to listen for.\n   * @param handler A function of what to do when eventName was called.\n   */\n  on(event: \"refreshed\", handler: typeof BaseSession.refreshed): void;\n  on(event: \"expired\", handler: typeof BaseSession.expired): void;\n  on(event: \"error\", handler: typeof BaseSession.error): void;\n  on(\n    eventName: string,\n    handler:\n      | typeof BaseSession.refreshed\n      | typeof BaseSession.expired\n      | typeof BaseSession.error\n  ) {\n    this.emitter.on(eventName, handler);\n    this.isSessionExpired(); // check if the session is expired immediately after adding the handler\n  }\n\n  /**\n   * A handler that listens for an event once and returns a custom handler. Events listened to with this method cannot be removed with {@linkcode BasemapSession.off}.\n   *\n   * @param eventName A string of what event to listen for.\n   * @param handler A function of what to do when eventName was called.\n   */\n  once(event: \"refreshed\", handler: typeof BaseSession.refreshed): void;\n  once(event: \"expired\", handler: typeof BaseSession.expired): void;\n  once(event: \"error\", handler: typeof BaseSession.error): void;\n  once(\n    eventName: string,\n    handler:\n      | typeof BaseSession.refreshed\n      | typeof BaseSession.expired\n      | typeof BaseSession.error\n  ) {\n    const fn = (e: any) => {\n      this.emitter.off(eventName, fn);\n      handler(e);\n    };\n\n    this.emitter.on(eventName, fn);\n  }\n\n  /**\n   * A handler that will remove a listener from a given event.\n   *\n   * @param eventName A string of what event to listen for.\n   * @param handler A function of what to do when eventName was called.\n   */\n  off(event: \"refreshed\", handler: typeof BaseSession.refreshed): void;\n  off(event: \"expired\", handler: typeof BaseSession.expired): void;\n  off(event: \"error\", handler: typeof BaseSession.error): void;\n  off(\n    eventName: string,\n    handler:\n      | typeof BaseSession.refreshed\n      | typeof BaseSession.expired\n      | typeof BaseSession.error\n  ) {\n    this.emitter.off(eventName, handler);\n  }\n\n  /**\n   * These private methods are used to set the internal state of the session.\n   */\n  private setToken(token: string) {\n    (this as Writable<typeof this>).token = token;\n  }\n  private setStartTime(startTime: Date) {\n    (this as Writable<typeof this>).startTime = startTime;\n  }\n  private setEndTime(endTime: Date) {\n    (this as Writable<typeof this>).endTime = endTime;\n  }\n  private setExpires(expires: Date) {\n    (this as Writable<typeof this>).expires = expires;\n  }\n}\n", "import {\n  BaseSession,\n  IBasemapSessionParams,\n  IStartSessionParams\n} from \"./BaseSession.js\";\nimport { DEFAULT_START_BASEMAP_STYLE_SESSION_URL } from \"./utils/defaults.js\";\n\n/**\n * `BasemapStyleSession` is a class that extends {@linkcode BaseSession} to manage sessions\n * for basemap styles. It provides methods to {@linkcode BasemapStyleSession.start} a new session\n * which should be used instead of constructing a new instance directly.\n *\n * @class BasemapStyleSession\n * @extends BaseSession\n */\nexport class BasemapStyleSession extends BaseSession {\n  /**\n   * Creates an instance of `BasemapStyleSession`. Constructing `BasemapStyleSession` directly is discouraged.\n   * Instead, use the static method {@linkcode BasemapStyleSession.start} to start a new session.\n   */\n  constructor(params: IBasemapSessionParams) {\n    super(params);\n  }\n\n  /**\n   * Starts a new basemap style session.\n   */\n  static async start(params: IStartSessionParams) {\n    return BaseSession.startSession<BasemapStyleSession>(\n      {\n        ...params,\n        startSessionUrl:\n          params?.startSessionUrl || DEFAULT_START_BASEMAP_STYLE_SESSION_URL\n      },\n      BasemapStyleSession as new (\n        params: IBasemapSessionParams\n      ) => BasemapStyleSession\n    );\n  }\n}\n", "import {\r\n  BasemapStyleSession as ArcgisRestBasemapStyleSession,\r\n  type IStartSessionParams,\r\n  type StyleFamily,\r\n} from '@esri/arcgis-rest-basemap-sessions';\r\nimport { ApiKeyManager } from '@esri/arcgis-rest-request';\r\n\r\nimport mitt, { type Emitter } from 'mitt';\r\n\r\n/**\r\n * Options for initializing a BasemapStyleSession\r\n */\r\nexport interface IBasemapSessionOptions {\r\n  /** Access token for authentication. The token must be from an ArcGIS Location Platform account and have the Basemaps privelege. */\r\n  token: string;\r\n  /** Style family for the session. */\r\n  styleFamily: StyleFamily;\r\n  /** Duration in seconds for the session. */\r\n  duration?: number;\r\n  /** Toggles auto-refresh functionality. */\r\n  autoRefresh?: boolean;\r\n  /** Safety margin in seconds to refresh the session before the `endTime`. */\r\n  safetyMargin?: number;\r\n  /**\r\n   * @internal\r\n   */\r\n  startSessionUrl?: string;\r\n}\r\n\r\n/**\r\n * The object returned from the session start request.\r\n */\r\nexport type SessionResponse = {\r\n  token: string;\r\n  endTime: Date;\r\n  startTime: Date;\r\n  expires: Date;\r\n};\r\n/**\r\n * The object returned by the `BasemapSessionRefreshed` event.\r\n */\r\nexport type SessionRefreshedData = {\r\n  previous: SessionResponse;\r\n  current: SessionResponse;\r\n};\r\n\r\n/**\r\n * Type representing the events emitted by the BasemapSession class.\r\n */\r\nexport type BasemapSessionEventMap = {\r\n  /**\r\n   * Event emitted when the basemap session is refreshed.\r\n   */\r\n  BasemapSessionRefreshed: SessionRefreshedData;\r\n  /**\r\n   * Event emitted when the basemap session expires.\r\n   */\r\n  BasemapSessionExpired: SessionResponse;\r\n  /**\r\n   * Event emitted when there is an error with the basemap session.\r\n   */\r\n  BasemapSessionError: Error;\r\n};\r\n\r\n/**\r\n * Manages the creation and lifecycle of a basemap session for use with {@link BasemapStyle}.\r\n *\r\n * The `BasemapSession` class provides:\r\n * - Session token management with auto-refresh capabilities\r\n * - Event handling for session lifecycle (refresh, expiration, errors)\r\n * - Integration with ArcGIS Basemap Styles Service\r\n *\r\n * \\> An [access token](https://developers.arcgis.com/maplibre-gl-js/access-tokens/) is required to use basemap sessions.\r\n *The token must be from an [ArcGIS Location Platform account](https://location.arcgis.com) and have the Basemaps [privilege](https://developers.arcgis.com/documentation/security-and-authentication/reference/privileges/).\r\n *\r\n * ```javascript\r\n * // Create and start a session\r\n * const basemapSession = await BasemapSession.start({\r\n *   token: \"your-arcgis-token\",\r\n *   styleFamily: \"arcgis\",\r\n *   duration: 3600,\r\n *   autoRefresh: true\r\n * });\r\n *\r\n * // Listen for session events\r\n * basemapSession.on(\"BasemapSessionRefreshed\", (e) => {\r\n *   console.log(\"Session refreshed\", e.current.token);\r\n * });\r\n *\r\n * basemapSession.on(\"BasemapSessionExpired\", (e) => {\r\n *   console.log(\"Session expired\", e.token);\r\n * });\r\n *\r\n * basemapSession.on(\"BasemapSessionError\", (e) => {\r\n *   console.error(\"Session error\", e);\r\n * });\r\n * ```\r\n */\r\nexport class BasemapSession {\r\n  private _session?: ArcgisRestBasemapStyleSession;\r\n  private readonly _options: IBasemapSessionOptions;\r\n  private readonly _emitter: Emitter<BasemapSessionEventMap> = mitt();\r\n  private _parentToken: string;\r\n\r\n  /**\r\n   * Creates a new `BasemapSession` instance but does not start it. Use the {@link BasemapSession.initialize} method to begin the session manually. Creating basemap sessions in this way using the constructor directly is discouraged. The recommended method is to use {@link BasemapSession.start}.\r\n   * ```javascript\r\n   * const basemapSession = new BasemapSession({\r\n   *   token: 'your-arcgis-token',\r\n   *   styleFamily: 'arcgis-navigation',\r\n   *   duration: 3600,\r\n   *   autoRefresh: false\r\n   * });\r\n   * await session.initialize();\r\n   * ```\r\n   * @param options - Configuration options for the session\r\n   */\r\n  constructor(options: IBasemapSessionOptions) {\r\n    if (!options?.token) throw new Error('A valid ArcGIS access token is required to start a session.');\r\n    if (!options.styleFamily) throw new Error('BasemapSession must be initialized with a styleFamily: `arcgis` or `open`.');\r\n    this._parentToken = options.token;\r\n    this._options = options;\r\n  }\r\n\r\n  /**\r\n   * Gets the current session token.\r\n   */\r\n  get token(): string {\r\n    if (!this._session?.token) {\r\n      throw new Error('Session token not available');\r\n    }\r\n    return this._session.token;\r\n  }\r\n\r\n  /**\r\n   * Gets the sessions {@link StyleFamily} value.\r\n   */\r\n  get styleFamily(): StyleFamily | undefined {\r\n    return this._session ? this._session.styleFamily : this._options.styleFamily;\r\n  }\r\n\r\n  /**\r\n   * Gets the functional end time of the session. This is equivalent to the session end time plus the safety margin, and is used to tell when the session should be refreshed.\r\n   */\r\n  get safeEndTime(): Date {\r\n    if (!this._session) {\r\n      throw new Error('Unable to get session expiration. Session not initialized.');\r\n    }\r\n    return this._session.expires;\r\n  }\r\n\r\n  /**\r\n   * Gets the session start time.\r\n   */\r\n  get startTime(): Date {\r\n    if (!this._session) throw new Error('Unable to get start time. Session not initialized.');\r\n    return this._session.startTime;\r\n  }\r\n\r\n  /**\r\n   * Gets the end time of the session returned by the basemap styles service.\r\n   */\r\n  get endTime(): Date {\r\n    if (!this._session) throw new Error('Unable to get end time. Session not initialized.');\r\n    return this._session.endTime;\r\n  }\r\n\r\n  /**\r\n   * Returns 'true' if the session is started, and false otherwise.\r\n   */\r\n  get isStarted(): boolean {\r\n    return Boolean(\r\n      this._session\r\n      && this._session.token !== undefined\r\n      && this._session.expires\r\n      && this._session.expires > new Date()\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Starts the session if it has not been started already.\r\n   *\r\n   * ```javascript\r\n   * const basemapSession = new BasemapSession({\r\n   *   token: 'your-arcgis-token',\r\n   *   styleFamily: 'arcgis-navigation',\r\n   *   duration: 3600,\r\n   *   autoRefresh: false\r\n   * });\r\n   * await session.initialize();\r\n   * ```\r\n   */\r\n  async initialize(): Promise<void> {\r\n    if (this._session) {\r\n      // Clean up existing session without disposing emitter\r\n      this._session.off('expired', this.expiredHandler);\r\n      this._session.off('refreshed', this.refreshedHandler);\r\n      this._session.off('error', this.errorHandler);\r\n      this._emitter.all.clear();\r\n    }\r\n\r\n    const sessionParams: IStartSessionParams = {\r\n      authentication: ApiKeyManager.fromKey(this._parentToken),\r\n      autoRefresh: this._options.autoRefresh ? true : false,\r\n      duration: this._options.duration,\r\n      safetyMargin: this._options.safetyMargin,\r\n      styleFamily: this._options.styleFamily,\r\n      startSessionUrl: this._options.startSessionUrl,\r\n    };\r\n\r\n    if (sessionParams.autoRefresh) {\r\n      console.warn('Auto-refresh is enabled. Your basemap session will automatically refresh once the \\'duration\\' elapses.');\r\n    }\r\n\r\n    this._session = await ArcgisRestBasemapStyleSession.start(sessionParams);\r\n    this.setupEventListeners();\r\n  }\r\n\r\n  /**\r\n   * Manually refresh the session token.\r\n   * @example\r\n   * ```javascript\r\n   * basemapSession.on(\"BasemapSessionExpired\", () => {\r\n   *   console.log('Session expired');\r\n   *   // Manually refresh the session token using the refresh method.\r\n   *   basemapSession.refresh();\r\n   * });\r\n   * ```\r\n   */\r\n  async refresh(): Promise<void> {\r\n    if (!this._session) {\r\n      throw new Error('Session not initialized');\r\n    }\r\n    try {\r\n      this._session = await this._session.refreshCredentials();\r\n    }\r\n    catch (error) {\r\n      this._emitter.emit('BasemapSessionError', error as Error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  private setupEventListeners(): void {\r\n    if (!this._session) return;\r\n\r\n    this._session.on('expired', this.expiredHandler);\r\n\r\n    this._session.on('refreshed', this.refreshedHandler);\r\n\r\n    this._session.on('error', this.errorHandler);\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  private expiredHandler = (e: SessionResponse): void => {\r\n    this._emitter.emit('BasemapSessionExpired', e);\r\n  };\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  private refreshedHandler = (e: SessionRefreshedData): void => {\r\n    this._emitter.emit('BasemapSessionRefreshed', e);\r\n  };\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  private errorHandler = (e: Error): void => {\r\n    this._emitter.emit('BasemapSessionError', e);\r\n  };\r\n\r\n  /**\r\n   * Register an event handler\r\n   * @example\r\n   * ```typescript\r\n   * const basemapSession = await BasemapSession.start(options);\r\n   * basemapSession.on('BasemapSessionExpired', (data) => {\r\n   *   console.log('Session expired:', data);\r\n   * });\r\n   * ```\r\n   */\r\n  on<K extends keyof BasemapSessionEventMap>(\r\n    eventName: K,\r\n    handler: (data: BasemapSessionEventMap[K]) => void\r\n  ): void {\r\n    this._emitter.on(eventName, handler);\r\n  }\r\n\r\n  /**\r\n   * Unregister an event handler\r\n   * @example\r\n   * ```typescript\r\n   * const basemapSession = await BasemapSession.start(options);\r\n   * basemapSession.off('BasemapSessionExpired', handler);\r\n   * ```\r\n   */\r\n  off<K extends keyof BasemapSessionEventMap>(\r\n    eventName: K,\r\n    handler: (data: BasemapSessionEventMap[K]) => void\r\n  ): void {\r\n    this._emitter.off(eventName, handler);\r\n  }\r\n\r\n  /**\r\n   * Factory method that creates a new basemap session and starts it.\r\n   * @param options - Options for constructing the basemap session.\r\n   * @example\r\n   * ```javascript\r\n   * const basemapSession = await BasemapSession.start({\r\n   *   token: 'your-access-token',\r\n   *   styleFamily: 'arcgis',\r\n   *   autoRefresh: true\r\n   * });\r\n   * ```\r\n   */\r\n  static async start(options: IBasemapSessionOptions): Promise<BasemapSession> {\r\n    const basemapSession = new BasemapSession(options);\r\n\r\n    await basemapSession.initialize();\r\n    return basemapSession;\r\n  }\r\n}\r\n\r\nexport default BasemapSession;\r\n/*\r\n * Copyright 2025 Esri\r\n *\r\n * Licensed under the Apache License Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n", "import { ApiKeyManager, ArcGISIdentityManager, type ApplicationCredentialsManager } from '@esri/arcgis-rest-request';\n\n/**\n * Custom type to represent authentication managers used in ArcGIS REST JS.\n * @see https://developers.arcgis.com/arcgis-rest-js/authentication/\n */\nexport type RestJSAuthenticationManager = ApiKeyManager | ArcGISIdentityManager | ApplicationCredentialsManager;\n\ntype SupportedServiceType = 'FeatureService' | 'FeatureLayer' | 'VectorTileService' | 'VectorTileLayer';\n\nexport const checkItemId = (itemId: string): 'ItemId' | null => {\n  if (itemId.length == 32) return 'ItemId';\n\n  return null;\n};\nexport const checkServiceUrlType = (serviceUrl: string): SupportedServiceType | null => {\n  const httpRegex = /^https?:\\/\\//;\n  // const layerEndpointTest = \"(?<layers>[0-9]*\\/?)?$\";\n\n  if (httpRegex.test(serviceUrl)) {\n    const vectorServiceTest = /\\/VectorTileServer\\/?$/.exec(serviceUrl);\n    if (vectorServiceTest) {\n      return 'VectorTileService';\n    };\n\n    const featureServiceTest = /\\/FeatureServer\\/?([0-9]*\\/?)?$/.exec(serviceUrl);\n    if (featureServiceTest) {\n      if (featureServiceTest.length == 2 && featureServiceTest[1]) {\n        return 'FeatureLayer';\n      };\n      return 'FeatureService';\n    }\n  }\n\n  return null;\n};\nexport const cleanUrl = (url: string): string => {\n  if (url[url.length - 1] !== '/') {\n    url += '/';\n  }\n  return url;\n};\n\nexport const isRelativePath = (path: string): boolean => {\n  if (!path.startsWith('http:\\/\\/') && !path.startsWith('https:\\/\\/')) {\n    if (path.includes('../')) return true;\n  };\n  return false;\n};\n\nexport const parseRelativeUrl = (relativePath: string, base: string): string => {\n  const parsedResult = URL.parse(relativePath, base);\n  return parsedResult.href;\n};\n\nexport const toCdnUrl = (url: string): string | null => {\n  if (!url) return url || null;\n\n  url = normalizeArcGISOnlineOrgDomain(url);\n\n  url = url.replace(/^https?:\\/\\/www\\.arcgis\\.com/, 'https://cdn.arcgis.com');\n  url = url.replace(/^https?:\\/\\/devext\\.arcgis\\.com/, 'https://cdndev.arcgis.com');\n  url = url.replace(/^https?:\\/\\/qaext\\.arcgis\\.com/, 'https://cdnqa.arcgis.com');\n\n  return url;\n};\n/**\n * Replaces the AGOL org domains with non-org domains.\n * Borrowed from the JS Maps SDK\n */\nconst normalizeArcGISOnlineOrgDomain = (url: string): string => {\n  const prdOrg = /^https?:\\/\\/(?:cdn|[a-z\\d-]+\\.maps)\\.arcgis\\.com/i; // https://cdn.arcgis.com or https://x.maps.arcgis.com\n  const devextOrg = /^https?:\\/\\/(?:cdndev|[a-z\\d-]+\\.mapsdevext)\\.arcgis\\.com/i; // https://cdndev.arcgis.com or https://x.mapsdevext.arcgis.com\n  const qaOrg = /^https?:\\/\\/(?:cdnqa|[a-z\\d-]+\\.mapsqa)\\.arcgis\\.com/i; // https://cdnqa.arcgis.com or https://x.mapsqa.arcgis.com\n\n  // replace AGOL org domains with non-org domains\n  if (prdOrg.test(url)) {\n    url = url.replace(prdOrg, 'https://www.arcgis.com');\n  }\n  else if (devextOrg.test(url)) {\n    url = url.replace(devextOrg, 'https://devext.arcgis.com');\n  }\n  else if (qaOrg.test(url)) {\n    url = url.replace(qaOrg, 'https://qaext.arcgis.com');\n  }\n\n  return url;\n};\n\nexport const warn = (...args: any[]) => {\n  if (console && console.warn) {\n    console.warn.apply(console, args);\n  }\n};\n\nexport const checkAccessTokenType = (token: string): 'user' | 'app' | 'basemapSession' => {\n  if (!token || token.length === 0) return null;\n  // API key case -- also catches app tokens w/ personal privileges\n  const apiKeyPrefixes = ['AAPT', 'AAPK', 'AATK'];\n  for (const prefix of apiKeyPrefixes) if (token.startsWith(prefix)) return 'app';\n\n  // Session token for basemaps\n  const sessionTokenPrefixes = ['AAST'];\n  for (const prefix of sessionTokenPrefixes) if (token.startsWith(prefix)) return 'basemapSession';\n\n  // OAuth 2.0 style token\n  if (token.length == 256) return 'user';\n  else if (token.length === 128) return 'app'; // treated identically to API key\n\n  // Token type not recognized; default to 'app'\n  return 'app';\n};\nexport const wrapAccessToken = async (token: string): Promise<ApiKeyManager | ArcGISIdentityManager> => {\n  if (!token || token.length === 0) return null;\n  const tokenType = checkAccessTokenType(token);\n  // User tokens\n  if (tokenType === 'user') return await ArcGISIdentityManager.fromToken({ token: token });\n  // Session tokens\n  else if (tokenType === 'basemapSession') return ApiKeyManager.fromKey(token);\n  // API keys, app tokens\n  else return ApiKeyManager.fromKey(token);\n};\n/*\n * Copyright 2025 Esri\n *\n * Licensed under the Apache License Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n", "import { request } from '@esri/arcgis-rest-request';\nimport type { Map, StyleOptions, StyleSpecification, StyleSwapOptions, VectorTileSource } from 'maplibre-gl';\nimport mitt, { type Emitter } from 'mitt';\nimport { AttributionControl, type IAttributionControlOptions } from './AttributionControl';\nimport type BasemapSession from './BasemapSession';\nimport { checkItemId, wrapAccessToken, type RestJSAuthenticationManager } from './Util';\n\n/**\n * Structure of a BasemapStyle object. Go to {@link https://developers.arcgis.com/rest/basemap-styles/styles-self-get/ } to learn more.\n */\nexport type BasemapSelfResponse = {\n  customStylesUrl: string;\n  selfUrl: string;\n  languages: [CodeNamePair];\n  worldviews: [CodeNamePair];\n  places: [CodeNamePair];\n  styleFamilies: [CodeNamePair];\n  styles: [{\n    complete: boolean;\n    deprecated?: boolean;\n    name: string;\n    path: StyleEnum;\n    provider: string;\n    styleFamily: string;\n    styleUrl: string;\n    selfUrl: string;\n    thumbnailUrl: string;\n    detailUrl?: string;\n    labelsUrl?: string;\n    rootUrl?: string;\n    baseUrl?: string;\n  }];\n};\n\nexport type CodeNamePair = {\n  code: string;\n  name: string;\n};\nexport type PlacesOptions = 'all' | 'attributed' | 'none';\nexport type StyleFamily = 'arcgis' | 'open' | 'osm';\nexport type StyleEnum = `${StyleFamily}/${string}`;\n\nexport type BasemapStyleObject = {\n  complete: boolean;\n  deprecated?: boolean;\n  name: string;\n  path: StyleEnum;\n  provider: string;\n  styleFamily: string;\n  styleUrl: string;\n  selfUrl: string;\n  thumbnailUrl: string;\n  detailUrl?: string;\n  labelsUrl?: string;\n  rootUrl?: string;\n  baseUrl?: string;\n};\n\n/**\n * Options passed to Maplibre GL JS.\n * Go to the [MapLibre GL JS Map.setStyle](https://maplibre.org/maplibre-gl-js/docs/API/classes/Map/#setstyle) for more information.\n */\nexport type MaplibreStyleOptions = StyleOptions & StyleSwapOptions;\n\n/**\n * Events emitted by the BasemapStyle class.\n */\nexport type BasemapStyleEventMap = {\n  BasemapStyleLoad: BasemapStyle;\n  BasemapAttributionLoad: AttributionControl;\n  BasemapStyleError: Error;\n};\n\nconst DEFAULT_BASE_URL = 'https://basemapstyles-api.arcgis.com/arcgis/rest/services/styles/v2/styles';\n// const DEV_URL = 'https://basemapstylesdev-api.arcgis.com/arcgis/rest/services/styles/v2/styles';\n\n/**\n * Options for basemap styles\n */\nexport interface IBasemapStyleOptions {\n  /**\n   * A basemap style enumeration or item ID.\n   */\n  style: string;\n  /**\n   * Accepts an ArcGIS access token for authentication.\n   */\n  token?: string;\n  /**\n   * Accepts basemap sessions for authentication. The style will reload automatically on session token refresh.\n   */\n  session?: BasemapSession | Promise<BasemapSession>;\n  /**\n   * Set style preferences including language, worldview, and places.\n   */\n  preferences?: IBasemapPreferences;\n  /**\n   * Options for customizing the maplibre-gl attribution control.\n   */\n  attributionControl?: IAttributionControlOptions;\n  /**\n   * @internal For setting the service url to QA, devext, etc.\n   */\n  baseUrl?: string;\n};\n\n/**\n * Options for applyStyle\n */\nexport interface IApplyStyleOptions extends IBasemapStyleOptions {\n  /**\n   * The maplibre-gl map to apply the basemap style to.\n   */\n  map: Map;\n  /**\n   * Passthrough options for maplibre-gl map.setStyle()\n   */\n  maplibreStyleOptions?: MaplibreStyleOptions;\n};\n\n/**\n * Options for updateStyle\n */\nexport interface IUpdateStyleOptions {\n  /**\n   * A basemap style enumeration or item ID.\n   */\n  style?: string;\n  /**\n   * A new ArcGIS access token. This will override the existing token.\n   */\n  token?: string;\n  /**\n   * Set style preferences including language, worldview, and places.\n   */\n  preferences?: IBasemapPreferences;\n  /**\n   * Passthrough options for maplibre-gl map.setStyle()\n   */\n  maplibreStyleOptions?: MaplibreStyleOptions;\n};\n\n/**\n * Optional preferences for the basemap style. Support varies based on the basemap style selected.\n */\nexport interface IBasemapPreferences {\n  /**\n   * Customize the language of the basemap.\n   */\n  language?: string;\n  /**\n   * Customize the political worldview of the basemap.\n   */\n  worldview?: string;\n  /**\n   * Enable or disable basemap places.\n   */\n  places?: PlacesOptions;\n};\n\nexport class BasemapStyle {\n  /**\n   * The basemap style, formatted as MapLibre style specification JSON.\n   */\n  style: StyleSpecification;\n  /**\n   * The ID of the saved style.\n   */\n  styleId: string;\n  /**\n   * A reference to the map's AttributionControl.\n   */\n  attributionControl: AttributionControl;\n  /**\n   * An ArcGIS access token. Used for authentication\n   */\n  token: string;\n  /**\n   * A basemap session. Used for authentication.\n   */\n  session: BasemapSession | Promise<BasemapSession>;\n  /**\n   * Optional style preferences such as `language` and `places`.\n   */\n  preferences: IBasemapPreferences;\n  // private _transformStyleFn?:TransformStyleFunction;\n  private _attributionControlOptions: IAttributionControlOptions;\n  private _isItemId: boolean;\n  private _map?: Map;\n  private _baseUrl: string;\n  private readonly _emitter: Emitter<BasemapStyleEventMap> = mitt();\n\n  /**\n   * Constructor for BasemapStyle.\n   * @param options - Configuration options for the basemap style.\n   */\n  constructor(options: IBasemapStyleOptions) {\n    if (!options || !options.style) throw new Error('BasemapStyle must be created with a style name, such as \\'arcgis/imagery\\' or \\'open/streets\\'.');\n    // Access token validation\n    if (options.session) this.session = options.session;\n    else if (options.token) this.token = options.token;\n    else throw new Error(\n      'ArcGIS access token required. To learn more, go to https://developers.arcgis.com/documentation/security-and-authentication/get-started/.'\n    );\n\n    this.styleId = options.style;\n    this._baseUrl = options?.baseUrl || DEFAULT_BASE_URL;\n    this._isItemId = checkItemId(this.styleId) == 'ItemId' ? true : false;\n\n    if (options.attributionControl) this._attributionControlOptions = options.attributionControl;\n\n    if (options?.preferences) {\n      this._updatePreferences({\n        language: options.preferences.language,\n        worldview: options.preferences.worldview,\n        places: options.preferences.places,\n      });\n    }\n  }\n\n  private get _styleUrl(): string {\n    let styleUrl = this._isItemId ? `${this._baseUrl}/items/${this.styleId}` : `${this._baseUrl}/${this.styleId}`;\n\n    styleUrl += `?token=${this._token}`;\n\n    if (this.preferences?.language) {\n      styleUrl += `&language=${this.preferences.language}`;\n    }\n    if (this.preferences?.worldview) {\n      styleUrl += `&worldview=${this.preferences.worldview}`;\n    }\n    if (this.preferences?.places) {\n      styleUrl += `&places=${this.preferences.places}`;\n    }\n\n    return styleUrl;\n  }\n\n  private get _token(): string {\n    if (this.session) return (this.session as BasemapSession).token;\n    else if (this.token) return this.token;\n  }\n\n  /**\n   * Associates the BasemapStyle with a maplibre-gl map.\n   * @param map - A maplibre-gl map.\n   * @returns The BasemapStyle object.\n   */\n  setMap(map: Map): BasemapStyle {\n    this._map = map;\n    return this;\n  }\n\n  /**\n   * Applies the basemap style to a maplibre-gl map.\n   * @param map - A maplibre-gl map. The map may either be passed here or in the constructor.\n   * @param maplibreStyleOptions - Optional style object for maplibre-gl, including the `transformStyle` function.\n   * @returns - The maplibre-gl map that the style was applied to.\n   */\n  applyTo(map: Map, maplibreStyleOptions?: MaplibreStyleOptions): Map {\n    if (map) this._map = map;\n    if (!this._map) throw new Error('Unable to apply basemap style: No \\'Map\\' object was provided.');\n\n    if (!this.style) throw new Error('Cannot apply style to map before style is loaded.');\n    this._map.setStyle(this.style, maplibreStyleOptions);\n    this._setEsriAttribution();\n\n    if (this.session) {\n      (this.session as BasemapSession).on('BasemapSessionRefreshed', (sessionData) => {\n        const oldToken = sessionData.previous.token;\n        const newToken = sessionData.current.token;\n\n        this._updateTiles(oldToken, newToken, map); // update the map with the new token\n      });\n    }\n\n    return this._map;\n  }\n\n  /**\n   * Updates the basemap style with new options and applies it to the current map.\n   * @param options - Options to customize the style enumeration and preferences such as language.\n   */\n  async updateStyle(options: IUpdateStyleOptions): Promise<StyleSpecification> {\n    if (options.style) this.styleId = options.style;\n    if (options.token) this.token = options.token;\n    if (options.preferences) {\n      this._updatePreferences(options.preferences);\n    }\n\n    await this.loadStyle();\n    this.applyTo(this._map, options.maplibreStyleOptions);\n\n    return this.style;\n  }\n\n  /**\n   * Loads the basemap style from the Basemap Styles service.\n   * @returns The maplibre style specification of the basemap style, formatted properly.\n   */\n  async loadStyle(): Promise<StyleSpecification> {\n    if (this.session) {\n      const session = await Promise.resolve(this.session);\n      this.session = session;\n    }\n    // Request style JSON\n    const styleUrl = this._isItemId ? `${this._baseUrl}/items/${this.styleId}` : `${this._baseUrl}/${this.styleId}`;\n\n    const authentication = await wrapAccessToken(this._token);\n\n    const style = await (request(styleUrl, {\n      authentication: authentication,\n      httpMethod: 'GET',\n      suppressWarnings: true,\n      params: {\n        ...this.preferences,\n        echoToken: false,\n      },\n    }) as Promise<StyleSpecification>)\n      .catch((e: Error) => {\n        this._styleErrorHandler(e);\n      });\n    if (!style) return;\n    // Handle glyphs\n    if (style.glyphs) style.glyphs = `${style.glyphs}?f=json&token=${this.token}`;\n\n    // Handle sources\n    Object.keys(style.sources).forEach((sourceId) => {\n      const source = style.sources[sourceId];\n\n      if (source.type === 'raster' || source.type === 'vector' || source.type === 'raster-dem') {\n        if (source.tiles.length > 0) {\n          for (let i = 0; i < source.tiles.length; i++) source.tiles[i] = `${source.tiles[i]}?f=json&token=${this.token}`;\n        }\n      }\n    });\n\n    if (style.sprite) {\n      // Handle sprite\n      if (Array.isArray(style.sprite)) {\n        style.sprite.forEach((sprite, id, spriteArray) => {\n          spriteArray[id].url = `${sprite.url}?token=${this._token}`;\n        });\n      }\n      else {\n        style.sprite = `${style.sprite}?token=${this._token}`;\n      }\n    }\n\n    this.style = style;\n    this._styleLoadHandler(this);\n    return this.style;\n  }\n\n  private _setEsriAttribution(): void {\n    if (!this._map) throw new Error('No map was passed to ArcGIS BasemapStyle.');\n\n    this.attributionControl = new AttributionControl(this._attributionControlOptions);\n    if (this.attributionControl.canAdd(this._map)) {\n      this._map.addControl(this.attributionControl);\n      this._attributionLoadHandler(this.attributionControl);\n    }\n  }\n\n  private _updatePreferences(preferences: IBasemapPreferences) {\n    if (!preferences) return;\n\n    if (this._isItemId) {\n      console.warn('Preferences such as \\'language\\', \\'places\\', and \\'worldview\\' are not supported with custom basemaps IDs. These parameters will be ignored.');\n      return;\n    }\n\n    if (!this.preferences) this.preferences = {};\n\n    if (preferences.language) this.preferences.language = preferences.language;\n    if (preferences.places) this.preferences.places = preferences.places;\n    if (preferences.worldview) this.preferences.worldview = preferences.worldview;\n  }\n\n  private _updateTiles(fromToken: string, toToken: string, map: Map): void {\n    if (!map) throw new Error('Unable to update map tiles with new session token: Session does not have access to the map.');\n    this._map = map;\n\n    // replace token in the styles tiles with the new session token\n    for (const sourceCaches of Object.keys(this._map.style.sourceCaches)) {\n      const source: VectorTileSource = this._map.getSource(sourceCaches);\n      // skip if we can't find the source or the source doesn't have tiles\n      if (!source || !source.tiles) {\n        return;\n      }\n\n      // Skip if the source doesn't have tiles that include the old token\n      if (!source.tiles.some(tileUrl => tileUrl.includes(fromToken))) {\n        return;\n      }\n\n      const newTiles = source.tiles.map((tile) => {\n        return tile.includes(fromToken) ? tile.replace(fromToken, toToken) : tile;\n      });\n\n      source.setTiles(newTiles);\n    }\n\n    // replace the token in the glyph url, ensuring fonts continue loading\n    const glyphs = this._map.getGlyphs();\n    if (glyphs.includes(fromToken)) {\n      this._map.setGlyphs(glyphs.replace(fromToken, toToken));\n    }\n\n    const sprites = this._map.getSprite();\n    for (const sprite of sprites) {\n      if (sprite.url.includes(fromToken)) {\n        this._map.setSprite(sprite.url.replace(fromToken, toToken));\n      }\n    }\n  }\n\n  private _styleLoadHandler = (e: BasemapStyle): void => {\n    this._emitter.emit('BasemapStyleLoad', e);\n  };\n\n  private _styleErrorHandler = (e: Error): void => {\n    this._emitter.emit('BasemapStyleError', e);\n  };\n\n  private _attributionLoadHandler = (e: AttributionControl): void => {\n    this._emitter.emit('BasemapAttributionLoad', e);\n  };\n\n  /**\n   * Registers an event handler\n   * @param eventName - A basemap style event\n   * @param handler - Custom handler function\n   */\n  on<K extends keyof BasemapStyleEventMap>(eventName: K, handler: (data: BasemapStyleEventMap[K]) => void): void {\n    this._emitter.on(eventName, handler);\n  }\n\n  /**\n   * Deregisters an event handler\n   * @param eventName - A basemap style event\n   * @param handler - Custom handler function\n   */\n  off<K extends keyof BasemapStyleEventMap>(eventName: K, handler: (data: BasemapStyleEventMap[K]) => void): void {\n    this._emitter.off(eventName, handler);\n  }\n\n  /**\n   * Static method that returns a basemap style URL.\n   * @param options - Additional parameters including an ArcGIS access token\n   * @returns The URL of the specified ArcGIS basemap style with all included parameters\n   */\n  static url(options: IBasemapStyleOptions): string {\n    return new BasemapStyle(options)._styleUrl;\n  }\n\n  /**\n   * Creates, loads, and applies a new BasemapStyle to a maplibre map.\n   * @param map - A maplibre-gl map to apply the basemap style to.\n   * @param options - Style options, including a style ID and authentication\n   * @returns - BasemapStyle object\n   */\n  static applyStyle(map: Map, options: IApplyStyleOptions): BasemapStyle {\n    if (!map) throw new Error('Must provide a maplibre-gl \\'Map\\' to apply style to.');\n\n    const basemapStyle = new BasemapStyle(options);\n\n    basemapStyle.loadStyle().then((_) => {\n      basemapStyle.applyTo(map, options.maplibreStyleOptions);\n    }).catch((e) => { throw e; });\n\n    return basemapStyle;\n  }\n\n  /**\n   * Static method that makes a `/self` request to the ArcGIS Basemap Styles service.\n   * @see https://developers.arcgis.com/rest/basemap-styles/service-self-get/\n   * @param options - Additional parameters including an ArcGIS access token\n   * @returns The response returned by the Basemap Styles service.\n   */\n  static async getSelf(options: { token?: string; baseUrl?: string }): Promise<BasemapSelfResponse> {\n    const basemapServiceUrl = options?.baseUrl ? options.baseUrl : DEFAULT_BASE_URL;\n    const authentication = await wrapAccessToken(options?.token);\n    return await request(`${basemapServiceUrl}/self`, {\n      authentication: authentication,\n      httpMethod: 'GET',\n    }) as BasemapSelfResponse;\n  }\n}\n\nexport default BasemapStyle;\n/*\n * Copyright 2025 Esri\n *\n * Licensed under the Apache License Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n", "/* Copyright (c) 2017 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { IRequestOptions, cleanUrl } from \"@esri/arcgis-rest-request\";\nimport { request } from \"http\";\n\n/**\n * Helper that returns the appropriate portal url for a given request. `requestOptions.portal` is given\n * precedence over `authentication.portal`. If neither `portal` nor `authentication` is present,\n * `www.arcgis.com/sharing/rest` is returned.\n *\n * @param requestOptions - Request options that may have authentication manager\n * @returns Portal url to be used in API requests\n */\nexport function getPortalUrl(requestOptions: IRequestOptions = {}): string {\n  // use portal in options if specified\n  if (requestOptions.portal) {\n    return cleanUrl(requestOptions.portal);\n  }\n\n  // if auth was passed, use that portal\n  if (\n    requestOptions.authentication &&\n    typeof requestOptions.authentication !== \"string\"\n  ) {\n    // the portal url is already scrubbed in the auth package\n    return requestOptions.authentication.portal;\n  }\n\n  // default to arcgis.com\n  return \"https://www.arcgis.com/sharing/rest\";\n}\n", "// eslint-disable-next-line no-control-regex\nconst CONTROL_CHAR_MATCHER = /[\\x00-\\x1F\\x7F-\\x9F\\xA0]/g;\n\n/**\n * Returns a new string with all control characters removed.\n *\n * Doesn't remove characters from input string.\n *\n * @param str - the string to scrub\n */\nexport function scrubControlChars(str: string) {\n  return str.replace(CONTROL_CHAR_MATCHER, \"\");\n}\n", "/* Copyright (c) 2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport {\n  request,\n  IRequestOptions,\n  appendCustomParams,\n  IGroup\n} from \"@esri/arcgis-rest-request\";\nimport { IItem } from \"../helpers.js\";\n\nimport { getPortalUrl } from \"../util/get-portal-url.js\";\nimport { scrubControlChars } from \"../util/scrub-control-chars.js\";\nimport {\n  IItemDataOptions,\n  IItemRelationshipOptions,\n  IUserItemOptions,\n  determineOwner,\n  FetchReadMethodName\n} from \"./helpers.js\";\n\n/**\n * ```\n * import { getItem } from \"@esri/arcgis-rest-portal\";\n * //\n * getItem(\"ae7\")\n *   .then(response);\n * // or\n * getItem(\"ae7\", { authentication })\n *   .then(response)\n * ```\n * Get an item by id. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/item.htm) for more information.\n *\n * @param id - Item Id\n * @param requestOptions - Options for the request\n * @returns A Promise that will resolve with the data from the response.\n */\nexport function getItem(\n  id: string,\n  requestOptions?: IRequestOptions\n): Promise<IItem> {\n  const url = getItemBaseUrl(id, requestOptions);\n\n  // default to a GET request\n  const options: IRequestOptions = {\n    ...{ httpMethod: \"GET\" },\n    ...requestOptions\n  };\n  return request(url, options);\n}\n\n/**\n * Get the fully qualified base URL to the REST end point for an item.\n * @param id Item Id\n * @param portalUrlOrRequestOptions a portal URL or request options\n * @returns URL to the item's REST end point, defaults to `https://www.arcgis.com/sharing/rest/content/items/{id}`\n */\nexport const getItemBaseUrl = (\n  id: string,\n  portalUrlOrRequestOptions?: string | IRequestOptions\n) => {\n  const portalUrl =\n    typeof portalUrlOrRequestOptions === \"string\"\n      ? portalUrlOrRequestOptions\n      : getPortalUrl(portalUrlOrRequestOptions);\n  return `${portalUrl}/content/items/${id}`;\n};\n\n/**\n * ```\n * import { getItemData } from \"@esri/arcgis-rest-portal\";\n * //\n * getItemData(\"ae7\")\n *   .then(response)\n * // or\n * getItemData(\"ae7\", { authentication })\n *   .then(response)\n * ```\n * Get the /data for an item. If no data exists, returns `undefined`. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/item-data.htm) for more information.\n * @param id - Item Id\n * @param requestOptions - Options for the request\n * @returns A Promise that will resolve with the json data for the item.\n */\nexport function getItemData(\n  id: string,\n  requestOptions?: IItemDataOptions\n): Promise<any> {\n  const url = `${getItemBaseUrl(id, requestOptions)}/data`;\n  // default to a GET request\n  const options: IItemDataOptions = {\n    ...{ httpMethod: \"GET\", params: {} },\n    ...requestOptions\n  };\n\n  if (options.file) {\n    options.params.f = null;\n  }\n\n  return request(url, options).catch((err) => {\n    /* if the item doesn't include data, the response will be empty\n       and the internal call to response.json() will fail */\n    const emptyResponseErr = RegExp(\n      /The string did not match the expected pattern|(Unexpected end of (JSON input|data at line 1 column 1))/i\n    );\n    /* istanbul ignore else */\n    if (emptyResponseErr.test(err.message)) {\n      return;\n    } else throw err;\n  });\n}\n\nexport interface IGetRelatedItemsResponse {\n  total: number;\n  relatedItems: IItem[];\n}\n\n/**\n * ```\n * import { getRelatedItems } from \"@esri/arcgis-rest-portal\";\n * //\n * getRelatedItems({\n *   id: \"ae7\",\n *   relationshipType: \"Service2Layer\" // or several [\"Service2Layer\", \"Map2Area\"]\n * })\n *   .then(response)\n * ```\n * Get the related items. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/related-items.htm) for more information.\n *\n * @param requestOptions - Options for the request\n * @returns A Promise to get some item resources.\n */\nexport function getRelatedItems(\n  requestOptions: IItemRelationshipOptions\n): Promise<IGetRelatedItemsResponse> {\n  const url = `${getItemBaseUrl(\n    requestOptions.id,\n    requestOptions\n  )}/relatedItems`;\n\n  const options: IItemRelationshipOptions = {\n    httpMethod: \"GET\",\n    params: {\n      direction: requestOptions.direction\n    },\n    ...requestOptions\n  };\n\n  if (typeof requestOptions.relationshipType === \"string\") {\n    options.params.relationshipType = requestOptions.relationshipType;\n  } else {\n    options.params.relationshipTypes = requestOptions.relationshipType;\n  }\n\n  delete options.direction;\n  delete options.relationshipType;\n\n  return request(url, options);\n}\n\nexport interface IGetItemResourcesResponse {\n  total: number;\n  start: number;\n  nextStart: number;\n  num: number;\n  resources?: [{\n      resource: string;\n      access: string;\n      created: number;\n      size: number;\n  }];\n}\n\n/**\n * Get the resources associated with an item\n *\n * @param requestOptions - Options for the request\n * @returns A Promise to get some item resources.\n */\nexport function getItemResources(\n  id: string,\n  requestOptions?: IRequestOptions\n): Promise<IGetItemResourcesResponse> {\n  const url = `${getItemBaseUrl(id, requestOptions)}/resources`;\n\n  // Mix in num:1000 with any user supplied params\n  // Key thing - we don't want to mutate the passed in requestOptions\n  // as that may be used in other (subsequent) calls in the course\n  // of a long promise chains\n  const options: IRequestOptions = {\n    ...requestOptions\n  };\n  options.params = { num: 1000, ...options.params };\n\n  return request(url, options);\n}\n\nexport interface IGetItemGroupsResponse {\n  admin?: IGroup[];\n  member?: IGroup[];\n  other?: IGroup[];\n}\n\nexport interface IGetItemResourceOptions extends IRequestOptions {\n  /**\n   * Name of the info file, optionally including the folder path\n   */\n  fileName: string;\n  /**\n   * How the fetch response should be read, see:\n   * https://developer.mozilla.org/en-US/docs/Web/API/Body#Methods\n   */\n  readAs?: FetchReadMethodName;\n}\n\n/**\n * Fetches an item resource and optionally parses it to the correct format.\n *\n * Provides JSON parse error protection by sanitizing out any unescaped control characters before parsing that would otherwise cause an error to be thrown.\n *\n * ```js\n * import { getItemResource } from \"@esri/arcgis-rest-portal\";\n *\n * // Parses contents as blob by default\n * getItemResource(\"3ef\", { fileName: \"resource.jpg\", ...})\n *  .then(resourceContents => {});\n *\n * // Can override parse method\n * getItemResource(\"3ef\", { fileName: \"resource.json\", readAs: 'json', ...})\n *  .then(resourceContents => {});\n *\n * // Get the response object instead\n * getItemResource(\"3ef\",{ rawResponse: true, fileName: \"resource.json\" })\n *  .then(response => {})\n * ```\n *\n * @param {string} itemId\n * @param {IGetItemResourceOptions} requestOptions\n */\nexport function getItemResource(\n  itemId: string,\n  requestOptions: IGetItemResourceOptions\n) {\n  const readAs = requestOptions.readAs || \"blob\";\n  return getItemFile(\n    itemId,\n    `/resources/${requestOptions.fileName}`,\n    readAs,\n    requestOptions\n  );\n}\n\n/**\n * Lists the groups of which the item is a part, only showing the groups that the calling user can access. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/groups.htm) for more information.\n *\n * ```js\n * import { getItemGroups } from \"@esri/arcgis-rest-portal\";\n *\n * getItemGroups(\"30e5fe3149c34df1ba922e6f5bbf808f\")\n *   .then(response)\n * ```\n *\n * @param id - The Id of the item to query group association for.\n * @param requestOptions - Options for the request\n * @returns A Promise to get some item groups.\n */\nexport function getItemGroups(\n  id: string,\n  requestOptions?: IRequestOptions\n): Promise<IGetItemGroupsResponse> {\n  const url = `${getItemBaseUrl(id, requestOptions)}/groups`;\n\n  return request(url, requestOptions);\n}\n\nexport interface IItemStatusOptions extends IUserItemOptions {\n  /**\n   * The type of asynchronous job for which the status has to be checked. Default is none, which check the item's status.\n   */\n  jobType?: \"publish\" | \"generateFeatures\" | \"export\" | \"createService\";\n  /**\n   * The job ID returned during publish, generateFeatures, export, and createService calls.\n   */\n  jobId?: string;\n  /**\n   * The response format. The default and the only response format for this resource is HTML.\n   */\n  format?: \"html\";\n}\n\nexport interface IGetItemStatusResponse {\n  status: \"partial\" | \"processing\" | \"failed\" | \"completed\";\n  statusMessage: string;\n  itemId: string;\n}\n\n/**\n * Inquire about status when publishing an item, adding an item in async mode, or adding with a multipart upload. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/status.htm) for more information.\n *\n * ```js\n * import { getItemStatus } from \"@esri/arcgis-rest-portal\";\n *\n * getItemStatus({\n *   id: \"30e5fe3149c34df1ba922e6f5bbf808f\",\n *   authentication\n * })\n *   .then(response)\n * ```\n *\n * @param id - The Id of the item to get status for.\n * @param requestOptions - Options for the request\n * @returns A Promise to get the item status.\n */\nexport function getItemStatus(\n  requestOptions: IItemStatusOptions\n): Promise<IGetItemStatusResponse> {\n  return determineOwner(requestOptions).then((owner) => {\n    const url = `${getPortalUrl(requestOptions)}/content/users/${owner}/items/${\n      requestOptions.id\n    }/status`;\n\n    const options = appendCustomParams<IItemStatusOptions>(\n      requestOptions,\n      [\"jobId\", \"jobType\"],\n      { params: { ...requestOptions.params } }\n    );\n\n    return request(url, options);\n  });\n}\n\nexport interface IGetItemPartsResponse {\n  parts: number[];\n}\n\n/**\n * Lists the part numbers of the file parts that have already been uploaded in a multipart file upload. This method can be used to verify the parts that have been received as well as those parts that were not received by the server. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/parts.htm) for more information.\n *\n * ```js\n * import { getItemParts } from \"@esri/arcgis-rest-portal\";\n *\n * getItemParts({\n *   id: \"30e5fe3149c34df1ba922e6f5bbf808f\",\n *   authentication\n * })\n *   .then(response)\n * ```\n *\n * @param id - The Id of the item to get part list.\n * @param requestOptions - Options for the request\n * @returns A Promise to get the item part list.\n */\nexport function getItemParts(\n  requestOptions: IUserItemOptions\n): Promise<IGetItemPartsResponse> {\n  return determineOwner(requestOptions).then((owner) => {\n    const url = `${getPortalUrl(requestOptions)}/content/users/${owner}/items/${\n      requestOptions.id\n    }/parts`;\n    return request(url, requestOptions);\n  });\n}\n\nexport interface IGetItemInfoOptions extends IRequestOptions {\n  /**\n   * Name of the info file, optionally including the folder path\n   */\n  fileName?: string;\n  /**\n   * How the fetch response should be read, see:\n   * https://developer.mozilla.org/en-US/docs/Web/API/Body#Methods\n   */\n  readAs?: FetchReadMethodName;\n}\n\n/**\n * ```\n * import { getItemInfo } from \"@esri/arcgis-rest-portal\";\n * // get the \"Info Card\" for the item\n * getItemInfo(\"ae7\")\n *   .then(itemInfoXml) // XML document as a string\n * // or get the contents of a specific file\n * getItemInfo(\"ae7\", { fileName: \"form.json\", readAs: \"json\", authentication })\n *   .then(formJson) // JSON document as JSON\n * ```\n * Get an info file for an item. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/item-info-file.htm) for more information.\n * @param id - Item Id\n * @param requestOptions - Options for the request, including the file name which defaults to `iteminfo.xml`.\n * If the file is not a text file (XML, HTML, etc) you will need to specify the `readAs` parameter\n * @returns A Promise that will resolve with the contents of the info file for the item.\n */\nexport function getItemInfo(\n  id: string,\n  requestOptions?: IGetItemInfoOptions\n): Promise<any> {\n  const { fileName = \"iteminfo.xml\", readAs = \"text\" } = requestOptions || {};\n  const options: IRequestOptions = {\n    httpMethod: \"GET\",\n    ...requestOptions\n  };\n  return getItemFile(id, `/info/${fileName}`, readAs, options);\n}\n\n/**\n * ```\n * import { getItemMetadata } from \"@esri/arcgis-rest-portal\";\n * // get the metadata for the item\n * getItemMetadata(\"ae7\")\n *   .then(itemMetadataXml) // XML document as a string\n * // or with additional request options\n * getItemMetadata(\"ae7\", { authentication })\n *   .then(itemMetadataXml) // XML document as a string\n * ```\n * Get the standard formal metadata XML file for an item (`/info/metadata/metadata.xml`)\n * @param id - Item Id\n * @param requestOptions - Options for the request\n * @returns A Promise that will resolve with the contents of the metadata file for the item as a string.\n */\nexport function getItemMetadata(\n  id: string,\n  requestOptions?: IRequestOptions\n): Promise<any> {\n  const options = {\n    ...requestOptions,\n    fileName: \"metadata/metadata.xml\"\n  } as IGetItemInfoOptions;\n  return getItemInfo(id, options);\n}\n\n// overrides request()'s default behavior for reading the response\n// which is based on `params.f` and defaults to JSON\n// Also adds JSON parse error protection by sanitizing out any unescaped control characters before parsing\nfunction getItemFile(\n  id: string,\n  // NOTE: fileName should include any folder/subfolders\n  fileName: string,\n  readMethod: FetchReadMethodName,\n  requestOptions?: IRequestOptions\n): Promise<any> {\n  const url = `${getItemBaseUrl(id, requestOptions)}${fileName}`;\n  // preserve escape hatch to let the consumer read the response\n  // and ensure the f param is not appended to the query string\n  const options: IRequestOptions = {\n    params: {},\n    ...requestOptions\n  };\n  const justReturnResponse = options.rawResponse;\n  options.rawResponse = true;\n  options.params.f = null;\n\n  return request(url, options).then((response) => {\n    if (justReturnResponse) {\n      return response;\n    }\n    return readMethod !== \"json\"\n      ? response[readMethod]()\n      : response\n          .text()\n          .then((text: string) => JSON.parse(scrubControlChars(text)));\n  });\n}\n", "/* Copyright (c) 2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { request, cleanUrl } from \"@esri/arcgis-rest-request\";\nimport { IGetLayerOptions, ILayerDefinition } from \"./helpers.js\";\n\n/**\n * Layer (Feature Service) request. See the [REST Documentation](https://developers.arcgis.com/rest/services-reference/layer-feature-service-.htm) for more information.\n *\n * ```js\n * import { getLayer } from '@esri/arcgis-rest-feature-service';\n * //\n * getLayer({\n *   url: \"https://sampleserver6.arcgisonline.com/arcgis/rest/services/ServiceRequest/FeatureServer/0\"\n * })\n *   .then(response) // { name: \"311\", id: 0, ... }\n * ```\n *\n * @param options - Options for the request.\n * @returns A Promise that will resolve with the addFeatures response.\n */\nexport function getLayer(options: IGetLayerOptions): Promise<ILayerDefinition> {\n  return request(cleanUrl(options.url), options);\n}\n", "/* Copyright (c) 2017-2019 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\nimport {\n  cleanUrl,\n  IRequestOptions,\n  GeometryType,\n  IGeometry,\n  ISpatialReference,\n  IHasZM,\n  IExtent,\n  IField,\n  IFeature\n} from \"@esri/arcgis-rest-request\";\n\n/**\n * The spatial relationship used to compare input geometries\n */\nexport type SpatialRelationship =\n  | \"esriSpatialRelIntersects\"\n  | \"esriSpatialRelContains\"\n  | \"esriSpatialRelCrosses\"\n  | \"esriSpatialRelEnvelopeIntersects\"\n  | \"esriSpatialRelIndexIntersects\"\n  | \"esriSpatialRelOverlaps\"\n  | \"esriSpatialRelTouches\"\n  | \"esriSpatialRelWithin\";\n\n/**\n * Base options for making requests against feature layers\n */\nexport interface IGetLayerOptions extends IRequestOptions {\n  /**\n   * Layer service url.\n   */\n  url: string;\n}\n\nexport interface ISharedQueryOptions extends IGetLayerOptions {\n  /**\n   * A where clause for the query. Defaults to \"1=1\"\n   */\n  where?: string;\n  geometry?: IGeometry;\n  geometryType?: GeometryType;\n  // NOTE: either WKID or ISpatialReference\n  inSR?: string | ISpatialReference;\n  spatialRel?: SpatialRelationship;\n}\n\n/**\n * Add, update and delete features result Object.\n */\nexport interface IEditFeatureResult {\n  objectId: number;\n  globalId?: string;\n  success: boolean;\n  /**\n   * Error is optional and is only returned when `success` is `false`.\n   */\n  error?: {\n    code: number;\n    description: string;\n  };\n}\n\n/**\n * Shared add/update attachment options for apply edits.\n */\ninterface IApplyEditsSharedAttachmentOptions {\n  /**\n   * Attachment file content type.\n   */\n  contentType: string;\n  /**\n   * Name of the file including extension.\n   */\n  name: string;\n  /**\n   * Upload id of file to be attached.\n   */\n  uploadId?: string;\n  /**\n   * Base 64 encoded data of attachment.\n   */\n  data?: string;\n}\n\n/**\n * Add attachment options for apply edits.\n */\nexport interface IApplyEditsAddAttachmentOptions\n  extends IApplyEditsSharedAttachmentOptions {\n  /**\n   * Global id of attachment (must be provided by client).\n   */\n  globalId: string;\n  /**\n   * Global id of feature to attach.\n   */\n  parentGlobalId: string;\n}\n\n/**\n * Update attachment options for apply edits.\n */\nexport interface IApplyEditsUpdateAttachmentOptions\n  extends IApplyEditsSharedAttachmentOptions {\n  /**\n   * Global id of attachment.\n   */\n  globalId: string;\n}\n\n/**\n * `globalId` always returned with attachments via apply edits.\n */\nexport interface IApplyEditsAttachmentResult extends IEditFeatureResult {\n  globalId: string;\n}\n\n/**\n * Apply edits result Object.\n */\nexport interface IApplyEditsResult {\n  addResults: IEditFeatureResult[];\n  updateResults: IEditFeatureResult[];\n  deleteResults: IEditFeatureResult[];\n  attachments?: {\n    addResults?: IApplyEditsAttachmentResult[];\n    updateResults?: IApplyEditsAttachmentResult[];\n    deleteResults?: IApplyEditsAttachmentResult[];\n  };\n}\n\n/**\n * Common add, update, and delete features options.\n */\nexport interface ISharedEditOptions extends IGetLayerOptions {\n  /**\n   * The geodatabase version to apply the edits.\n   */\n  gdbVersion?: string;\n  /**\n   * Optional parameter specifying whether the response will report the time features were added.\n   */\n  returnEditMoment?: boolean;\n  /**\n   * Optional parameter to specify if the edits should be applied only if all submitted edits succeed.\n   */\n  rollbackOnFailure?: boolean;\n}\n\nconst serviceRegex = new RegExp(/.+(?:map|feature|image)server/i);\n/**\n * Return the service url. If not matched, returns what was passed in\n */\nexport function parseServiceUrl(url: string) {\n  const match = url.match(serviceRegex);\n  if (match) {\n    return match[0];\n  } else {\n    return stripQueryString(url);\n  }\n}\n\nfunction stripQueryString(url: string) {\n  const stripped = url.split(\"?\")[0];\n  return cleanUrl(stripped);\n}\n\nexport interface IStatisticDefinition {\n  /**\n   * Statistical operation to perform (count, sum, min, max, avg, stddev, var, percentile_cont, percentile_disc, EnvelopeAggregate, CentroidAggregate, ConvexHullAggregate).\n   */\n  statisticType:\n    | \"count\"\n    | \"sum\"\n    | \"min\"\n    | \"max\"\n    | \"avg\"\n    | \"stddev\"\n    | \"var\"\n    | \"percentile_cont\"\n    | \"percentile_disc\"\n    | \"EnvelopeAggregate\"\n    | \"CentroidAggregate\"\n    | \"ConvexHullAggregate\"\n    | \"exceedslimit\";\n  /**\n   * Parameters to be used along with statisticType. Currently, only applicable for percentile_cont (continuous percentile) and percentile_disc (discrete percentile).\n   */\n  statisticParameters?: {\n    value: number;\n    orderBy?: \"asc\" | \"desc\";\n  };\n  /**\n   * Field on which to perform the statistical operation.\n   */\n  onStatisticField: string;\n  /**\n   * Field name for the returned statistic field. If outStatisticFieldName is empty or missing, the server will assign one. A valid field name can only contain alphanumeric characters and an underscore. If the outStatisticFieldName is a reserved keyword of the underlying DBMS, the operation can fail. Try specifying an alternative outStatisticFieldName.\n   */\n  outStatisticFieldName?: string;\n}\n\nexport interface ILayer {\n  /** A unique identifying string for the layer. */\n  id: any;\n  /** Layer name */\n  name?: string;\n  /** Optional string containing the item ID of the service if it's registered on ArcGIS Online or your organization's portal. */\n  itemId?: string;\n  /** Indicates the layer type */\n  layerType: string;\n  /** Integer property used to determine the maximum scale at which the layer is displayed. */\n  maxScale?: number;\n  /** Integer property used to determine the minimum scale at which the layer is displayed. */\n  minScale?: number;\n  /** The degree of transparency applied to the layer on the client side, where 0 is full transparency and 1 is no transparency. */\n  opacity?: number;\n  /** Boolean property indicating whether to display in the legend. */\n  showLegend?: boolean;\n  /** A user-friendly string title for the layer that can be used in a table of contents. */\n  title?: string;\n  /**\n   * Deprecated, use layerType instead.\n   * @deprecated\n   */\n  type?: string;\n  /** Boolean property determining whether the layer is initially visible in the web map. */\n  visibility?: boolean;\n  /** The URL to the layer. Not applicable to all layer types. */\n  url?: string;\n}\n\n/**\n * Very generic structure representing the return value from the\n * /arcgis/rest/admin/services/<service-name>/FeatureServer?f=json response\n */\nexport interface IServiceInfo extends Record<string, unknown> {\n  adminServiceInfo: {\n    name: string;\n    type: string;\n    status: string;\n    database: {\n      datasource: {\n        name: string;\n      };\n    };\n  };\n  layers: Record<string, unknown>[];\n}\n\n/**\n * Individual View Source entry\n */\n\nexport interface IViewServiceSource {\n  name: string;\n  type: string;\n  url: string;\n  serviceItemId: string;\n}\n\n/**\n * Response from the /sources end-point of a view service\n */\nexport interface IViewServiceSources {\n  currentVersion: number;\n  services: IViewServiceSource[];\n}\n\n/**\n * `IFeatureServiceDefinition` can also be imported from the following packages:\n *\n * ```js\n * import { IFeatureServiceDefinition } from \"@esri/arcgis-rest-feature-service\";\n * ```\n */\nexport interface IFeatureServiceDefinition {\n  currentVersion?: number;\n  serviceDescription: string;\n  hasVersionedData: boolean;\n  supportsDisconnectedEditing: boolean;\n  supportsReturnDeleteResults: boolean;\n  /** Boolean value indicating whether data changes. True if it does not. */\n  hasStaticData?: boolean;\n  /** Numeric value indicating tbe maximum number of records that will be returned at once for a query. */\n  maxRecordCount: number;\n  /** String value indicating the output formats that are supported in a query. */\n  supportedQueryFormats: string;\n  supportsRelationshipsResource: boolean;\n  /** A comma separated list of supported capabilities, e.g. Query,Editing. */\n  capabilities: string;\n  /** String value of the layer as defined in the map service. */\n  description: string;\n  /** String value for the copyright text information for the layer. */\n  copyrightText: string;\n  advancedEditingCapabilities: { [key: string]: boolean };\n  /** An object containing the WKID or WKT identifying the spatial reference of the layer's geometry. */\n  spatialReference: ISpatialReference;\n  initialExtent: IExtent;\n  fullExtent: IExtent;\n  /** Boolean value indicating whether the geometry of the features in the layer can be edited. */\n  allowGeometryUpdates: boolean;\n  units: string;\n  syncEnabled: boolean;\n  returnServiceEditsHaveSR?: boolean;\n  validationSystemLayers: {\n    validationPointErrorlayerId: number;\n    validationLineErrorlayerId: number;\n    validationPolygonErrorlayerId: number;\n    validationObjectErrortableId: number;\n  };\n  extractChangesCapabilities: {\n    supportsReturnIdsOnly: boolean;\n    supportsReturnExtentOnly: boolean;\n    supportsReturnAttachments: boolean;\n    supportsLayerQueries: boolean;\n    supportsSpatialFilter: boolean;\n    supportsReturnFeature: boolean;\n  };\n  syncCapabilities: {\n    supportsASync: boolean;\n    supportsRegisteringExistingData: boolean;\n    supportsSyncDirectionControl: boolean;\n    supportsPerLayerSync: boolean;\n    supportsPerReplicaSync: boolean;\n    supportsRollbackOnFailure: boolean;\n    supportedSyncDataOptions: number;\n  };\n  editorTrackingInfo: {\n    enableEditorTracking: boolean;\n    enableOwnershipAccessControl: boolean;\n    allowOthersToUpdate: boolean;\n    allowOthersToDelete: boolean;\n  };\n  documentInfo?: { [key: string]: string };\n  // the feature layers published by this service\n  layers: ILayerDefinition[];\n  // the non-spatial tables published by this service\n  tables: ITable[];\n  relationships: [\n    {\n      id: number;\n      name: string;\n      backwardPathLabel: string;\n      originLayerId: number;\n      originPrimaryKey: string;\n      forwardPathLabel: string;\n      destinationLayerId: number;\n      originForeignKey: string;\n      relationshipTableId: number;\n      destinationPrimaryKey: string;\n      destinationForeignKey: string;\n      rules: [\n        {\n          ruleID: number;\n          originSubtypeCode: number;\n          originMinimumCardinality: number;\n          originMaximumCardinality: number;\n          destinationSubtypeCode: number;\n          destinationMinimumCardinality: number;\n          destinationMaximumCardinality: number;\n        }\n      ];\n      cardinality:\n        | \"esriRelCardinalityOneToOne\"\n        | \"esriRelCardinalityOneToMany\"\n        | \"esriRelCardinalityManyToMany\";\n      attributed: boolean;\n      composite: boolean;\n    }\n  ];\n  enableZDefaults?: boolean;\n  isLocationTrackingService: boolean;\n  isLocationTrackingView: boolean;\n  zDefault?: number;\n}\n\n/**\n * Root element in the web map specifying an array of table objects.\n */\nexport interface ITable {\n  /** Table name */\n  name?: string;\n  /** A comma-separated string listing which editing operations are allowed on an editable feature service. Available operations include: 'Create', 'Delete', 'Query', 'Update', and 'Editing'. */\n  capabilities?: string;\n  /** Object indicating the definitionEditor used as a layer's interactive filter. */\n  definitionEditor?: IDefinitionEditor;\n  /** Unique identifier for the table. */\n  id?: number;\n  /** Unique string value indicating an item registered in ArcGIS Online or your organization's portal. */\n  itemId?: string;\n  /** A layerDefinition object defining a definition expression for the table. */\n  layerDefinition?: ILayerDefinition;\n  /** An object defining the content of popup windows when you query a record and the sort option for child related records. */\n  popupInfo?: IPopupInfo;\n  /** String value for the title of the table. */\n  title?: string;\n  /** String value indicating the URL reference of the hosted table. */\n  url?: string;\n}\n\nexport interface IDefinitionParameter {\n  /** The default value that is automatically given if nothing is provided. */\n  defaultValue?: number | string;\n  /** A string value representing the name of the field to query. */\n  fieldName?: string;\n  /** Number given to uniquely identify the specified parameter. */\n  parameterId?: any;\n  /** The field type for the specified field parameter. */\n  type?:\n    | \"esriFieldTypeBlob\"\n    | \"esriFieldTypeDate\"\n    | \"esriFieldTypeDouble\"\n    | \"esriFieldTypeGeometry\"\n    | \"esriFieldTypeGlobalID\"\n    | \"esriFieldTypeGUID\"\n    | \"esriFieldTypeInteger\"\n    | \"esriFieldTypeOID\"\n    | \"esriFieldTypeRaster\"\n    | \"esriFieldTypeSingle\"\n    | \"esriFieldTypeSmallInteger\"\n    | \"esriFieldTypeString\"\n    | \"esriFieldTypeXML\";\n\n  /** An integer value representing exact UNIX time used when defaultValue is a date string. */\n  utcValue?: number;\n}\n\nexport interface IDefinitionInput {\n  /** A string value representing a hint for the input. */\n  hint?: string;\n  /** An array of parameter objects. */\n  parameters?: IDefinitionParameter[];\n  /** A string value representing the prompt for the input. */\n  prompt?: string;\n}\n\n/**\n * The definitionEditor stores interactive filters at the same level as layerDefinition.\n */\nexport interface IDefinitionEditor {\n  /** An array of input objects. */\n  inputs?: IDefinitionInput[];\n  /** A string value representing the where clause for the interactive filter. */\n  parameterizedExpression?: string;\n}\n\n/**\n * Arcade expression added to the pop-up.\n */\nexport interface IPopupExpressionInfo {\n  /** The Arcade expression. */\n  expression?: string;\n  /** Unique identifier for the expression. */\n  name?: string;\n  /** Return type of the Arcade expression, can be number or string. Defaults to string value. Number values are assumed to be double. This can be determined by the authoring client by executing the expression using a sample feature(s), although it can be corrected by the user. Knowing the returnType allows the authoring client to present fields in relevant contexts. For example, numeric fields in numeric contexts such as charts. */\n  returnType?: \"number\" | \"string\";\n  /** Title of the expression. */\n  title?: string;\n}\n\n/**\n * The format object can be used with numerical or date fields to provide more detail about how values should be displayed in popup windows.\n */\nexport interface IFieldFormat {\n  /** A string used with date fields to specify how the date should appear in popup windows. */\n  dateFormat?:\n    | \"shortDate\"\n    | \"shortDateLE\"\n    | \"longMonthDayYear\"\n    | \"dayShortMonthYear\"\n    | \"longDate\"\n    | \"shortDateShortTime\"\n    | \"shortDateLEShortTime\"\n    | \"shortDateShortTime24\"\n    | \"shortDateLEShortTime24\"\n    | \"shortDateLongTime\"\n    | \"shortDateLELongTime\"\n    | \"shortDateLongTime24\"\n    | \"shortDateLELongTime24\"\n    | \"longMonthYear\"\n    | \"shortMonthYear\"\n    | \"year\";\n\n  /**\n   * A Boolean used with numerical fields. A value of true allows the number to have a digit (or thousands) separator when the value appears in popup windows.\n   * Depending on the locale, this separator is a decimal point or a comma. A value of false means that no separator will be used.\n   */\n  digitSeparator?: boolean;\n  /**\n   * An integer used with numerical fields to specify the number of supported decimal places that should appear in popup windows. Any places beyond this value are rounded.\n   */\n  places?: number;\n}\n\n/**\n * Defines how a field in the dataset participates (or does not participate) in a popup window.\n */\nexport interface IFieldInfo {\n  /** A string containing the field name as defined by the service. Anywhere that a fieldname is referenced as {field-name} in popupInfo, an Arcade expression can also be referenced as{expression/}`. */\n  fieldName?: any;\n  /** A format object used with numerical or date fields to provide more detail about how the value should be displayed in a web map popup window. */\n  format?: IFieldFormat;\n  /** A Boolean determining whether users can edit this field. Not applicable to Arcade expressions. */\n  isEditable?: boolean;\n  /** A string containing the field alias. This can be overridden by the web map author. Not applicable to Arcade expressions as title is used instead. */\n  label?: string;\n  /** A string determining what type of input box editors see when editing the field. Applies only to string fields. Not applicable to Arcade expressions. */\n  stringFieldOption?: \"textbox\" | \"textarea\" | \"richtext\";\n\n  /** A string providing an editing hint for editors of the field. Not applicable to Arcade expressions. */\n  tooltip?: string;\n  /** A Boolean determining whether the field is visible in the popup window. */\n  visible?: boolean;\n}\n\n/**\n * Defines the look and feel of popup windows when a user clicks or queries a feature.\n */\nexport interface IPopupInfo {\n  /** A string that appears in the body of the popup window as a description. It is also possible to specify the description as HTML-formatted content. */\n  description?: string | null;\n  /** List of Arcade expressions added to the pop-up. */\n  expressionInfos?: IPopupExpressionInfo[];\n  /** Array of fieldInfo information properties. This information is provided by the service layer definition. When the description uses name/value pairs, the order of the array is how the fields display in the editable Map Viewer popup and the resulting popup. It is also possible to specify HTML-formatted content. */\n  fieldInfos?: IFieldInfo[];\n  /** Additional options that can be defined for the popup layer. */\n  layerOptions?: {\n    /** Indicates whether or not the NoData records should be displayed. */\n    showNoDataRecords: boolean;\n  };\n  /** Array of various mediaInfo to display. Can be of type image, piechart, barchart, columnchart, or linechart. The order given is the order in which is displays. */\n  mediaInfos?: IMediaInfo[];\n  /** An array of popupElement objects that represent an ordered list of popup elements. */\n  popupElements?: IPopupElement[];\n  /** Indicates whether to enable related records if they exist on a layer. */\n  relatedRecordsInfo?: IRelatedRecordsInfo;\n  /** Indicates whether attachments will be loaded for feature layers that have attachments. */\n  showAttachments?: boolean;\n  /** A string that appears at the top of the popup window as a title. */\n  title?: string;\n}\n\n/**\n * The sort in the popupInfo for the parent feature. This impacts the sorting order for the returned child records.\n */\nexport interface IRelatedRecordsInfo {\n  /** Array of orderByFields objects indicating the field display order for the related records and whether they should be sorted in ascending 'asc' or descending 'desc' order. */\n  orderByFields?: IOrderByField[];\n  /** Required boolean value indicating whether to display related records. If true, client should let the user navigate to the related records. Defaults to true if the layer participates in a relationship AND the related layer/table has already been added to the map (either as an operationalLayer or as a table). */\n  showRelatedRecords: boolean;\n}\n\n/**\n * Object indicating the field display order for the related records and whether they should be sorted in ascending or descending order.\n */\nexport interface IOrderByField {\n  /** The attribute value of the field selected that will drive the sorting of related records. */\n  field?: string;\n  /** Set the ascending or descending sort order of the returned related records. */\n  order?: \"asc\" | \"desc\";\n}\n\n/**\n * The value object contains information for popup windows about how images should be retrieved or charts constructed.\n */\nexport interface IMediaInfoValue {\n  /** Used with charts. An array of strings, with each string containing the name of a field to display in the chart. */\n  fields?: string[];\n  /** Used with images. A string containing a URL to be launched in a browser when a user clicks the image. */\n  linkURL?: string;\n  /** Used with charts. An optional string containing the name of a field. The values of all fields in the chart will be normalized (divided) by the value of this field. */\n  normalizeField?: string;\n  /** Used with images. A string containing the URL to the image. */\n  sourceURL?: string;\n  /** String value indicating the tooltip for a chart specified from another field. This field is needed when related records are not sued. It is used for showing tooltips from another field in the same layer or related layer/table. */\n  tooltipField?: string;\n}\n\n/**\n * Defines an image or a chart to be displayed in a popup window.\n */\nexport interface IMediaInfo {\n  /** A string caption describing the media. */\n  caption?: any;\n  /** Refresh interval of the layer in minutes. Non-zero value indicates automatic layer refresh at the specified interval. Value of 0 indicates auto refresh is not enabled. If the property does not exist, it's equivalent to having a value of 0. Only applicable when type is set to image. */\n  refreshInterval?: any;\n  /** A string title for the media. */\n  title?: string | null;\n  /** A string defining the type of media. */\n  type?: \"image\" | \"barchart\" | \"columnchart\" | \"linechart\" | \"piechart\";\n\n  /** A value object containing information about how the image should be retrieved or how the chart should be constructed. */\n  value?: IMediaInfoValue | null;\n}\n\n/**\n * Popup elements allow users to author popups, using multiple elements such as tabular views, string description, media (charts and images), and attachments of the attributes\n * and control the order in which they appear. Specifically, popupElements do the following:\n * 1) provide the ability to explicitly add a field/ value table in addition to a description,\n * 2) allow adding multiple description elements, and\n * 3) allow a user to author and consume elements of a popup in the order of their choosing.\n */\nexport interface IPopupElement {\n  /**\n   * This property applies to elements of type attachments. A string value indicating how to display the attachment.\n   * Possible values are, preview, and list. If list is specified, attachments show as links.\n   */\n  displayType?: \"preview\" | \"list\";\n  /**\n   * This property applies to elements of type fields. It is an array of popupInfo.fieldInfo objects representing a field/value pair displayed as a table within the popupElement.\n   * If the fieldInfos property is not provided, the popupElement will display whatever is specified directly in the popupInfo.fieldInfos property.\n   */\n  fieldInfos?: IFieldInfo[];\n  /**\n   * This property applies to elements of type media. An array of popupInfo.mediaInfo objects representing an image or chart for display.\n   * If no mediaInfos property is provided, the popupElement will display whatever is specified in the popupInfo.mediaInfo property.\n   */\n  mediaInfos?: IMediaInfo[];\n  /**\n   * This property applies to elements of type text. This is string value indicating the text to be displayed within the popupElement.\n   * If no text property is provided, the popupElement will display whatever is specified in the popupInfo.description property.\n   */\n  text?: string;\n  /** String value indicating which elements to use. */\n  type?: \"text\" | \"fields\" | \"media\" | \"attachments\";\n}\n\nexport interface IEditingInfo {\n  /** date of last edit to the layer  */\n  lastEditDate?: number;\n}\n\nexport type FeatureEditTool =\n  | \"esriFeatureEditToolAutoCompletePolygon\"\n  | \"esriFeatureEditToolPolygon\"\n  | \"esriFeatureEditToolTriangle\"\n  | \"esriFeatureEditToolRectangle\"\n  | \"esriFeatureEditToolLeftArrow\"\n  | \"esriFeatureEditToolRightArrow\"\n  | \"esriFeatureEditToolEllipse\"\n  | \"esriFeatureEditToolUpArrow\"\n  | \"esriFeatureEditToolDownArrow\"\n  | \"esriFeatureEditToolCircle\"\n  | \"esriFeatureEditToolFreehand\"\n  | \"esriFeatureEditToolLine\"\n  | \"esriFeatureEditToolNone\"\n  | \"esriFeatureEditToolText\"\n  | \"esriFeatureEditToolPoint\";\n\n/**\n * Templates describe features that can be created in a layer. They are generally used with feature collections and editable web-based CSV layers.\n * Templates are not used with ArcGIS feature services as these already have templates defined in the service. They are also defined as properties\n * of the layer definition when there are no defined types. Otherwise, templates are defined as properties of the types.\n */\nexport interface ITemplate {\n  /** A string value containing a detailed description of the template. */\n  description?: any;\n  /**\n   * An optional string that can define a client-side drawing tool to be used with this feature. For example, map notes used by the Online Map Viewer use this to represent the viewer's different drawing tools.\n   */\n  drawingTool?: FeatureEditTool;\n  /** A string containing a user-friendly name for the template. */\n  name?: string;\n  /** A feature object representing a prototypical feature for the template. */\n  prototype?: IFeature;\n}\n\nexport interface ILayerDefinition extends IHasZM {\n  /** Boolean value indicating whether the geometry of the features in the layer can be edited. */\n  allowGeometryUpdates?: boolean;\n  /** A comma separated list of supported capabilities, e.g. Query,Editing. */\n  capabilities?: string;\n  /** String value for the copyright text information for the layer. */\n  copyrightText?: string;\n  /** Numeric value indicating the server version of the layer. */\n  currentVersion?: number;\n  /** Boolean value indicating whether the layer's visibility is turned on. */\n  defaultVisibility?: boolean;\n  /** Stores interactive filters. */\n  definitionEditor?: IDefinitionEditor;\n  /** SQL-based definition expression string that narrows the data to be displayed in the layer. */\n  definitionExpression?: string;\n  /** String value of the layer as defined in the map service. */\n  description?: string;\n  /** A string value that summarizes the feature. */\n  displayField?: string;\n  /** Contains drawing, labeling, and transparency information. */\n  drawingInfo?: any;\n  /** An object defining the rectangular area. */\n  extent?: IExtent | null;\n  /** An object defining the editing info (last edit date). */\n  editingInfo?: IEditingInfo;\n  /** Feature reductions declutter the screen by hiding features that would otherwise intersect with other features on screen. */\n  featureReduction?: any;\n  /** An array of field objects containing information about the attribute fields for the feature collection or layer. */\n  fields?: IField[];\n  /** A string defining the type of geometry. Possible geometry types are: esriGeometryPoint, esriGeometryMultipoint, esriGeometryPolyline, esriGeometryPolygon, and esriGeometryEnvelope. */\n  geometryType?: GeometryType;\n  /** The unique identifier for a feature or table row within a geodatabase. */\n  globalIdField?: string;\n  /** Indicates whether attachments should be loaded for the layer. */\n  hasAttachments?: boolean;\n  /** Boolean value indicating whether data changes. True if it does not. */\n  hasStaticData?: boolean;\n  /** String value indicating the HTML popup type. */\n  htmlPopupType?:\n    | \"esriServerHTMLPopupTypeNone\"\n    | \"esriServerHTMLPopupTypeAsURL\"\n    | \"esriServerHTMLPopupTypeAsHTMLText\";\n\n  /** The identifier assigned to the layer. */\n  id?: number;\n  /** Boolean value indicating whether the data is versioned. */\n  isDataVersioned?: boolean;\n  /** Numeric value indicating tbe maximum number of records that will be returned at once for a query. */\n  maxRecordCount?: number;\n  /** Represents the maximum scale at which the layer definition will be applied. This does not apply to layers of type: ArcGISMapServiceLayer, ImageServiceVectorLayer or ImageServiceLayer. */\n  maxScale?: number;\n  /** Represents the minimum scale at which the layer definition will be applied. This does not apply to layers of type: ArcGISMapServiceLayer, ImageServiceVectorLayer or ImageServiceLayer. */\n  minScale?: number;\n  /** Contains a unique name for the layer that can be displayed in a legend. */\n  name?: string;\n  /** Indicates the name of the object ID field in the dataset. */\n  objectIdField?: string;\n  /** Dictates whether a client can support having an end user modify symbols on individual features. */\n  overrideSymbols?: boolean;\n  /** Indicates range information */\n  rangeInfos?: any;\n  /** An object indicating the layerDefinition's layer source. */\n  source?: any;\n  /** An object containing the WKID or WKT identifying the spatial reference of the layer's geometry. */\n  spatialReference?: ISpatialReference;\n  /** String value indicating the output formats that are supported in a query. */\n  supportedQueryFormats?: string;\n  /** Boolean value indicating whether the layer supports orderByFields in a query operation. */\n  supportsAdvancedQueries?: boolean;\n  /** Boolean value indicating whether the layer supports uploading attachments with the Uploads operation. This can then be used in the Add Attachment and Update Attachment operations. */\n  supportsAttachmentsByUploadId?: boolean;\n  /** Boolean value indicating whether the layer supports the Calculate REST operation when updating features. */\n  supportsCalculate?: boolean;\n  /** Boolean value indicating whether the layer supports exceedsLimit in a query operation. */\n  supportsExceedsLimitStatistics?: boolean;\n  /** Boolean value indicating whether the layer supports rolling back edits made on a feature layer if some of the edits fail. */\n  supportsRollbackOnFailureParameter?: boolean;\n  /** Boolean value indicating whether feature layer query operations support statistical functions. */\n  supportsStatistics?: boolean;\n  /** Boolean value indicating whether the validateSQL operation is supported across a feature service layer. */\n  supportsValidateSql?: boolean;\n  /** A property of the layer definition when there are no types defined; otherwise, templates are defined as properties of the types. */\n  templates?: ITemplate[];\n  /** The time info metadata of the layer. May be set for feature layers inside a feature collection item. */\n  timeInfo?: any;\n  /** Indicates whether the layerDefinition applies to a Feature Layer or a Table. */\n  type?: \"Feature Layer\" | \"Table\";\n  /** Contains the name of the field holding the type ID for the features. */\n  typeIdField?: string;\n  /** Contains information about an attribute field. */\n  types?: any;\n  /** String value indicating the attribute field that is used to control the visibility of a feature.\n   * If applicable, when rendering a feature the client should use this field to control visibility.\n   * The field's values are 0 = do not display, 1 = display.\n   */\n  visibilityField?: string;\n  relationships?: any[];\n  editFieldsInfo?: {\n    creationDateField?: string;\n    creatorField?: string;\n    editDateField?: string;\n    editorField?: string;\n  };\n  parentLayerId?: number;\n  ownershipBasedAccessControlForFeatures?: boolean;\n  syncCanReturnChanges?: boolean;\n  archivingInfo?: {\n    supportsQueryWithHistoricMoment?: boolean;\n    startArchivingMoment?: number;\n  };\n  supportsValidateSQL?: boolean;\n  advancedQueryCapabilities?: {\n    supportsPagination?: boolean;\n    supportsTrueCurve?: boolean;\n    supportsQueryWithDistance?: boolean;\n    supportsReturningQueryExtent?: boolean;\n    supportsStatistics?: boolean;\n    supportsOrderBy?: boolean;\n    supportsDistinct?: boolean;\n    supportsSqlExpression?: boolean;\n    supportsPercentileStatistics?: boolean;\n  };\n  allowTrueCurvesUpdates?: boolean;\n  onlyAllowTrueCurveUpdatesByTrueCurveClients?: boolean;\n  supportsApplyEditsWithGlobalIds?: boolean;\n  subtypeField?: string;\n  indexes?: any[];\n  dateFieldsTimeReference?: {\n    timeZone?: string;\n    respectsDaylightSaving?: boolean;\n  };\n  useStandardizedQueries?: boolean;\n}\n", "/* Copyright (c) 2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { request, cleanUrl } from \"@esri/arcgis-rest-request\";\nimport { IGetLayerOptions, IFeatureServiceDefinition } from \"./helpers.js\";\n\n/**\n * Feature Service request. See the [REST Documentation](https://developers.arcgis.com/rest/services-reference/feature-service.htm) for more information.\n *\n * ```js\n * import { getService } from '@esri/arcgis-rest-feature-service';\n * //\n * getService({\n *   url: \"https://sampleserver6.arcgisonline.com/arcgis/rest/services/ServiceRequest/FeatureServer\"\n * })\n *   .then(response) // { name: \"311\", id: 0, ... }\n * ```\n *\n * @param options - Options for the request.\n * @returns A Promise that will resolve with the getService response.\n */\nexport function getService(\n  options: IGetLayerOptions\n): Promise<IFeatureServiceDefinition> {\n  return request(cleanUrl(options.url), options);\n}\n", "/* Copyright (c) 2017-2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport {\n  request,\n  cleanUrl,\n  appendCustomParams,\n  ISpatialReference,\n  IFeatureSet,\n  IFeature,\n  Units,\n  IExtent\n} from \"@esri/arcgis-rest-request\";\n\nimport {\n  IGetLayerOptions,\n  ISharedQueryOptions,\n  IStatisticDefinition\n} from \"./helpers.js\";\n\n/**\n * Request options to fetch a feature by id.\n */\nexport interface IGetFeatureOptions extends IGetLayerOptions {\n  /**\n   * Unique identifier of the feature.\n   */\n  id: number;\n}\n\n/**\n * feature query request options. See [REST Documentation](https://developers.arcgis.com/rest/services-reference/query-feature-service-layer-.htm) for more information.\n */\nexport interface IQueryFeaturesOptions extends ISharedQueryOptions {\n  objectIds?: number[];\n  relationParam?: string;\n  // NOTE: either time=1199145600000 or time=1199145600000, 1230768000000\n  time?: number | number[];\n  distance?: number;\n  units?: Units;\n  /**\n   * Attribute fields to include in the response. Defaults to \"*\"\n   */\n  outFields?: \"*\" | string[];\n  returnGeometry?: boolean;\n  maxAllowableOffset?: number;\n  geometryPrecision?: number;\n  // NOTE: either WKID or ISpatialReference\n  inSR?: string | ISpatialReference;\n  outSR?: string | ISpatialReference;\n  gdbVersion?: string;\n  returnDistinctValues?: boolean;\n  returnIdsOnly?: boolean;\n  returnCountOnly?: boolean;\n  returnExtentOnly?: boolean;\n  orderByFields?: string;\n  groupByFieldsForStatistics?: string;\n  outStatistics?: IStatisticDefinition[];\n  returnZ?: boolean;\n  returnM?: boolean;\n  multipatchOption?: \"xyFootprint\";\n  resultOffset?: number;\n  resultRecordCount?: number;\n  // TODO: IQuantizationParameters?\n  quantizationParameters?: any;\n  returnCentroid?: boolean;\n  resultType?: \"none\" | \"standard\" | \"tile\";\n  // to do: convert from Date() to epoch time internally\n  historicMoment?: number;\n  returnTrueCurves?: false;\n  sqlFormat?: \"none\" | \"standard\" | \"native\";\n  returnExceededLimitFeatures?: boolean;\n  /**\n   * Response format. Defaults to \"json\"\n   * NOTE: for \"pbf\" you must also supply `rawResponse: true`\n   * and parse the response yourself using `response.arrayBuffer()`\n   */\n  f?: \"json\" | \"geojson\" | \"pbf\";\n  /**\n   * someday...\n   *\n   * If 'true' the query will be preceded by a metadata check to gather info about coded value domains and result values will be decoded. If a fieldset is provided it will be used to decode values and no internal metadata request will be issued.\n   */\n  // decodeValues?: boolean | IField[];\n}\n\nexport interface IQueryFeaturesResponse extends IFeatureSet {\n  exceededTransferLimit?: boolean;\n}\n\n/**\n * query all features request options. See [REST Documentation](https://developers.arcgis.com/rest/services-reference/query-feature-service-layer-.htm) for more information.\n */\nexport interface IQueryAllFeaturesOptions extends ISharedQueryOptions {\n  objectIds?: number[];\n  relationParam?: string;\n  // NOTE: either time=1199145600000 or time=1199145600000, 1230768000000\n  time?: number | number[];\n  distance?: number;\n  units?: Units;\n  /**\n   * Attribute fields to include in the response. Defaults to \"*\"\n   */\n  outFields?: \"*\" | string[];\n  returnGeometry?: boolean;\n  maxAllowableOffset?: number;\n  geometryPrecision?: number;\n  // NOTE: either WKID or ISpatialReference\n  inSR?: string | ISpatialReference;\n  outSR?: string | ISpatialReference;\n  gdbVersion?: string;\n  orderByFields?: string;\n  groupByFieldsForStatistics?: string;\n  outStatistics?: IStatisticDefinition[];\n  returnZ?: boolean;\n  returnM?: boolean;\n  multipatchOption?: \"xyFootprint\";\n  resultOffset?: number;\n  resultRecordCount?: number;\n  // TODO: IQuantizationParameters?\n  quantizationParameters?: any;\n  resultType?: \"none\" | \"standard\" | \"tile\";\n  // to do: convert from Date() to epoch time internally\n  historicMoment?: number;\n  returnTrueCurves?: false;\n  sqlFormat?: \"none\" | \"standard\" | \"native\";\n  returnExceededLimitFeatures?: true;\n  /**\n   * Response format. Defaults to \"json\"\n   * NOTE: for \"pbf\" you must also supply `rawResponse: true`\n   * and parse the response yourself using `response.arrayBuffer()`\n   */\n  f?: \"json\" | \"geojson\";\n  /**\n   * someday...\n   *\n   * If 'true' the query will be preceded by a metadata check to gather info about coded value domains and result values will be decoded. If a fieldset is provided it will be used to decode values and no internal metadata request will be issued.\n   */\n  // decodeValues?: boolean | IField[];\n}\n\nexport interface IQueryAllFeaturesResponse extends IFeatureSet {\n  exceededTransferLimit?: true;\n}\n\nexport interface IQueryResponse {\n  count?: number;\n  extent?: IExtent;\n  objectIdFieldName?: string;\n  objectIds?: number[];\n}\n\n/**\n * Get a feature by id.\n *\n * ```js\n * import { getFeature } from '@esri/arcgis-rest-feature-service';\n *\n * const url = \"https://services.arcgis.com/V6ZHFr6zdgNZuVG0/arcgis/rest/services/Landscape_Trees/FeatureServer/0\";\n *\n * getFeature({\n *   url,\n *   id: 42\n * }).then(feature => {\n *  console.log(feature.attributes.FID); // 42\n * });\n * ```\n *\n * @param requestOptions - Options for the request\n * @returns A Promise that will resolve with the feature or the [response](https://developer.mozilla.org/en-US/docs/Web/API/Response) itself if `rawResponse: true` was passed in.\n */\nexport function getFeature(\n  requestOptions: IGetFeatureOptions\n): Promise<IFeature> {\n  const url = `${cleanUrl(requestOptions.url)}/${requestOptions.id}`;\n\n  // default to a GET request\n  const options: IGetFeatureOptions = {\n    ...{ httpMethod: \"GET\" },\n    ...requestOptions\n  };\n  return request(url, options).then((response: any) => {\n    if (options.rawResponse) {\n      return response;\n    }\n    return response.feature;\n  });\n}\n\n/**\n * Query a feature service. See [REST Documentation](https://developers.arcgis.com/rest/services-reference/query-feature-service-layer-.htm) for more information.\n *\n * ```js\n * import { queryFeatures } from '@esri/arcgis-rest-feature-service';\n *\n * queryFeatures({\n *   url: \"http://sampleserver6.arcgisonline.com/arcgis/rest/services/Census/MapServer/3\",\n *   where: \"STATE_NAME = 'Alaska'\"\n * })\n *   .then(result)\n * ```\n *\n * @param requestOptions - Options for the request\n * @returns A Promise that will resolve with the query response.\n */\nexport function queryFeatures(\n  requestOptions: IQueryFeaturesOptions\n): Promise<IQueryFeaturesResponse | IQueryResponse> {\n  const queryOptions = appendCustomParams<IQueryFeaturesOptions>(\n    requestOptions,\n    [\n      \"where\",\n      \"objectIds\",\n      \"relationParam\",\n      \"time\",\n      \"distance\",\n      \"units\",\n      \"outFields\",\n      \"geometry\",\n      \"geometryType\",\n      \"spatialRel\",\n      \"returnGeometry\",\n      \"maxAllowableOffset\",\n      \"geometryPrecision\",\n      \"inSR\",\n      \"outSR\",\n      \"gdbVersion\",\n      \"returnDistinctValues\",\n      \"returnIdsOnly\",\n      \"returnCountOnly\",\n      \"returnExtentOnly\",\n      \"orderByFields\",\n      \"groupByFieldsForStatistics\",\n      \"outStatistics\",\n      \"returnZ\",\n      \"returnM\",\n      \"multipatchOption\",\n      \"resultOffset\",\n      \"resultRecordCount\",\n      \"quantizationParameters\",\n      \"returnCentroid\",\n      \"resultType\",\n      \"historicMoment\",\n      \"returnTrueCurves\",\n      \"sqlFormat\",\n      \"returnExceededLimitFeatures\",\n      \"f\"\n    ],\n    {\n      httpMethod: \"GET\",\n      params: {\n        // set default query parameters\n        where: \"1=1\",\n        outFields: \"*\",\n        ...requestOptions.params\n      }\n    }\n  );\n\n  return request(`${cleanUrl(requestOptions.url)}/query`, queryOptions);\n}\n\n/**\n * Query a feature service to retrieve all features. See [REST Documentation](https://developers.arcgis.com/rest/services-reference/query-feature-service-layer-.htm) for more information.\n *\n * ```js\n * import { queryAllFeatures } from '@esri/arcgis-rest-feature-service';\n *\n * queryAllFeatures({\n *   url: \"http://sampleserver6.arcgisonline.com/arcgis/rest/services/Census/MapServer/3\",\n *   where: \"STATE_NAME = 'Alaska'\"\n * })\n *   .then(result)\n * ```\n *\n * @param requestOptions - Options for the request\n * @returns A Promise that will resolve with the query response.\n */\nexport async function queryAllFeatures(\n  requestOptions: IQueryAllFeaturesOptions\n): Promise<IQueryAllFeaturesResponse> {\n  let offset = 0;\n  let hasMore = true;\n  let allFeaturesResponse: IQueryAllFeaturesResponse | null = null;\n\n  // retrieve the maxRecordCount for the service\n  const pageSizeResponse = await request(requestOptions.url, {\n    httpMethod: \"GET\"\n  });\n  // default the pageSize to 2000 if it is not provided\n  const pageSize = pageSizeResponse.maxRecordCount || 2000;\n  const userRecordCount = requestOptions.params?.resultRecordCount;\n  // use the user defined count only if it's less than or equal to the page size, otherwise use pageSize\n  const recordCountToUse =\n    userRecordCount && userRecordCount <= pageSize ? userRecordCount : pageSize;\n\n  while (hasMore) {\n    const pagedOptions = {\n      ...requestOptions,\n      params: {\n        where: \"1=1\",\n        outFields: \"*\",\n        ...(requestOptions.params || {}),\n        resultOffset: offset,\n        resultRecordCount: recordCountToUse\n      }\n    };\n\n    const queryOptions = appendCustomParams<IQueryAllFeaturesOptions>(\n      pagedOptions,\n      [\n        \"where\",\n        \"objectIds\",\n        \"relationParam\",\n        \"time\",\n        \"distance\",\n        \"units\",\n        \"outFields\",\n        \"geometry\",\n        \"geometryType\",\n        \"spatialRel\",\n        \"returnGeometry\",\n        \"maxAllowableOffset\",\n        \"geometryPrecision\",\n        \"inSR\",\n        \"outSR\",\n        \"gdbVersion\",\n        \"orderByFields\",\n        \"groupByFieldsForStatistics\",\n        \"outStatistics\",\n        \"returnZ\",\n        \"returnM\",\n        \"multipatchOption\",\n        \"resultOffset\",\n        \"resultRecordCount\",\n        \"quantizationParameters\",\n        \"resultType\",\n        \"historicMoment\",\n        \"returnTrueCurves\",\n        \"sqlFormat\",\n        \"f\"\n      ],\n      {\n        httpMethod: \"GET\",\n        params: {\n          where: \"1=1\",\n          outFields: \"*\",\n          returnExceededLimitFeatures: true,\n          ...pagedOptions.params\n        }\n      }\n    );\n    const response: IQueryAllFeaturesResponse = await request(\n      `${cleanUrl(requestOptions.url)}/query`,\n      queryOptions\n    );\n\n    // save the first response structure\n    if (!allFeaturesResponse) {\n      allFeaturesResponse = { ...response };\n    } else {\n      // append features of subsequent requests\n      allFeaturesResponse.features = allFeaturesResponse.features.concat(\n        response.features\n      );\n    }\n\n    const returnedCount = response.features.length;\n\n\n    // check if the response has exceededTransferLimit handles both the standard json and geojson responses\n    const exceededTransferLimit =\n      response.exceededTransferLimit ||\n      (response as any).properties?.exceededTransferLimit;\n\n    // check if there are more features\n    if (returnedCount < pageSize || !exceededTransferLimit) {\n      hasMore = false;\n    } else {\n      offset += pageSize;\n    }\n  }\n\n  return allFeaturesResponse;\n}\n", "import type { GeoJSONSourceSpecification, LayerSpecification, VectorSourceSpecification } from '@maplibre/maplibre-gl-style-spec';\nimport type { Map } from 'maplibre-gl';\nimport AttributionControl from './AttributionControl';\nimport type { RestJSAuthenticationManager } from './Util';\n\n/**\n * Union type representing the MapLibre source specifications supported by hosted layers.\n *\n * @remarks\n * This type defines the data source formats that can be used with ArcGIS hosted layers\n * in MapLibre maps. It currently supports loading data as vector tile sources and GeoJSON sources,\n * which cover the most common use cases for ArcGIS Feature Services and Vector Tile Services.\n *\n * - `VectorSourceSpecification` - For vector tile sources, typically used with ArcGIS Vector Tile Services\n * - `GeoJSONSourceSpecification` - For GeoJSON data sources, typically used with ArcGIS Feature Services converted to GeoJSON\n *\n * @example\n * ```typescript\n * // Vector source example\n * const vectorSource: SupportedSourceSpecification = {\n *   type: 'vector',\n *   tiles: ['https://services.arcgis.com/.../{z}/{y}/{x}.pbf'],\n *   attribution: 'Esri'\n * };\n *\n * // GeoJSON source example\n * const geoJsonSource: SupportedSourceSpecification = {\n *   type: 'geojson',\n *   data: 'https://services.arcgis.com/.../query?f=geojson'\n * };\n * ```\n *\n * @see {@link https://maplibre.org/maplibre-style-spec/sources/ | MapLibre Style Specification - Sources}\n */\nexport type SupportedSourceSpecification = VectorSourceSpecification | GeoJSONSourceSpecification;\n\n/**\n * Options accepted by all instances of HostedLayer.\n */\nexport interface IHostedLayerOptions {\n  /**\n   * An access token as a string.\n   */\n  token?: string;\n  /**\n   * The URL of the ArcGIS portal.\n   */\n  portalUrl?: string;\n  attribution?: string;\n}\n\n/**\n * Structure representing the metadata for an ArcGIS item. Go to {@link https://developers.arcgis.com/rest/users-groups-and-items/item/#response-properties | ArcGIS REST API - Item} to learn more.\n * @internal\n */\nexport interface IItemInfo {\n  portalUrl: string;\n  itemId: string;\n  accessInformation?: string; // Attribution information from item JSON\n  title?: string;\n  description?: string;\n  access?: string;\n  orgId?: string;\n  licenseInfo?: string;\n  // spatialReference?: string\n}\n\n/**\n * Object representing the metadata for an ArcGIS data service.\n * @internal\n */\nexport interface IDataServiceInfo {\n  serviceUrl: string;\n  copyrightText?: string; // Attribution information from service JSON\n  /*\n   * serviceItemId?: string; // This may differ from itemInfo.itemId if the itemId provided in constructor represents a style, group layer, etc\n   * serviceItemPortalUrl: string;\n   */\n}\n\nconst throwReadOnlyError = (propertyName: string) => {\n  throw new Error(`${propertyName} is a read-only property.`);\n};\n\n/**\n * Abstract class representing a [hosted layer](https://developers.arcgis.com/documentation/portal-and-data-services/data-services/types-of-data-services/) for MapLibre GL JS.\n * This class provides a common base for loading data hosted in ArcGIS, such as feature layers and vector tile layers. It cannot be instantiated directly.\n * It includes methods for managing authentication, sources, layers, and adding them to a MapLibre map.\n * Subclasses must implement the `initialize` method to load data from ArcGIS.\n */\nexport abstract class HostedLayer {\n  /**\n   * An ArcGIS access token is required for accessing secure data layers. To get a token, go to the [Security and Authentication Guide](https://developers.arcgis.com/documentation/security-and-authentication/get-started/).\n   */\n  token: string;\n\n  protected _authentication?: RestJSAuthenticationManager;\n\n  /**\n   * Prevent public constructor from appearing in docs by making it protected.\n   * This keeps the class abstract while avoiding a displayed public constructor.\n   */\n  protected constructor() {\n    // intentionally empty\n    if (new.target === HostedLayer) throw new Error('HostedLayer is an abstract class and cannot be instantiated directly.');\n  }\n\n  /**\n   * Stores custom attribution text for the hosted layer\n   */\n  protected _customAttribution: string;\n\n  /**\n   * Retrieves information about the associated hosted data service in ArcGIS.\n   */\n  protected _serviceInfo: IDataServiceInfo;\n\n  /**\n   * Retrieves information about the associated ArcGIS item.\n   */\n  protected _itemInfo?: IItemInfo;\n\n  /**\n   * Contains formatted maplibre sources for adding to map.\n   */\n  protected _sources: { [_: string]: SupportedSourceSpecification };\n  protected _layers: LayerSpecification[];\n\n  /**\n   * Internal flag to track layer loading.\n   */\n  protected _ready: boolean;\n\n  /**\n   * A MapLibre GL JS map.\n   */\n  protected _map?: Map;\n\n  /**\n   * Retrieves the sources for the hosted layer.\n   */\n  get sources(): Readonly<{ [_: string]: SupportedSourceSpecification }> {\n    return Object.freeze(this._sources);\n  }\n\n  /**\n   * Sets the sources for the hosted layer.\n   */\n  set sources(value: { [_: string]: SupportedSourceSpecification }) {\n    throwReadOnlyError('sources');\n  }\n\n  /**\n   * Retrieves the source for the hosted layer.\n   */\n  get source(): Readonly<SupportedSourceSpecification> | undefined {\n    const sourceIds = Object.keys(this._sources);\n    if (sourceIds.length !== 1) return undefined;\n\n    return Object.freeze(this._sources[sourceIds[0]]);\n  }\n\n  /**\n   * Sets the source for the hosted layer.\n   */\n  set source(_) {\n    throwReadOnlyError('source');\n  }\n\n  /**\n   * Retrieves the source ID for the hosted layer.\n   */\n  get sourceId(): Readonly<string> | undefined {\n    const sourceIds = Object.keys(this._sources);\n    if (sourceIds.length !== 1) return undefined;\n\n    return Object.freeze(sourceIds[0]);\n  }\n\n  /**\n   * Sets the source ID for the hosted layer.\n   */\n  set sourceId(_) {\n    throwReadOnlyError('sourceId');\n  }\n\n  /**\n   * Retrieves the layers for the hosted layer.\n   */\n  get layers(): Readonly<LayerSpecification[]> {\n    return Object.freeze(this._layers);\n  }\n\n  /**\n   * Sets the layers for the hosted layer.\n   */\n  set layers(_) {\n    throwReadOnlyError('layers');\n  }\n\n  /**\n   * Retrieves the layer for the hosted layer.\n   */\n  get layer(): Readonly<LayerSpecification> | undefined {\n    if (this._layers.length !== 1) return undefined;\n\n    return Object.freeze(this._layers[0]);\n  }\n\n  set layer(_) {\n    throwReadOnlyError('layer');\n  }\n\n  protected _onAdd(map: Map) {\n    if (map) this._map = map;\n    if (!this._map) throw new Error('No map');\n    // Handle attribution\n    const esriAttribution = new AttributionControl();\n    if (esriAttribution.canAdd(this._map)) this._map.addControl(esriAttribution);\n  }\n\n  /**\n   * Changes the ID of a maplibre style source, and updates all associated maplibre style layers.\n   * @param oldId - The source ID to be changed.\n   * @param newId - The new source ID.\n   */\n  setSourceId(oldId: string, newId: string): void {\n    // Update ID of source\n    const newSources = structuredClone(this._sources);\n    newSources[newId] = newSources[oldId];\n    delete newSources[oldId];\n\n    this._sources = newSources;\n\n    // Update source ID property of all layers\n    this._layers.forEach((lyr) => {\n      if (lyr['source'] == oldId) lyr['source'] = newId;\n    });\n  }\n\n  /**\n   * Sets the data attribution of the specified source\n   * @param sourceId - The ID of the maplibre style source.\n   * @param attribution - Custom attribution text.\n   */\n  setAttribution(sourceId: string, attribution: string): void {\n    if (!sourceId || !attribution) throw new Error('Must provide a source ID and attribution');\n    const newSources = structuredClone(this._sources);\n    newSources[sourceId].attribution = attribution;\n    this._sources = newSources;\n  }\n\n  /**\n   * Returns a mutable copy of the specified source.\n   * @param sourceId - The ID of the maplibre style source to copy.\n   */\n  copySource(sourceId: string): SupportedSourceSpecification {\n    return structuredClone(this._sources[sourceId]);\n  }\n\n  /**\n   * Returns a mutable copy of the specified layer\n   * @param layerId - The ID of the maplibre style layer to copy\n   */\n  copyLayer(layerId: string): LayerSpecification {\n    for (let i = 0; i < this._layers.length; i++) {\n      if (this._layers[i].id == layerId) return structuredClone(this._layers[i]);\n    }\n    throw new Error(`No layer with ID ${layerId} exists.`);\n  }\n\n  /**\n   * Convenience method that adds all associated Maplibre sources and data layers to a map.\n   * @param map - A [MapLibre GL JS map](https://maplibre.org/maplibre-gl-js/docs/API/classes/Map/)\n   */\n  addSourcesAndLayersTo(map: Map): HostedLayer {\n    if (!this._ready) throw new Error('Cannot add sources and layers to map: Object has not finished loading.');\n    this._map = map;\n    Object.keys(this._sources).forEach((sourceId) => {\n      map.addSource(sourceId, this._sources[sourceId]);\n    });\n    this._layers.forEach((layer) => {\n      map.addLayer(layer);\n    });\n    this._onAdd(map);\n    return this;\n  }\n\n  addSourcesTo(map: Map): HostedLayer {\n    if (!this._ready) throw new Error('Cannot add sources to map: Object has not finished loading.');\n    this._map = map;\n    Object.keys(this._sources).forEach((sourceId) => {\n      map.addSource(sourceId, this._sources[sourceId]);\n    });\n    this._onAdd(map);\n    return this;\n  }\n\n  /**\n   * Add layers to a maplibre map.\n   * @param map - A maplibre map object\n   * @returns\n   */\n  addLayersTo(map: Map): HostedLayer {\n    if (!this._ready) throw new Error('Cannot add layers to map: Object has not finished loading.');\n    this._map = map;\n    this._layers.forEach((layer) => {\n      map.addLayer(layer);\n    });\n    this._onAdd(map);\n    return this;\n  }\n\n  /**\n   * Initializes the layer with data from ArcGIS. Called to instantiate a class.\n   */\n  abstract initialize(): Promise<HostedLayer>;\n}\n\nexport default HostedLayer;\n/*\n * Copyright 2025 Esri\n *\n * Licensed under the Apache License Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n", "import type { GeometryType, IGeometry, ILayerDefinition, IQueryResponse, ISpatialReference, SpatialRelationship } from '@esri/arcgis-rest-feature-service';\r\nimport { getLayer, getService, queryAllFeatures, queryFeatures } from '@esri/arcgis-rest-feature-service';\r\nimport { getItem } from '@esri/arcgis-rest-portal';\r\nimport { type IParams } from '@esri/arcgis-rest-request';\r\nimport type { GeoJSONSourceSpecification, LayerSpecification } from 'maplibre-gl';\r\nimport type { IHostedLayerOptions } from './HostedLayer';\r\nimport { HostedLayer } from './HostedLayer';\r\nimport { checkItemId, checkServiceUrlType, cleanUrl, warn, wrapAccessToken } from './Util';\r\n\r\n/*\r\n *const geoJSONDefaultStyleMap = {\r\n *    \"Point\":\"circle\",\r\n *    \"MultiPoint\":\"circle\",\r\n *    \"LineString\":\"line\",\r\n *    \"MultiLineString\":\"line\",\r\n *    \"Polygon\":\"fill\",\r\n *    \"MultiPolygon\":\"fill\"\r\n *}\r\n */\r\n\r\nconst esriGeometryDefaultStyleMap: { [_: string]: 'circle' | 'line' | 'fill' } = {\r\n  esriGeometryPoint: 'circle',\r\n  esriGeometryMultipoint: 'circle',\r\n  esriGeometryPolyline: 'line',\r\n  esriGeometryPolygon: 'fill',\r\n  esriGeometryEnvelope: 'fill',\r\n  esriGeometryMultiPatch: 'fill',\r\n};\r\n\r\nconst defaultLayerPaintMap = {\r\n  circle: {\r\n    'circle-color': 'rgb(0,0,0)',\r\n  }, // \"Esri blue\" alternates: #4f81bd #365d8d\r\n  line: {\r\n    'line-color': 'rgb(0,0,0)',\r\n    'line-width': 3,\r\n  }, // \"Esri blue\" alternates: #0064ff\r\n  fill: {\r\n    'fill-color': 'rgba(0,0,0,0.25)',\r\n    'fill-outline-color': 'rgb(0,0,0)',\r\n  }, // \"Esri blue\" alternates: #0064ff #6e6e6e\r\n};\r\n\r\n/**\r\n * Options supported by FeatureLayer.\r\n */\r\nexport interface IFeatureLayerOptions extends IHostedLayerOptions {\r\n  itemId?: string;\r\n  url?: string;\r\n  query?: IQueryOptions;\r\n}\r\n\r\n/**\r\n * Parameters for feature layer query request.\r\n * @see https://developers.arcgis.com/rest/services-reference/enterprise/query-feature-service-layer/#request-parameters\r\n */\r\nexport interface IQueryOptions {\r\n  gdbVersion?: string;\r\n  geometry?: IGeometry;\r\n  geometryType?: GeometryType;\r\n  geometryPrecision?: number;\r\n  inSR?: string | ISpatialReference;\r\n  outFields?: string[] | '*';\r\n  params?: IParams;\r\n  spatialRel?: SpatialRelationship;\r\n  sqlFormat?: 'none' | 'standard' | 'native';\r\n  where?: string;\r\n}\r\n\r\nexport type SupportedInputTypes = 'ItemId' | 'FeatureService' | 'FeatureLayer';\r\n\r\n/**\r\n * Class representing a feature layer for MapLibre GL JS.\r\n * This class allows you to load and display [ArcGIS feature layers](https://developers.arcgis.com/documentation/portal-and-data-services/data-services/feature-services/introduction/) as GeoJSON sources in a MapLibre map.\r\n * It supports both item IDs from ArcGIS Online and feature service URLs.\r\n */\r\nexport class FeatureLayer extends HostedLayer {\r\n  declare protected _sources: { [_: string]: GeoJSONSourceSpecification };\r\n  declare protected _layers: LayerSpecification[];\r\n\r\n  private _inputType: SupportedInputTypes;\r\n\r\n  query?: IQueryOptions;\r\n\r\n  /**\r\n   * Constructor for FeatureLayer.\r\n   * @param options - Configuration options for the feature layer.\r\n   *\r\n   * Creating layers using the constructor directly is not recommended. Use {@link FeatureLayer.fromUrl} and {@link FeatureLayer.fromPortalItem} instead.\r\n   */\r\n  constructor(options: IFeatureLayerOptions) {\r\n    super();\r\n\r\n    if (!options || !(options.itemId || options.url)) throw new Error('Feature layer requires either an \\'itemId\\' or \\'url\\'.');\r\n\r\n    if (options?.token) this.token = options.token;\r\n\r\n    if (options?.attribution) this._customAttribution = options.attribution;\r\n\r\n    if (options.itemId && options.url)\r\n      warn('Both an item ID and service URL have been passed. Only the item ID will be used.');\r\n\r\n    if (options.itemId) {\r\n      if (checkItemId(options.itemId) == 'ItemId') this._inputType = 'ItemId';\r\n      else throw new Error('Argument `itemId` is not a valid item ID.');\r\n    }\r\n    else if (options.url) {\r\n      const urlType = checkServiceUrlType(options.url);\r\n      if (urlType && (urlType == 'FeatureLayer' || urlType == 'FeatureService')) this._inputType = urlType;\r\n      else throw new Error('Argument `url` is not a valid feature service URL.');\r\n    }\r\n\r\n    // Set up\r\n    if (this._inputType == 'ItemId') {\r\n      this._itemInfo = {\r\n        itemId: options.itemId,\r\n        portalUrl: options?.portalUrl ? options.portalUrl : 'https://www.arcgis.com/sharing/rest',\r\n      };\r\n    }\r\n    else if (this._inputType === 'FeatureLayer' || this._inputType === 'FeatureService') {\r\n      this._serviceInfo = {\r\n        serviceUrl: cleanUrl(options.url),\r\n      };\r\n    }\r\n\r\n    if (options?.query) {\r\n      if (this._inputType !== 'FeatureLayer')\r\n        throw new Error('Feature service queries are only supported with layer URLs, not item IDs. To use query parameters, call \\'FeatureLayer.fromUrl\\' with a service URL ending in \\/0, \\/1, etc.');\r\n\r\n      this.query = options.query;\r\n    }\r\n  }\r\n\r\n  private async _fetchAllFeatures(layerUrl: string, layerInfo: ILayerDefinition): Promise<GeoJSON.GeoJSON> {\r\n    if (!layerInfo.supportedQueryFormats.includes('geoJSON')) throw new Error('Feature service does not support GeoJSON format.');\r\n    if (!layerInfo.capabilities.includes('Query')) throw new Error('Feature service does not support queries.');\r\n    if (!layerInfo.advancedQueryCapabilities.supportsPagination) throw new Error('Feature service does not support pagination in queries');\r\n\r\n    let layerData: GeoJSON.GeoJSON;\r\n    if (layerInfo.supportsExceedsLimitStatistics) {\r\n      // Check if feature count exceeds limit\r\n      const featureCount = (await queryFeatures({\r\n        url: layerUrl,\r\n        authentication: this._authentication,\r\n        ...this.query,\r\n        returnCountOnly: true,\r\n      })) as IQueryResponse;\r\n      if (featureCount.count > 2000) {\r\n        warn('You are loading a large feature layer ( >2000 features) as GeoJSON. This may take some time; consider hosting your data as a vector tile layer instead.');\r\n      }\r\n\r\n      // Get all features\r\n      const response = await queryAllFeatures({\r\n        url: layerUrl,\r\n        authentication: this._authentication,\r\n        ...this.query,\r\n        f: 'geojson',\r\n      });\r\n\r\n      layerData = response as unknown as GeoJSON.GeoJSON;\r\n    }\r\n    else {\r\n      throw new Error(\r\n        'Feature layers hosted in old versions of ArcGIS Enterprise are not currently supported in this plugin. Support will be added in a future release: https://github.com/Esri/maplibre-arcgis/issues/5'\r\n      );\r\n    }\r\n    if (!layerData) throw new Error('Unable to load data.');\r\n\r\n    return layerData;\r\n  }\r\n\r\n  private async _loadLayer(layerUrl: string): Promise<void> {\r\n    const layerInfo = await getLayer({\r\n      authentication: this._authentication,\r\n      url: layerUrl,\r\n      httpMethod: 'GET',\r\n    });\r\n\r\n    const layerData = await this._fetchAllFeatures(layerUrl, layerInfo);\r\n\r\n    // Create maplibre source and layer for data\r\n    let sourceId = layerInfo.name;\r\n    if (sourceId in this._sources) {\r\n      // ensure source ID is unique\r\n      sourceId += layerUrl[layerUrl.length - 2]; // URL always ends in 0/, 1/, etc\r\n    }\r\n    this._sources[sourceId] = {\r\n      type: 'geojson',\r\n      attribution: this._setupAttribution(layerInfo),\r\n      data: layerData,\r\n    };\r\n\r\n    const layerType = esriGeometryDefaultStyleMap[layerInfo.geometryType];\r\n    const defaultLayer = {\r\n      source: sourceId,\r\n      id: `${sourceId}-layer`,\r\n      type: layerType,\r\n      paint: defaultLayerPaintMap[layerType],\r\n    };\r\n    this._layers.push(defaultLayer as LayerSpecification);\r\n\r\n    return;\r\n  }\r\n\r\n  private async _loadData(): Promise<void> {\r\n    this._sources = {};\r\n    this._layers = [];\r\n\r\n    // Wrap access token for use with REST JS\r\n    this._authentication = await wrapAccessToken(this.token);\r\n\r\n    let dataSource = this._inputType;\r\n    switch (dataSource) {\r\n      case 'ItemId': {\r\n        const itemResponse = await getItem(this._itemInfo.itemId, {\r\n          authentication: this._authentication,\r\n          portal: this._itemInfo.portalUrl,\r\n        });\r\n\r\n        if (!itemResponse.url) throw new Error('The provided ArcGIS portal item has no associated service URL.');\r\n        // in feature collections, there is still data at the /data endpoint ...... just a heads up\r\n\r\n        this._itemInfo = {\r\n          ...this._itemInfo,\r\n          accessInformation: itemResponse.accessInformation,\r\n          title: itemResponse.title,\r\n          description: itemResponse.description,\r\n          access: itemResponse.access,\r\n          orgId: itemResponse.orgId,\r\n          licenseInfo: itemResponse.licenseInfo,\r\n        };\r\n        this._serviceInfo = {\r\n          serviceUrl: itemResponse.url,\r\n        };\r\n        dataSource = 'FeatureService';\r\n        // falls through\r\n      }\r\n      // This case is not currently in use\r\n      case 'FeatureService': {\r\n        const serviceInfo = await getService({\r\n          url: this._serviceInfo.serviceUrl,\r\n          authentication: this._authentication,\r\n        });\r\n        // Add layers\r\n        if (serviceInfo.layers.length > 10) {\r\n          warn('This feature service contains more than 10 layers. Only the first 10 layers will be loaded.');\r\n        }\r\n        for (let i = 0; i < serviceInfo.layers.length && i < 10; i++) {\r\n          if (serviceInfo.layers[i]['subLayerIds']) {\r\n            warn('Feature layers with sublayers are not supported. This layer will not be added.');\r\n            return;\r\n          }\r\n          await this._loadLayer(`${cleanUrl(this._serviceInfo.serviceUrl)}${i}/`);\r\n        }\r\n        break;\r\n      }\r\n      case 'FeatureLayer': {\r\n        // Add single layer\r\n        await this._loadLayer(this._serviceInfo.serviceUrl); // TODO test on a layer with tables\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  private _setupAttribution(layerInfo: ILayerDefinition): string {\r\n    if (this._customAttribution) return this._customAttribution;\r\n\r\n    if (this._itemInfo?.accessInformation) return this._itemInfo.accessInformation;\r\n\r\n    if (this._serviceInfo?.copyrightText) return this._serviceInfo.copyrightText;\r\n\r\n    if (layerInfo.copyrightText) return layerInfo.copyrightText;\r\n\r\n    return '';\r\n  }\r\n\r\n  async initialize(): Promise<FeatureLayer> {\r\n    await this._loadData();\r\n    this._ready = true;\r\n    return this;\r\n  }\r\n\r\n  static async fromUrl(serviceUrl: string, options: IFeatureLayerOptions): Promise<FeatureLayer> {\r\n    const inputType = checkServiceUrlType(serviceUrl);\r\n    if (!inputType || !(inputType === 'FeatureService' || inputType === 'FeatureLayer')) throw new Error('Must provide a valid feature layer URL.');\r\n\r\n    const geojsonLayer = new FeatureLayer({\r\n      url: serviceUrl,\r\n      ...options,\r\n    });\r\n\r\n    await geojsonLayer.initialize();\r\n    return geojsonLayer;\r\n  }\r\n\r\n  static async fromPortalItem(itemId: string, options: IFeatureLayerOptions): Promise<FeatureLayer> {\r\n    if (checkItemId(itemId) !== 'ItemId') throw new Error('Must provide a valid item ID for an ArcGIS hosted feature layer.');\r\n\r\n    const geojsonLayer = new FeatureLayer({\r\n      itemId: itemId,\r\n      ...options,\r\n    });\r\n\r\n    await geojsonLayer.initialize();\r\n    return geojsonLayer;\r\n  }\r\n}\r\n\r\nexport default FeatureLayer;\r\n/*\r\n * Copyright 2025 Esri\r\n *\r\n * Licensed under the Apache License Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n", "import { getItem, getItemResource, getItemResources } from '@esri/arcgis-rest-portal';\nimport { request } from '@esri/arcgis-rest-request';\nimport type { LayerSpecification, StyleSpecification, VectorSourceSpecification } from '@maplibre/maplibre-gl-style-spec';\nimport { type IDataServiceInfo, type IHostedLayerOptions, type IItemInfo, HostedLayer } from './HostedLayer';\nimport { checkItemId, checkServiceUrlType, cleanUrl, isRelativePath, parseRelativeUrl, toCdnUrl, warn, wrapAccessToken } from './Util';\n\nexport interface IVectorTileServiceDefinition {\n  tiles: string[];\n  defaultStyles: string;\n  copyrightText: string;\n}\n\nexport interface IVectorTileLayerOptions extends IHostedLayerOptions {\n  itemId?: string;\n  url?: string;\n}\n\n/**\n * VectorTileServiceInfo interface.\n */\nexport interface IVectorTileServiceInfo extends IDataServiceInfo {\n  styleEndpoint?: string; // Usually \"/resources/styles\"\n  tiles?: string[]; // Usually \"[tile/{z}/{y}/{x}.pbf]\"\n}\n\n/**\n * Class representing a vector tile layer for MapLibre GL JS. This class allows you to load and display [ArcGIS vector tile layers](https://mapbox-migration-preview.gha.afd.arcgis.com/documentation/portal-and-data-services/data-services/vector-tile-services/introduction/) in a MapLibre GL JS map. It supports both item IDs from ArcGIS Online and feature service URLs.\n */\nexport class VectorTileLayer extends HostedLayer {\n  declare protected _serviceInfo: IVectorTileServiceInfo;\n  declare protected _itemInfo: IItemInfo;\n\n  declare protected _sources: { [_: string]: VectorSourceSpecification };\n  declare protected _layers: LayerSpecification[];\n\n  private _inputType: 'ItemId' | 'VectorTileService';\n  private _styleLoaded: boolean;\n  private _itemInfoLoaded: boolean;\n  private _serviceInfoLoaded: boolean;\n\n  /**\n   * Style specification.\n   */\n  style: StyleSpecification;\n\n  /* */\n  constructor(options: IVectorTileLayerOptions) {\n    super();\n    this._ready = false;\n    this._styleLoaded = false;\n    this._serviceInfoLoaded = false;\n    this._itemInfoLoaded = false;\n\n    if (!options || !(options.itemId || options.url)) throw new Error('Vector tile layer requires either an \\'itemId\\' or \\'url\\'.');\n\n    if (options.token) this.token = options.token;\n\n    if (options.attribution) this._customAttribution = options.attribution;\n\n    if (options.itemId && options.url)\n      console.warn('Both an item ID and service URL have been passed. Only the item ID will be used.');\n\n    if (options.itemId) {\n      if (checkItemId(options.itemId) == 'ItemId') this._inputType = 'ItemId';\n      else throw new Error('Argument `itemId` is not a valid item ID.');\n    }\n    else if (options.url) {\n      if (checkServiceUrlType(options.url) == 'VectorTileService') this._inputType = 'VectorTileService';\n      else throw new Error('Argument `url` is not a valid vector tile service URL.');\n    }\n\n    if (this._inputType === 'ItemId') {\n      this._itemInfo = {\n        itemId: options.itemId,\n        portalUrl: options?.portalUrl ? options.portalUrl : 'https://www.arcgis.com/sharing/rest',\n      };\n    }\n    else if (this._inputType === 'VectorTileService') {\n      this._serviceInfo = {\n        serviceUrl: cleanUrl(options.url),\n      };\n    }\n  }\n\n  /**\n   * Loads the style from ArcGIS.\n   * @internal\n   */\n  async _loadStyle(): Promise<StyleSpecification> {\n    let styleInfo: StyleSpecification | null = null;\n\n    this._authentication = await wrapAccessToken(this.token);\n\n    let styleSource = this._inputType;\n    switch (styleSource) {\n      case 'ItemId': {\n        await this._loadItemInfo();\n        styleInfo = await this._loadStyleFromItemId();\n        if (styleInfo) break;\n        else {\n          warn('Could not find a style resource associated with the provided item ID. Checking service URL instead...');\n          styleSource = 'VectorTileService';\n        } // falls through\n      }\n      case 'VectorTileService': {\n        await this._loadServiceInfo();\n        styleInfo = await this._loadStyleFromServiceUrl();\n        break;\n      }\n    }\n\n    if (!styleInfo) throw new Error('Unable to load style information from service URL or item ID.');\n\n    this._styleLoaded = true;\n    this.style = styleInfo;\n    return this.style;\n  }\n\n  async _loadStyleFromItemId(): Promise<StyleSpecification | null> {\n    const params = {\n      authentication: this._authentication,\n      portal: this._itemInfo.portalUrl,\n    };\n    // Load style info\n    let styleInfo: StyleSpecification | null = null;\n    // Try loading default style name first\n    try {\n      const rootStyle = (await getItemResource(this._itemInfo.itemId, {\n        ...params,\n        fileName: 'styles/root.json',\n        readAs: 'json',\n      })) as StyleSpecification;\n      styleInfo = rootStyle;\n      // Check for other style resources associated with the item\n    }\n    catch {\n      const itemResources = await getItemResources(this._itemInfo.itemId, {\n        ...params,\n      });\n\n      let styleFile: string | null = null;\n      if (itemResources.total > 0) {\n        itemResources.resources.forEach((entry) => {\n          if (entry.resource.startsWith('styles')) {\n            styleFile = entry.resource;\n          }\n        });\n      }\n      if (styleFile) {\n        const customStyle = (await getItemResource(this._itemInfo.itemId, {\n          ...params,\n          fileName: styleFile,\n          readAs: 'json',\n        })) as StyleSpecification;\n        styleInfo = customStyle;\n      }\n    }\n    return styleInfo;\n  }\n\n  async _loadStyleFromServiceUrl(): Promise<StyleSpecification | null> {\n    if (!this._serviceInfo.serviceUrl) throw new Error('No data service provided');\n    if (!this._serviceInfo.styleEndpoint) this._serviceInfo.styleEndpoint = 'resources/styles/';\n\n    const styleInfo = (await request(`${this._serviceInfo.serviceUrl}${this._serviceInfo.styleEndpoint}`, {\n      authentication: this._authentication,\n    })) as StyleSpecification;\n    return styleInfo;\n  }\n\n  /**\n   * Retrieves information from the data service about data attribution, associated item IDs, and more.\n   */\n  async _loadServiceInfo(): Promise<IVectorTileServiceInfo> {\n    const serviceResponse = (await request(this._serviceInfo.serviceUrl, {\n      authentication: this._authentication,\n    })) as IVectorTileServiceDefinition;\n\n    this._serviceInfo = {\n      ...this._serviceInfo,\n      tiles: serviceResponse.tiles,\n      styleEndpoint: cleanUrl(serviceResponse.defaultStyles),\n      copyrightText: serviceResponse.copyrightText,\n    };\n    this._serviceInfoLoaded = true;\n    return this._serviceInfo;\n  }\n\n  /**\n   * Retrieves information from the portal about item attribution and associated service URLs\n   */\n  async _loadItemInfo(): Promise<IItemInfo> {\n    const itemResponse = await getItem(this._itemInfo.itemId, {\n      authentication: this._authentication,\n      portal: this._itemInfo.portalUrl,\n    });\n\n    if (!itemResponse.url) throw new Error('Provided ArcGIS item ID has no associated data service.');\n\n    if (!this._serviceInfoLoaded) {\n      this._serviceInfo = {\n        serviceUrl: cleanUrl(itemResponse.url),\n        // serviceItemPortalUrl: this._itemInfo.portalUrl\n      };\n    }\n    this._itemInfo = {\n      ...this._itemInfo,\n      accessInformation: itemResponse.accessInformation,\n      title: itemResponse.title,\n      description: itemResponse.description,\n      access: itemResponse.access,\n      orgId: itemResponse.orgId,\n      licenseInfo: itemResponse.licenseInfo,\n    };\n    this._itemInfoLoaded = true;\n    return this._itemInfo;\n  }\n\n  _cleanStyle(style: StyleSpecification): void {\n    if (!style) throw new Error('Vector tile style has not been loaded from ArcGIS.');\n\n    if (!this._serviceInfo.serviceUrl) throw new Error('No data service provided');\n    if (!this._serviceInfo.styleEndpoint) this._serviceInfo.styleEndpoint = 'resources/styles/';\n    const styleUrl = `${this._serviceInfo.serviceUrl}${this._serviceInfo.styleEndpoint}`;\n\n    // Validate glyphs\n    if (style.glyphs) {\n      if (isRelativePath(style.glyphs)) style.glyphs = parseRelativeUrl(style.glyphs, styleUrl);\n      style.glyphs = toCdnUrl(style.glyphs);\n      if (this._authentication) style.glyphs = `${style.glyphs}?token=${this._authentication.token}`;\n    }\n\n    // Validate sprite\n    if (style.sprite) {\n      if (Array.isArray(style.sprite)) {\n        for (let spriteIndex = 0; spriteIndex < style.sprite.length; spriteIndex++) {\n          const sprite = style.sprite[spriteIndex];\n\n          if (isRelativePath(sprite.url)) sprite.url = parseRelativeUrl(sprite.url, styleUrl);\n          sprite.url = toCdnUrl(sprite.url);\n\n          if (this._authentication) sprite.url = `${sprite.url}?token=${this._authentication.token}`;\n        }\n      }\n      else {\n        if (isRelativePath(style.sprite)) style.sprite = parseRelativeUrl(style.sprite, styleUrl);\n        style.sprite = toCdnUrl(style.sprite);\n        if (this._authentication) style.sprite = `${style.sprite}?token=${this._authentication.token}`;\n      }\n    }\n\n    // Validate layers\n    for (let layerIndex = 0; layerIndex < style.layers.length; layerIndex++) {\n      const layer = style.layers[layerIndex];\n\n      // Fix fonts: https://maplibre.org/maplibre-style-spec/layers/#text-font\n      if (layer.layout && layer.layout['text-font'] && (layer.layout['text-font'] as string[]).length > 1) {\n        layer.layout['text-font'] = layer.layout['text-font'] as string[][0];\n      }\n    }\n\n    // Validate sources: https://maplibre.org/maplibre-style-spec/sources/\n    for (const sourceId of Object.keys(style.sources)) {\n      const source = style.sources[sourceId] as VectorSourceSpecification;\n\n      // Fix service URL\n      if (isRelativePath(source.url)) source.url = parseRelativeUrl(source.url, styleUrl);\n      source.url = cleanUrl(source.url);\n      // Format tiles\n      if (!source.tiles) {\n        if (this._serviceInfo.tiles) source.tiles = [`${source.url}${this._serviceInfo.tiles[0]}`];\n        else source.tiles = [`${source.url}tile/{z}/{y}/{x}.pbf`]; // Just take our best guess\n      }\n\n      // Provide authentication\n      if (this._authentication) {\n        if (source.url) source.url = `${source.url}?token=${this._authentication.token}`;\n        if (source.tiles) source.tiles = source.tiles.map(tileUrl => `${tileUrl}?token=${this._authentication.token}`);\n      }\n\n      // Provide attribution\n      source.attribution = this._getAttribution(sourceId);\n    }\n    // Public API is read-only\n    this._sources = style.sources as { [_: string]: VectorSourceSpecification };\n    this._layers = style.layers;\n  }\n\n  /**\n   * Get attribution for a source.\n   * @param sourceId - Source ID.\n   * @returns Attribution.\n   * @internal\n   */\n  _getAttribution(sourceId: string): string | null {\n    // Custom attribution is highest priority\n    if (this._customAttribution) return this._customAttribution;\n    // Next, attribution from item info if available\n    if (this._itemInfoLoaded && this._itemInfo.accessInformation) {\n      return this._itemInfo.accessInformation;\n    }\n    // 2. Next, attribution from data service\n    if (this._serviceInfoLoaded && this._serviceInfo.copyrightText) {\n      return this._serviceInfo.copyrightText;\n    }\n    // 3. Finally, attribution from style object\n    if (this._styleLoaded && sourceId && this.style.sources[sourceId] && (this.style.sources[sourceId] as VectorSourceSpecification).attribution) {\n      return (this.style.sources[sourceId] as VectorSourceSpecification).attribution;\n    }\n    return '';\n  }\n\n  // Public API\n  async initialize(): Promise<VectorTileLayer> {\n    if (this._ready) throw new Error('Vector tile layer has already been initialized. Cannot initialize again.');\n    const style = await this._loadStyle();\n    this._cleanStyle(style);\n    this._ready = true;\n    return this;\n  }\n\n  static async fromPortalItem(itemId: string, options: IVectorTileLayerOptions): Promise<VectorTileLayer> {\n    if (checkItemId(itemId) !== 'ItemId') throw new Error('Input is not a valid ArcGIS item ID.');\n\n    const vtl = new VectorTileLayer({\n      itemId: itemId,\n      ...options,\n    });\n\n    await vtl.initialize();\n    return vtl;\n  }\n\n  static async fromUrl(serviceUrl: string, options: IVectorTileLayerOptions): Promise<VectorTileLayer> {\n    if (checkServiceUrlType(serviceUrl) !== 'VectorTileService') throw new Error('Input is not a valid ArcGIS vector tile service URL.');\n\n    const vtl = new VectorTileLayer({\n      url: serviceUrl,\n      ...options,\n    });\n\n    await vtl.initialize();\n    return vtl;\n  }\n}\nexport default VectorTileLayer;\n/*\n * Copyright 2025 Esri\n *\n * Licensed under the Apache License Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n", "{\n  \"name\": \"@esri/maplibre-arcgis\",\n  \"version\": \"1.0.0-beta-7\",\n  \"description\": \"Wrapper for integrating ArcGIS data sources with MapLibre GL JS\",\n  \"keywords\": [\n    \"maplibre\",\n    \"arcgis\",\n    \"esri\",\n    \"feature\",\n    \"vector\",\n    \"tile\",\n    \"styles\"\n  ],\n  \"license\": \"Apache-2.0\",\n  \"contributors\": [\n    {\n      \"name\": \"George Owen\",\n      \"email\": \"gowen@esri.com\",\n      \"url\": \"https://github.com/gowin20\"\n    },\n    {\n      \"name\": \"Mark Torrey\",\n      \"email\": \"mtorrey@esri.com\",\n      \"url\": \"https://github.com/MarkTorrey\"\n    },\n    {\n      \"name\": \"Patrick Arlt\",\n      \"email\": \"parlt@esri.com\",\n      \"url\": \"https://github.com/patrickarlt\"\n    }\n  ],\n  \"type\": \"module\",\n  \"main\": \"dist/umd/maplibre-arcgis.min.js\",\n  \"module\": \"dist/esm/maplibre-arcgis.min.js\",\n  \"unpkg\": \"dist/umd/maplibre-arcgis.min.js\",\n  \"exports\": {\n    \".\": {\n      \"import\": \"./dist/esm/maplibre-arcgis.min.js\",\n      \"require\": \"./dist/umd/maplibre-arcgis.min.js\"\n    },\n    \"./package.json\": \"./package.json\"\n  },\n  \"directories\": {\n    \"example\": \"examples\",\n    \"test\": \"test\"\n  },\n  \"scripts\": {\n    \"prebuild\": \"mkdirp dist\",\n    \"build\": \"node build.js prod\",\n    \"build-dev\": \"node build.js dev\",\n    \"start\": \"node build.js prod watch\",\n    \"start-dev\": \"node build.js dev watch & npm run docs:watch\",\n    \"format\": \"eslint . --fix\",\n    \"docs\": \"typedoc\"\n  },\n  \"dependencies\": {\n    \"@esri/arcgis-rest-basemap-sessions\": \"^1.0.0\",\n    \"@esri/arcgis-rest-feature-service\": \"^4.2.0\",\n    \"@esri/arcgis-rest-portal\": \"^4.6.2\",\n    \"@esri/arcgis-rest-request\": \"^4.7.2\",\n    \"mitt\": \"3.0.1\"\n  },\n  \"devDependencies\": {\n    \"@eslint/js\": \"^9.30.1\",\n    \"@stylistic/eslint-plugin\": \"^5.2.2\",\n    \"@types/node\": \"^24.3.0\",\n    \"@vitest/eslint-plugin\": \"^1.3.4\",\n    \"esbuild\": \"^0.25.4\",\n    \"esbuild-plugin-umd-wrapper\": \"^3.0.0\",\n    \"eslint\": \"^9.30.1\",\n    \"eslint-plugin-html\": \"^8.1.3\",\n    \"eslint-plugin-tsdoc\": \"^0.4.0\",\n    \"globals\": \"^16.3.0\",\n    \"mkdirp\": \"^3.0.1\",\n    \"typedoc\": \"^0.28.9\",\n    \"typescript\": \"^5.8.3\",\n    \"typescript-eslint\": \"^8.36.0\"\n  },\n  \"peerDependencies\": {\n    \"maplibre-gl\": \"^5.6.1\"\n  },\n  \"homepage\": \"https://github.com/Esri/maplibre-arcgis#readme\",\n  \"bugs\": {\n    \"url\": \"https://github.com/Esri/maplibre-arcgis/issues\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/Esri/maplibre-arcgis.git\"\n  },\n  \"publishConfig\": {\n    \"access\": \"public\"\n  },\n  \"esri\": {\n    \"keyExports\": [\n      \"BasemapStyle\",\n      \"FeatureLayer\",\n      \"VectorTileLayer\",\n      \"AttributionControl\",\n      \"BasemapSession\"\n    ]\n  }\n}\n"],
  "mappings": "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",
  "names": ["MaplibreArcGIS_exports", "__export", "AttributionControl", "BasemapSession", "BasemapStyle", "EsriAttribution", "FeatureLayer", "HostedLayer", "version", "VectorTileLayer", "__toCommonJS", "import_maplibre_gl", "esriAttributionString", "maplibreAttributionString", "defaultMaplibreAttributionString", "EsriAttribution", "AttributionControl", "_AttributionControl", "maplibregl", "options", "attributions", "attribution", "attributionOptions", "map", "htmlElement", "attributionExists", "control", "attributionControl", "errorMessage", "AttributionControl_default", "all", "Map", "on", "type", "handler", "handlers", "get", "push", "set", "off", "splice", "indexOf", "emit", "evt", "slice", "map", "__rest", "s", "p", "i", "requiresFormData", "params", "key", "value", "processParams", "newParams", "param", "type", "firstElementType", "_b", "_a", "encodeParam", "key", "value", "arrayElem", "encodeQueryString", "params", "newParams", "processParams", "FormData", "File", "Blob", "encodeFormData", "params", "forceFormData", "useFormData", "requiresFormData", "newParams", "processParams", "formData", "FormData", "key", "filename", "encodeQueryString", "ArcGISRequestError", "message", "code", "response", "url", "options", "actualProto", "DEFAULT_ARCGIS_REQUEST_CONFIG", "GLOBAL_VARIABLE_NAME", "requestConfig", "sendNoCorsRequest", "url", "urlObj", "origin", "requestConfig", "response", "e", "registerNoCorsDomains", "authorizedCrossOriginNoCorsDomains", "domain", "addNoCorsDomain", "url", "requestConfig", "isNoCorsDomain", "result", "origin", "isNoCorsRequestRequired", "lastRequest", "warn", "message", "getFetch", "isSameOrigin", "url", "win", "origin", "_a", "NODEJS_DEFAULT_REFERER_HEADER", "getDefaultRequestOptions", "ArcGISAuthError", "ArcGISRequestError", "message", "code", "response", "url", "options", "actualProto", "getSession", "retryLimit", "tries", "retryRequest", "resolve", "reject", "session", "newOptions", "internalRequest", "e", "checkForErrors", "params", "originalAuthError", "messageCode", "errorCode", "requestOptions", "defaults", "httpMethod", "rawResponse", "fetchOptions", "isNoCorsDomain", "authentication", "rawToken", "warn", "originalUrl", "sameOrigin", "isSameOrigin", "requiresNoCors", "isNoCorsRequestRequired", "firstPromise", "sendNoCorsRequest", "err", "token", "requestHeaders", "urlWithQueryString", "encodeQueryString", "forceFormData", "encodeFormData", "NODEJS_DEFAULT_REFERER_HEADER", "requiresFormData", "getFetch", "fetch", "jsonError", "status", "statusText", "details", "formattedMessage", "data", "registerNoCorsDomains", "truncatedUrl", "request", "internalOptions", "__rest", "appendCustomParams", "customOptions", "keys", "baseOptions", "requestOptionsKeys", "options", "value", "key", "ArcGISTokenRequestErrorCodes", "ArcGISTokenRequestError", "message", "code", "response", "url", "options", "actualProto", "ArcGISAccessDeniedError", "actualProto", "cleanUrl", "url", "decodeParam", "param", "key", "value", "decodeQueryString", "query", "acc", "entry", "ErrorTypes", "FIVE_MINUTES_IN_MILLISECONDS", "fetchToken", "url", "requestOptions", "options", "request", "response", "portalTokenResponse", "AuthenticationManagerBase", "options", "cleanUrl", "user", "requestOptions", "url", "request", "response", "ApiKeyManager", "_ApiKeyManager", "AuthenticationManagerBase", "options", "apiKey", "url", "serialized", "data", "arcgisOnlineUrlRegex", "isOnline", "url", "arcgisOnlineUrlRegex", "normalizeOnlinePortalUrl", "portalUrl", "getOnlineEnvironment", "subdomain", "isFederated", "owningSystemUrl", "normalizedPortalUrl", "cleanUrl", "normalizedOwningSystemUrl", "canUseOnlineToken", "requestUrl", "portalIsOnline", "requestIsOnline", "portalEnv", "requestEnv", "validateAppAccess", "token", "clientId", "portal", "url", "request", "revokeToken", "requestOptions", "url", "cleanUrl", "token", "clientId", "options", "request", "response", "ArcGISRequestError", "base64UrlEncode", "value", "win", "generateCodeChallenge", "codeVerifier", "win", "bytes", "buffer", "base64UrlEncode", "generateRandomString", "win", "randomBytes", "base64UrlEncode", "isCredential", "credential", "ArcGISIdentityManager", "_ArcGISIdentityManager", "AuthenticationManagerBase", "options", "cleanUrl", "root", "win", "portal", "provider", "clientId", "expiration", "redirectUri", "popup", "popupWindowFeatures", "locale", "params", "style", "pkce", "state", "stateId", "generateRandomString", "stateStorageKey", "authorizeUrl", "authorizeUrlParams", "setupAuth", "codeVerifier", "codeVerifierStorageKey", "generateCodeChallenge", "codeChallenge", "encodeQueryString", "resolve", "reject", "e", "error", "ArcGISAccessDeniedError", "ArcGISAuthError", "decodeQueryString", "reportError", "errorMessage", "originalUrl", "createManager", "oauthInfo", "tokenEndpoint", "fetchToken", "tokenResponse", "parentOrigin", "handler", "event", "err", "manager", "response", "queryParams", "url", "authorizationCode", "ArcGISTokenRequestError", "ArcGISTokenRequestErrorCodes", "str", "serverInfo", "ssl", "expires", "revokeToken", "requestOptions", "request", "canUseOnlineToken", "token", "validateAppAccess", "validChildOrigins", "match", "protocol", "domainAndPath", "domain", "path", "domainWithProtocol", "validOrigins", "isValidOrigin", "isValidType", "isTokenValid", "msg", "existingToken", "isFederated", "tokenServicesUrl", "serverUrl", "NODEJS_DEFAULT_REFERER_HEADER", "newToken", "newTokenExpiration", "portalInfo", "d", "UserSession", "args", "JOB_STATUSES", "DEFAULT_START_BASEMAP_STYLE_SESSION_URL", "startNewSession", "startSessionUrl", "authentication", "styleFamily", "duration", "request", "determineSafetyMargin", "duration", "safetyMargin", "BaseSession", "params", "mitt_default", "check", "startSessionUrl", "styleFamily", "authentication", "safetyMargin", "duration", "autoRefresh", "SessionClass", "sessionResponse", "startNewSession", "actualSafetyMargin", "determineSafetyMargin", "session", "now", "previous", "newSession", "error", "eventName", "handler", "fn", "e", "token", "startTime", "endTime", "expires", "BasemapStyleSession", "_BasemapStyleSession", "BaseSession", "params", "DEFAULT_START_BASEMAP_STYLE_SESSION_URL", "BasemapSession", "_BasemapSession", "options", "mitt_default", "sessionParams", "ApiKeyManager", "BasemapStyleSession", "error", "eventName", "handler", "basemapSession", "checkItemId", "itemId", "checkServiceUrlType", "serviceUrl", "featureServiceTest", "cleanUrl", "url", "isRelativePath", "path", "parseRelativeUrl", "relativePath", "base", "toCdnUrl", "normalizeArcGISOnlineOrgDomain", "prdOrg", "devextOrg", "qaOrg", "warn", "args", "checkAccessTokenType", "token", "apiKeyPrefixes", "prefix", "sessionTokenPrefixes", "wrapAccessToken", "tokenType", "ArcGISIdentityManager", "ApiKeyManager", "DEFAULT_BASE_URL", "BasemapStyle", "_BasemapStyle", "options", "mitt_default", "checkItemId", "styleUrl", "map", "maplibreStyleOptions", "sessionData", "oldToken", "newToken", "session", "authentication", "wrapAccessToken", "style", "request", "e", "sourceId", "source", "i", "sprite", "id", "spriteArray", "AttributionControl", "preferences", "fromToken", "toToken", "sourceCaches", "tileUrl", "newTiles", "tile", "glyphs", "sprites", "eventName", "handler", "basemapStyle", "_", "basemapServiceUrl", "getPortalUrl", "requestOptions", "cleanUrl", "CONTROL_CHAR_MATCHER", "scrubControlChars", "str", "getItem", "id", "requestOptions", "url", "getItemBaseUrl", "options", "request", "portalUrlOrRequestOptions", "getPortalUrl", "getItemResources", "id", "requestOptions", "url", "getItemBaseUrl", "options", "request", "getItemResource", "itemId", "readAs", "getItemFile", "getItemFile", "id", "fileName", "readMethod", "requestOptions", "url", "getItemBaseUrl", "options", "justReturnResponse", "request", "response", "text", "scrubControlChars", "getLayer", "options", "request", "cleanUrl", "serviceRegex", "getService", "options", "request", "cleanUrl", "queryFeatures", "requestOptions", "queryOptions", "appendCustomParams", "request", "cleanUrl", "queryAllFeatures", "offset", "hasMore", "allFeaturesResponse", "pageSize", "userRecordCount", "_a", "recordCountToUse", "pagedOptions", "response", "returnedCount", "exceededTransferLimit", "_b", "throwReadOnlyError", "propertyName", "HostedLayer", "_HostedLayer", "value", "sourceIds", "_", "map", "esriAttribution", "AttributionControl_default", "oldId", "newId", "newSources", "lyr", "sourceId", "attribution", "layerId", "i", "layer", "esriGeometryDefaultStyleMap", "defaultLayerPaintMap", "FeatureLayer", "_FeatureLayer", "HostedLayer", "options", "warn", "checkItemId", "urlType", "checkServiceUrlType", "cleanUrl", "layerUrl", "layerInfo", "layerData", "queryFeatures", "queryAllFeatures", "getLayer", "sourceId", "layerType", "defaultLayer", "wrapAccessToken", "dataSource", "itemResponse", "getItem", "serviceInfo", "getService", "serviceUrl", "inputType", "geojsonLayer", "itemId", "VectorTileLayer", "_VectorTileLayer", "HostedLayer", "options", "checkItemId", "checkServiceUrlType", "cleanUrl", "styleInfo", "wrapAccessToken", "styleSource", "warn", "params", "getItemResource", "itemResources", "getItemResources", "styleFile", "entry", "request", "serviceResponse", "itemResponse", "getItem", "style", "styleUrl", "isRelativePath", "parseRelativeUrl", "toCdnUrl", "spriteIndex", "sprite", "layerIndex", "layer", "sourceId", "source", "tileUrl", "itemId", "vtl", "serviceUrl", "package_default", "customWindow", "version", "package_default"]
}
