{"version":3,"file":"BaseSession.js","sourceRoot":"","sources":["../../src/BaseSession.ts"],"names":[],"mappings":"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","sourcesContent":["import mitt from \"mitt\";\n\nimport { IAuthenticationManager } from \"@esri/arcgis-rest-request\";\nimport { StyleFamily } from \"./types/StyleFamily.js\";\nimport { startNewSession } from \"./utils/startNewSession.js\";\nimport { Writable } from \"./utils/writable.js\";\nimport { determineSafetyMargin } from \"./utils/detemineSafetyMargin.js\";\nimport {\n  DEFAULT_DURATION,\n  DEFAULT_SAFETY_MARGIN,\n  DEFAULT_CHECK_EXPIRATION_INTERVAL\n} from \"./utils/defaults.js\";\n\nexport interface IBasemapSessionParams {\n  token: string;\n  startSessionUrl: string;\n  styleFamily: StyleFamily;\n  authentication: IAuthenticationManager | string;\n  expires: Date;\n  startTime: Date;\n  endTime: Date;\n  safetyMargin?: number;\n  duration?: number;\n  autoRefresh?: boolean;\n}\n\nexport interface IStartSessionParams {\n  styleFamily?: StyleFamily;\n  authentication: IAuthenticationManager | string;\n  safetyMargin?: number;\n  duration?: number;\n  autoRefresh?: boolean;\n\n  /**\n   * The URL to start the session. If not provided, it will use the default URL.\n   * @private\n   */\n  startSessionUrl?: string;\n}\n\n/**\n * The base class for all basemap sessions. This class implements the {@linkcode IAuthenticationManager} interface and provides methods to start, refresh, and check the expiration of a session.\n * This is not intendet to be used directly, but instead is extended by other classes such as {@linkcode BasemapStyleSession} and {@linkcode StaticBasemapTilesSession}.\n *\n * @abstract\n * @implements {IAuthenticationManager}\n */\nexport abstract class BaseSession implements IAuthenticationManager {\n  // the static methods for event handlers are used to provide doc via typedoc and do not need to be tested.\n  /* istanbul ignore next -- @preserve */\n  /**\n   * Event handler for when an error occurs during session management.\n   */\n  static readonly error = function error(e: Error): void {}; // eslint-disable-line @typescript-eslint/no-empty-function\n\n  // the static methods for event handlers are used to provide doc via typedoc and do not need to be tested.\n  /* istanbul ignore next -- @preserve */\n  /**\n   * Event handler for when a session expires and the `token` it no longer valid.\n   *\n   * @event expired\n   * @param e - The parameters for the expired event.\n   * @param e.token - The session token that expired.\n   * @param e.startTime - The start time of the session.\n   * @param e.endTime - The end time of the session.\n   * @param e.expires - The expiration time of the session.\n   */\n  static readonly expired = function expired(e: {\n    token: string;\n    startTime: Date;\n    endTime: Date;\n    expires: Date;\n  }): void {}; // eslint-disable-line @typescript-eslint/no-empty-function\n\n  // the static methods for event handlers are used to provide doc via typedoc and do not need to be tested.\n  /* istanbul ignore next -- @preserve */\n  /**\n   * Event handler for when a session refreshes and a new `token` is available.\n   *\n   * @event refreshed\n   * @param e. - The parameters for the refreshed event.\n   * @param e.previous - The previous session details.\n   * @param e.previous.token - The previous session token.\n   * @param e.previous.startTime - The start time of the previous session.\n   * @param e.previous.endTime - The end time of the previous session.\n   * @param e.previous.expires - The expiration time of the previous session.\n   * @param e.current - The current session details.\n   * @param e.current.token - The current session token.\n   * @param e.current.startTime - The start time of the current token.\n   * @param e.current.endTime - The end time of the current session.\n   * @param e.current.expires - The expiration time of the current token.\n   */\n  static readonly refreshed = function refreshed(e: {\n    previous: {\n      token: string;\n      startTime: Date;\n      endTime: Date;\n      expires: Date;\n    };\n    current: {\n      token: string;\n      startTime: Date;\n      endTime: Date;\n      expires: Date;\n    };\n  }): void {}; // eslint-disable-line @typescript-eslint/no-empty-function\n\n  /**\n   * The portal URL that the session is associated with. This generally is not used but exists to implement the `IAuthenticationManager` interface.\n   */\n  readonly portal: string;\n\n  /**\n   * The style family of the session. This is used to determine the type of basemap styles that are available.\n   */\n  readonly styleFamily: StyleFamily;\n\n  /**\n   * The authentication manager or token used for the session.\n   * This can be an instance of {@linkcode ApiKeyManager}, {@linkcode ArcGISIdentityManager}, {@linkcode ApplicationCredentialsManager} or a string token.\n   */\n  readonly authentication: IAuthenticationManager | string;\n\n  /**\n   * The expiration date of the session. This is the {@linkcode BaseSession.endTime} minus the {@linkcode BaseSession.safetyMargin}. This is used internally to determine if the session is expired.\n   */\n  readonly expires: Date;\n\n  /**\n   * The start time of the session. This is the time returned from the API when the session war started.\n   */\n  readonly startTime: Date;\n\n  /**\n   * The end time of the session. This is the time returned from the API when the session will end.\n   */\n  readonly endTime: Date;\n\n  /**\n   * The token for the session.\n   */\n  readonly token: string;\n\n  /**\n   * The URL used to start the session.\n   */\n  readonly startSessionUrl: string;\n\n  /**\n   * The safety margin in milliseconds. This subtracted from the {@linkcode BaseSession.endTime} to get the {@linkcode BaseSession.expiration}.\n   */\n  readonly safetyMargin: number;\n\n  /**\n   * The duration of the session in seconds. This is used to determine how long the session will last when the session is refreshed.\n   */\n  readonly duration: number;\n\n  /**\n   * The interval at which to check the expiration time of the session. This is always 10 seconds or 1/100th of the duration, whichever is smaller.\n   */\n  readonly expirationCheckInterval: number;\n\n  /**\n   * The ID of the timer used to check the expiration time of the session.\n   */\n  private expirationTimerId: any = null;\n\n  /**\n   * Internal instance of [`mitt`](https://github.com/developit/mitt) used for event handlers. It is recommended to use {@linkcode BasemapSession.on}, {@linkcode BasemapSession.off} or {@linkcode BasemapSession.once} instead of `emitter.`\n   */\n  private emitter: any;\n\n  /**\n   * A handler that is used to automatically refresh the session when it expires.\n   */\n  private autoRefreshHandler: (() => void) | null = null;\n\n  /**\n   * Creates a new instance of the BaseSession class. Generally you should not create an instance of this class directly, but instead use the static methods to start a session or deserialize a session.\n   *\n   * You may need to create an instance of this class directly if you are  not using the built in deserialize method.\n   *\n   * @param params - The parameters for the session.\n   * @param params.startSessionUrl - The URL to start the session.\n   * @param params.token - The token for the session.\n   * @param params.styleFamily - The style family of the session.\n   * @param params.authentication - The authentication manager or token used for the session.\n   * @param params.expires - The expiration date of the session.\n   * @param params.startTime - The start time of the session.\n   * @param params.endTime - The end time of the session.\n   * @param params.safetyMargin - The safety margin in milliseconds.\n   * @param params.duration - Indicates if this is a test session.\n   */\n  constructor(params: IBasemapSessionParams) {\n    this.startSessionUrl = params.startSessionUrl;\n    this.token = params.token;\n    this.styleFamily = params.styleFamily || \"arcgis\";\n    this.authentication = params.authentication;\n    this.duration = params.duration || DEFAULT_DURATION;\n    this.startTime = params.startTime;\n    this.endTime = params.endTime;\n    this.expires = params.expires;\n    this.safetyMargin = params.safetyMargin;\n    this.expirationCheckInterval =\n      Math.min(this.duration / 100, DEFAULT_CHECK_EXPIRATION_INTERVAL) * 1000;\n    this.emitter = mitt();\n  }\n\n  /**\n   * Checks if the session is expired. If it is expired, it emits an \"expired\" event. The event will fire **before** the method returns true.\n   *\n   * @returns {boolean} - Returns true if the session is expired, otherwise false.\n   */\n  isSessionExpired() {\n    if (this.isExpired) {\n      this.emitter.emit(\"expired\", {\n        token: this.token,\n        startTime: this.startTime,\n        endTime: this.endTime,\n        expires: this.expires\n      });\n    }\n    return this.isExpired;\n  }\n\n  /**\n   * Starts checking the expiration time of the session. This will check the expiration time immediately and then on an interval.\n   * If the session is expired, it will emit an \"expired\" event.\n   */\n  startCheckingExpirationTime() {\n    const check = () => {\n      this.isSessionExpired();\n    };\n\n    if (!this.expirationTimerId) {\n      this.expirationTimerId = setInterval(\n        check,\n        // check every 10 seconds or 1/100th of the duration, whichever is smaller\n        this.expirationCheckInterval\n      ); // check immediatly then on an interval\n    }\n\n    setTimeout(() => {\n      check(); // check immediately after starting the interval\n    }, 10);\n\n    return this.expirationTimerId; // return the timer ID so it can be stopped later\n  }\n\n  /**\n   * Stops checking the expiration time of the session. This will clear the interval that was set by {@linkcode BaseSession.startCheckingExpirationTime}.\n   */\n  stopCheckingExpirationTime() {\n    if (this.expirationTimerId) {\n      clearInterval(this.expirationTimerId);\n      this.expirationTimerId = null;\n    }\n  }\n\n  /**\n   * Indicates if the session is currently checking for expiration time.\n   *\n   * @returns {boolean} - Returns true if the session is checking for expiration time, otherwise false.\n   */\n  get checkingExpirationTime(): boolean {\n    return !!this.expirationTimerId;\n  }\n\n  /**\n   * Starts a new session using the provided parameters and returns an instance of the session class.\n   *\n   * @param params - The parameters for starting the session.\n   * @param SessionClass - The class to use for the session.\n   * @returns A promise that resolves to an instance of the session class.\n   */\n  protected static async startSession<T extends BaseSession>(\n    {\n      startSessionUrl,\n      styleFamily = \"arcgis\",\n      authentication,\n      safetyMargin,\n      duration = DEFAULT_DURATION,\n      autoRefresh = true\n    }: {\n      startSessionUrl?: string;\n      styleFamily?: StyleFamily;\n      authentication: IAuthenticationManager | string;\n      safetyMargin?: number;\n      duration?: number;\n      autoRefresh?: boolean;\n    },\n    SessionClass: new (params: IBasemapSessionParams) => T\n  ): Promise<T> {\n    const sessionResponse = await startNewSession({\n      startSessionUrl,\n      styleFamily,\n      authentication,\n      duration\n    });\n    const actualSafetyMargin = determineSafetyMargin(duration, safetyMargin);\n\n    const session = new SessionClass({\n      startSessionUrl: startSessionUrl,\n      token: sessionResponse.sessionToken,\n      styleFamily,\n      authentication,\n      safetyMargin: actualSafetyMargin,\n      expires: new Date(sessionResponse.endTime - actualSafetyMargin * 1000),\n      startTime: new Date(sessionResponse.startTime),\n      endTime: new Date(sessionResponse.endTime),\n      duration\n    });\n\n    session.startCheckingExpirationTime();\n\n    if (autoRefresh) {\n      session.startAutoRefresh();\n    }\n\n    return session as T;\n  }\n\n  /**\n   * Checks if the session is expired.\n   *\n   */\n  get isExpired(): boolean {\n    return this.expires < new Date();\n  }\n\n  /**\n   * Gets the session token. If the session is expired, it will refresh the credentials and return the new token.\n   *\n   * @returns A promise that resolves to the session token.\n   */\n  getToken(): Promise<string> {\n    if (this.isExpired) {\n      return this.refreshCredentials().then(() => this.token);\n    }\n\n    return Promise.resolve(this.token);\n  }\n\n  /**\n   * Indicates if the session can be refreshed. This is always true for this class.\n   *\n   * @returns {boolean} - Always returns true.\n   */\n  get canRefresh(): boolean {\n    return true;\n  }\n\n  /**\n   * Indicates if the session is set to automatically refresh when it expires.\n   *\n   * @returns {boolean} - Returns true if auto-refresh is enabled, otherwise false.\n   */\n  get autoRefresh(): boolean {\n    return !!this.autoRefreshHandler && !!this.expirationTimerId;\n  }\n\n  /**\n   * Refreshes the session credentials by starting a new session.\n   * This will emit a \"refreshed\" event with the previous and current session details.\n   *\n   * @returns A promise that resolves to the current instance of the session.\n   */\n  async refreshCredentials(): Promise<this> {\n    // @TODO switch this to structured clone when we upgrade to Node 20+ types so we don't have to parse the dates later\n    const previous = JSON.parse(\n      JSON.stringify({\n        token: this.token,\n        startTime: this.startTime,\n        endTime: this.endTime,\n        expires: this.expires\n      })\n    );\n\n    try {\n      const newSession = await startNewSession({\n        startSessionUrl: this.startSessionUrl,\n        styleFamily: this.styleFamily,\n        authentication: this.authentication,\n        duration: this.duration\n      });\n\n      this.setToken(newSession.sessionToken);\n      this.setStartTime(new Date(newSession.startTime));\n      this.setEndTime(new Date(newSession.endTime));\n      this.setExpires(new Date(newSession.endTime - this.safetyMargin * 1000));\n\n      this.emitter.emit(\"refreshed\", {\n        previous: {\n          token: previous.token,\n          startTime: new Date(previous.startTime),\n          endTime: new Date(previous.endTime),\n          expires: new Date(previous.expires)\n        },\n        current: {\n          token: this.token,\n          startTime: this.startTime,\n          endTime: this.endTime,\n          expires: this.expires\n        }\n      });\n    } catch (error) {\n      this.emitter.emit(\"error\", error);\n      throw error;\n    }\n\n    return this;\n  }\n  /**\n   * Enables auto-refresh for the session. This will automatically refresh the session when it expires.\n   * It will also start checking the expiration time of the session if it is not already started via {@linkcode BaseSession.startCheckingExpirationTime}.\n   */\n  startAutoRefresh() {\n    if (!this.expirationTimerId) {\n      this.startCheckingExpirationTime();\n    }\n\n    this.autoRefreshHandler = () => {\n      this.refreshCredentials().catch((error: Error) => {\n        this.emitter.emit(\"error\", error);\n      });\n    };\n\n    this.on(\"expired\", this.autoRefreshHandler);\n  }\n\n  /**\n   * Disables auto-refresh for the session. This will stop automatically refreshing the session when it expires.\n   * This will  **not** stop checking the expiration time of the session. If you want to stop automated expiration\n   * checking, call {@linkcode BaseSession.stopCheckingExpirationTime} after calling this method.\n   */\n  stopAutoRefresh() {\n    if (this.autoRefreshHandler) {\n      this.off(\"expired\", this.autoRefreshHandler);\n      this.autoRefreshHandler = null;\n    }\n  }\n\n  /**\n   * A handler that listens for an eventName and returns custom handler.\n   *\n   * @param eventName A string of what event to listen for.\n   * @param handler A function of what to do when eventName was called.\n   */\n  on(event: \"refreshed\", handler: typeof BaseSession.refreshed): void;\n  on(event: \"expired\", handler: typeof BaseSession.expired): void;\n  on(event: \"error\", handler: typeof BaseSession.error): void;\n  on(\n    eventName: string,\n    handler:\n      | typeof BaseSession.refreshed\n      | typeof BaseSession.expired\n      | typeof BaseSession.error\n  ) {\n    this.emitter.on(eventName, handler);\n    this.isSessionExpired(); // check if the session is expired immediately after adding the handler\n  }\n\n  /**\n   * A handler that listens for an event once and returns a custom handler. Events listened to with this method cannot be removed with {@linkcode BasemapSession.off}.\n   *\n   * @param eventName A string of what event to listen for.\n   * @param handler A function of what to do when eventName was called.\n   */\n  once(event: \"refreshed\", handler: typeof BaseSession.refreshed): void;\n  once(event: \"expired\", handler: typeof BaseSession.expired): void;\n  once(event: \"error\", handler: typeof BaseSession.error): void;\n  once(\n    eventName: string,\n    handler:\n      | typeof BaseSession.refreshed\n      | typeof BaseSession.expired\n      | typeof BaseSession.error\n  ) {\n    const fn = (e: any) => {\n      this.emitter.off(eventName, fn);\n      handler(e);\n    };\n\n    this.emitter.on(eventName, fn);\n  }\n\n  /**\n   * A handler that will remove a listener from a given event.\n   *\n   * @param eventName A string of what event to listen for.\n   * @param handler A function of what to do when eventName was called.\n   */\n  off(event: \"refreshed\", handler: typeof BaseSession.refreshed): void;\n  off(event: \"expired\", handler: typeof BaseSession.expired): void;\n  off(event: \"error\", handler: typeof BaseSession.error): void;\n  off(\n    eventName: string,\n    handler:\n      | typeof BaseSession.refreshed\n      | typeof BaseSession.expired\n      | typeof BaseSession.error\n  ) {\n    this.emitter.off(eventName, handler);\n  }\n\n  /**\n   * These private methods are used to set the internal state of the session.\n   */\n  private setToken(token: string) {\n    (this as Writable<typeof this>).token = token;\n  }\n  private setStartTime(startTime: Date) {\n    (this as Writable<typeof this>).startTime = startTime;\n  }\n  private setEndTime(endTime: Date) {\n    (this as Writable<typeof this>).endTime = endTime;\n  }\n  private setExpires(expires: Date) {\n    (this as Writable<typeof this>).expires = expires;\n  }\n}\n"]}